
/*************************************************************************
 ** From Perforce:
 **
 ** $Id: //Smart_design/ChipGen/rtl/Env_rtl/clocker.v#4 $
 ** $DateTime: 2009/12/16 15:43:14 $
 ** $Change: 8291 $
 ** $Author: shacham $
 *************************************************************************/

/* *****************************************************************************
 * File: clocker.v
 * Author: Ofer Shacham
 * 
 * 
 * Change bar:
 * -----------
 * Date          Author   Description
 * Feb 06, 2009  shacham  init version
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * ****************************************************************************/

/*******************************************************************************
 * Simple module to generate clock and reset for local testbenches
 * 
 * 
 * 
 ******************************************************************************/

//; my $clk_period = parameter(Name=>'CLK_PERIOD', Val=>5, Min=>2, Step=>2,
//; 			       Doc=>'What is the clock period? (must be even)');
//; my $reset_period = parameter(Name=>'RST_PERIOD', Val=>20, Min=>1, Step=>1,
//; 				 Doc=>'What is the length of reset (in clk cycles)?');

module `mname`
   (output logic clk,
    output logic reset);

   int 		 clk_period;
   int 		 clk_half_period;
   
   initial begin
      clk <= 1'b0;
      reset <= 1'b1;
      calibrate_clk;
      fork
	 do_clk;
	 do_reset;
      join_none
   end

   // Task to read runtime clock period argument if any
   task calibrate_clk;
      clk_period = `$clk_period`;
      clk_half_period = clk_period / 2;
      
      if ( $test$plusargs("clk_period") ) begin
	 $value$plusargs("clk_period=%g",clk_period);
	 clk_half_period = clk_period / 2 ;
      end
      
      if( clk_period < 100 ) begin
	      $display( "ERROR: Clock Period too small, Try again" );
	      $finish(2);
      end else begin
	$display( "Using Clk Period= %d pS", clk_period) ;
      end
   endtask // calibrate_clk

   // task to reverse reset (works for both pos and neg reset logic)
   task do_reset;
      repeat(`$reset_period`) @(posedge clk);
      reset <= ~reset;
   endtask // do_reset
   

   // taks to toggle clk
   task do_clk;
      while(1) begin
	 #clk_half_period;
	 clk <= ~clk;
      end
   endtask // do_clk
   
endmodule


