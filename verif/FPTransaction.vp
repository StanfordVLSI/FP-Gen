/*************************************************************************
 ** From Perforce:
 **
 ** $Id$
 ** $DateTime$
 ** $Change$
 ** $Author$
 *************************************************************************/

/* *****************************************************************************
 * Description:
 * Single transaction generator for FP Mult-Acc
 * Multiple constraints are specified and they MUST be turned off/on
 * by the instantiators of the transaction. 
 * "00000000_00000000", // Zero
 * "00080000_00000000", // Denorm #1
 * "000FFFFF_FFFFFFFF", // Denorm #2
 * "00000000_00000001", // Denorm #3
 * "7FF80000_00000000", // NaN (quiet)
 * "7FF000F0_000F0000", // NaN (signalling)
 * "7FEFFFFF_FFFFFFFF", // Max
 * "7FF00000_00000000", // Inf
 * "00100000_00000000", // Min
 * "3FF00000_00000000", // 1.0
 * "3FEFFFFF_FFFFFFFF",  // 0.111111111...
 *     
 * "80000000_00000000", // Zero
 * "80080000_00000000", // Denorm #1
 * "800FFFFF_FFFFFFFF", // Denorm #2
 * "80000000_00000001", // Denorm #3
 * "FFF80000_00000000", // NaN (quiet)
 * "FFF000F0_000F0000", // NaN (signalling)
 * "FFEFFFFF_FFFFFFFF", // Max
 * "FFF00000_00000000", // Inf
 * "80100000_00000000", // Min
 * "BFF00000_00000000", // 1.0
 * "BFEFFFFF_FFFFFFFF"  // 0.111111111...
 * 
 * 
 * Parameters:
 * * FractionWidth, ExponentWidth, Architecture
 * * TestDenormals -- generate denormal transactions? (YES/NO)
 * * Random -- Enables control of transaction distribution weights by parameters (YES/NO)
 *   * If Random == YES then the following are the parameters to control the weights:
 *     SignIsPos_DistWeight, Zero_DistWeight, QuietNaN_DistWeight, SignalingNaN_DistWeight, 
 *     Min_DistWeight, Max_DistWeight, Inf_DistWeight, One_DistWeight, PointOneOneOne_DistWeight, 
 *     EzAndSml_DistWeight, Random_DistWeight
 *     If  TestDenormals == YES the following parameters also exists:
 *       Denorm100_DistWeight, DenormFFF_DistWeight, Denorm001_DistWeight, DenormRnd_DistWeight
 *     If Architecture==Cascade
 *       Inc_DistWeight
 * * NamedTransCtrl -- Enables per transaction module control of weights at runtime ('', 'A'..'Z')
 *  
 * 
 * 
 * Change bar:
 * -----------
 * Date          Author    Description
 * Oct 05, 2011  shacham   init version - test generator for FP Mult-Acc
 * ****************************************************************************/

/*******************************************************************************
 * PARAMETERIZATION
 * ****************************************************************************/
//; my $frac_width = parameter(Name=>'FractionWidth', Val=>52, 
//;                           Min=>4, Step=>1, 
//;                           Doc=>"Width of the signal for the multiplier ".
//;                           "(default is IEEE Double, 52 bit)");
//; my $exp_width = parameter(Name=>'ExponentWidth', Val=>11, 
//;                           Min=>4, Step=>1, 
//;                           Doc=>"Width of the signal for the multiplier ".
//;                           "(default is IEEE Double, 11 bit)");
//; my $arch = parameter(Name=>'Architecture', Val=>'Cascade', List=>['Cascade', 'Fused'],
//; 			 Doc=>"Which architecture is tested? Cascaded multiply accumulate ".
//; 			      "or Fused? (Pick:Cascade/Fused)");
//; my $test_denormals = parameter(Name=>'TestDenormals', Val=>'YES', 
//;                           List=>['YES','NO'], 
//;                           Doc=>"Enable denormals parameters to enable handling denormal values ".
//;                                "of inputs A and B correctly (YES/NO)");
//;
//; # Is this a randomly generated transaction?
//; my $rand_mode = parameter(Name=>'Random',
//;                            Val=>'', List=>['YES','NO'],
//;                            Doc=>"Is this a randomly generated transaction? ".
//;				    "(Possible values are YES or NO)" ); 
//;
//; # In Random mode only:
//; my $NamedTransCtrl;
//; my ($SignIsPos_w, $Zero_w, $QuietNaN_w, $SignalingNaN_w, $Min_w, $Max_w, $Inf_w);
//; my $DenormRnd_w = 0; my $Denorm100_w = 0; my $DenormFFF_w = 0; my $Denorm001_w = 0;
//; my ($One_w, $PointOneOneOne_w, $EzAndSml_w, $Random_w);
//; my $Inc_w = 0;
//;
//; if ($rand_mode =~ /YES/){
//;	# Parameter to enable per transaction control from command line
//;	$NamedTransCtrl = parameter(Name=>'NamedTransCtrl', Val=>'',
//;				   List=>['','A'..'Z'],
//;				   Doc=>"This parameter enables per-named-transaction control ".
//;	                            "of the 'Distribution Weight' parameters from the command line ".
//;	                            "using the notation 'RUN=+Any_DistWeightX=value' ".
//;	                            "where 'X' can be one of 'A' through 'Z', and 'Any' can be ".
//;					"any of the below 'DistWeight' parameters. Allowed values for ".
//;					"NamedTransCtrl are capital letters 'A' through 'Z' or it can be left empty");
//;	# Parameters to control constraints
//;	$SignIsPos_w = parameter(Name=>'SignIsPos_DistWeight', Val=>50, Min=>0, Step=>1, Max=>100,
//;					Doc=>"Distribution weight for positive values (range is 0..100)");
//;     if ($arch =~ /Cascade/){
//;	  $Inc_w = parameter(Name=>'Inc_DistWeight', Val=>0, Min=>0, Step=>1, Max=>100,
//;	  		     Doc=>"Distribution weight for an increment-by-one trailer (range is 0..100)");
//;     }
//;	$Zero_w = parameter(Name=>'Zero_DistWeight', Val=>10, Min=>0, Step=>1,
//;			    Doc=>"Distribution weight for Zero pattern");
//; 	if ($test_denormals =~ /NO/){
//;	  $Denorm100_w = parameter(Name=>'Denorm100_DistWeight', Val=>2, Min=>0, Step=>1,
//;	  				Doc=>"Distribution weight for Denorm with 100..0 pattern");
//;	  $DenormFFF_w = parameter(Name=>'DenormFFF_DistWeight', Val=>2, Min=>0, Step=>1,
//;	  				Doc=>"Distribution weight for Denorm with FFF..F pattern");
//;	  $Denorm001_w = parameter(Name=>'Denorm001_DistWeight', Val=>2, Min=>0, Step=>1,
//;	  				Doc=>"Distribution weight for Denorm with 000..01 pattern");
//;	  $DenormRnd_w = parameter(Name=>'DenormRnd_DistWeight', Val=>4, Min=>0, Step=>1,
//;	  				Doc=>"Distribution weight for Denorm random (non-zero) pattern");
//;     }
//;	$QuietNaN_w = parameter(Name=>'QuietNaN_DistWeight', Val=>10, Min=>0, Step=>1,
//;					Doc=>"Distribution weight for QuietNaN pattern");
//;	$SignalingNaN_w = parameter(Name=>'SignalingNaN_DistWeight', Val=>10, Min=>0, Step=>1,
//;					Doc=>"Distribution weight for SignalingNaN pattern");
//;	$Min_w = parameter(Name=>'Min_DistWeight', Val=>10, Min=>0, Step=>1,
//;					Doc=>"Distribution weight for Min pattern");
//;	$Max_w = parameter(Name=>'Max_DistWeight', Val=>10, Min=>0, Step=>1,
//;					Doc=>"Distribution weight for Max pattern");
//;	$Inf_w = parameter(Name=>'Inf_DistWeight', Val=>10, Min=>0, Step=>1,
//;					Doc=>"Distribution weight for Inf pattern");
//;	$One_w = parameter(Name=>'One_DistWeight', Val=>10, Min=>0, Step=>1,
//;					Doc=>"Distribution weight for One pattern");
//;	$PointOneOneOne_w = parameter(Name=>'PointOneOneOne_DistWeight', Val=>10, Min=>0, Step=>1,
//;					Doc=>"Distribution weight for PointOneOneOne (0.111111111) pattern");
//;	$EzAndSml_w = parameter(Name=>'EzAndSml_DistWeight', Val=>0, Min=>0, Step=>1,
//;					Doc=>"Distribution weight for an easy and small number");
//;	$Random_w = parameter(Name=>'Random_DistWeight', Val=>10, Min=>0, Step=>1,
//;					Doc=>"Distribution weight for Random (excluding Zero, Inf, Denorm and NaN) pattern");
//; }

class `mname`;
   /* TO ME: Within class definitions, the rand and randc modifiers signal variables 
    * that are to undergo randomization. randc specifies permutation-based randomization, 
    * where a variable will take on all possible values once before any value is repeated. 
    * Variables without modifiers are not randomized. */
   typedef enum {Zero, Denorm100, DenormFFF, Denorm001, DenormRnd, QuietNaN, 
		 SignalingNaN, Min, Max, Inf, One, PointOneOneOne, EzAndSml, Random} FPTransType;
   rand FPTransType TransType;
   
   rand bit [`$frac_width - 1`:0] 	Fraction;
   rand bit [`$exp_width - 1`:0] 	Exponent;
   rand bit 				Sign;
   rand bit 				Inc; // only used to test cascaded architecrures
   
   // --------------------------------------------------------------------------
   // Some setters:
   // --------------------------------------------------------------------------
   // Kind of C'tor for a regular, NON-Random transaction
   function ForceSignExpFrac(logic Sign, logic [`$exp_width - 1`:0] Exp, 
    			     logic [`$frac_width - 1`:0] Frac);
      this.Fraction = Frac;
      this.Exponent = Exp;
      this.Sign = Sign;
      this.Inc = 1'b0;
      
      if(Exponent == `$exp_width`'b0) begin
	 if (Fraction == `$frac_width`'b0)
	   TransType = Zero;
	 else
	   TransType = DenormRnd; // since we don't care about distinctions within the dnorm range
      end
      
      else if(Exponent == {(`$exp_width`){1'b1}}) begin
	 if (Fraction == `$frac_width`'b0)
	   TransType = Inf;
	 else begin
	    if (Fraction[`$frac_width-1`] == 1'b1)
	      TransType = QuietNaN;
	    else if (Fraction[`$frac_width-1`] == 1'b0 && Fraction[`$frac_width-2`:0] != `$frac_width-1`'b0)
	      TransType = SignalingNaN;
	    else begin
	      $display("%t: ERROR: FPTransaction constructor encountered an unknown NaN type: Exp=%h, Frac=%h",
		       $time, Exponent, Fraction);
	       $finish(2);
	    end	    
	 end // else: !if(Fraction == `$frac_width`'b0)
      end // if (Exponent == {(`$exp_width`){1'b1}})

      else begin
	 TransType = Random; // since we don't care about distinctions within the allowed range
      end // else: !if(Exponent == {(`$exp_width`){1'b1}})
   endfunction // ForceSignExpFrac
   

   
   // Kind of C'tor for a regular, NON-Random transaction using Mantissa instead of Fraction
   // IMPORTANT: This function was custom built for the FPMult format
   function void FPMultResult_to_FPTrans(logic Sign, logic [`$exp_width + 1`:0] Exp, logic [`$frac_width`:0] Man, 
    		 			 logic NaN, logic Inf, logic Zero, logic RSticky);

      $write("%t: RESULT: Sign=%1b, Exp=0x%h, Man=0x%h NaN=%b Inf=%b Zero=%b RSticky=%b -- My thoughts: ", 
	     $time, Sign, Exp, Man, NaN, Inf, Zero, RSticky);

      // Start with clear cut flagged cases:
      // ----------------------------------
      if (NaN) begin // NaN cases
	 this.ForceSignExpFrac(Sign, {(`$exp_width`){1'b1}}, `$frac_width`'b1); // FIXME: Signaling? maybe Quiet NaN?
	 $display("NaN==1 ==> Assuming NaN");
	 return;
      end
      if (Inf) begin // Inf cases
	 this.ForceSignExpFrac(Sign, {(`$exp_width`){1'b1}}, `$frac_width`'b0);
	 $display("Inf==1 ==> Assuming Inf");
	 return;
      end
      if (Zero) begin // Zero cases
	 this.ForceSignExpFrac(Sign, `$exp_width`'b0, `$frac_width`'b0);
	 $display("Zero==1 ==> Assuming Zero");
	 return;
      end
      if (RSticky) begin // Rsticky cases
	 $write("RSticky==1 ==>  ");
      	 //corner case alert: if FP==1.111111 we need Man<=1.0 and Exp<=Exp+1
      	 if (Man == {(`$frac_width+1`){1'b1}}) begin
	    Man = `$frac_width+1`'b1;
	    Exp = Exp + 1;
	    $display("Man==1.111...1 ==> Exp=Exp+1 and Man=1.0");
	 end
	 else begin
	    Man = Man+1;
	    $display("Man!=1.111...1 ==> Man=Man+1");
	 end
      end

      // Move to unflagged cases:
      // ---------------------------
      if (Exp > `2**$exp_width-2`) begin // Exponent overflow case
	 this.ForceSignExpFrac(Sign, {(`$exp_width+2`){1'b1}}, `$frac_width`'b0);
	 $display("Exp>MaxExp (`2**$exp_width-2`)  ==> Assume Inf");
      end else
      if (Exp == `$exp_width+2`'b0) begin // Zero cases
	 this.ForceSignExpFrac(Sign, Exp[`$exp_width-1`:0], `$frac_width`'b0);
	 $display("Exp==0  ==> Assume Zero");
      end
      else if (Exp == `$exp_width+2`'b1) begin // Denorm and Normal cases
	 if (Man[`$frac_width`] == 1'b0) begin  // Denorm
	    this.ForceSignExpFrac(Sign, `$exp_width+2`'b0, Man[`$frac_width - 1`:0]);
	    $display("Exp==1, Man[msb]=0  ==> Assume Denorm");
	 end else begin 			// Normals (with wxp=1)
	    this.ForceSignExpFrac(Sign, Exp[`$exp_width-1`:0], Man[`$frac_width - 1`:0]);
	    $display("Exp==1, Man[msb]=1  ==> Assume Normal");
	 end
      end else if (Exp == {(`$exp_width+2`){1'b1}}) begin // Inf and NaN cases
	 this.ForceSignExpFrac(Sign, Exp[`$exp_width-1`:0], Man[`$frac_width - 1`:0]);
	 $display("Exp==111..1 ==> Assuming Inf or NaN");
      end

      // Finally, normal case:
      // ---------------------------
      else begin 					// Just normal cases
	 $display("Normal Case!");
	 this.ForceSignExpFrac(Sign, Exp[`$exp_width-1`:0], Man[`$frac_width - 1`:0]);
      end
   endfunction // FPMultResult_to_FPTrans



   // This function calculates the Inc value into the FP transaction
   function void CalculateInc();
      if (Inc==0) return;
      else if (TransType==Zero) begin
	 Fraction += 1;
	 TransType = Denorm001;
      end
      else if (TransType==DenormFFF) begin
	 Fraction = `$frac_width`'b0;
	 Exponent = `$exp_width`'b1;
	 TransType = Min;
      end
      else if (TransType==Denorm001 || TransType==Denorm100 || TransType==DenormRnd) begin
	 Fraction += 1;
	 if (Fraction == {(`$frac_width`){1'b1}})
	   TransType = DenormFFF;
	 else if (Fraction == {1'b1, `$frac_width-1`'b0})
	   TransType = Denorm100;
	 else
	   TransType = DenormRnd;
      end
      else if (TransType==QuietNaN || TransType==SignalingNaN || TransType==Inf) begin
      end
      else if (TransType==Max) begin
	 Fraction = `$frac_width`'b0;
	 Exponent = {(`$exp_width`){1'b1}};
	 TransType = Inf;
      end
      else if (TransType==PointOneOneOne) begin
	 Fraction = 0;
	 Exponent += 1;
	 TransType = One;
      end
      else if (TransType==Min || TransType==One || TransType==EzAndSml || TransType==Random) begin
	 Fraction += 1;
	 if (Fraction == `$frac_width`'b0) begin
	    Exponent += 1;
	 end
	 TransType = Random;
	 if ((Fraction == {(`$frac_width`){1'b1}}) && Exponent == {1'b0, {(`$exp_width-2`){1'b1}}, 1'b0}) begin
	    TransType = PointOneOneOne;
	 end
	 if ((Fraction == `$frac_width`'b0) && Exponent == {1'b0, {(`$exp_width-1`){1'b1}}}) begin
	    TransType = One;
	 end
      end // if (TransType==Min || TransType==One || TransType==EzAndSml || TransType==Random)
      Inc = 0;
   endfunction // CalculateInc
   

   // --------------------------------------------------------------------------
   // Some getters:
   // --------------------------------------------------------------------------
   function bit IsPos();
      return Sign == 1'b0;
   endfunction // bit IsPos
   
   function bit IsNeg();
      return Sign == 1'b1;
   endfunction // bit IsPos


   
   // --------------------------------------------------------------------------
   // Constraints for random generation
   // --------------------------------------------------------------------------
   // To make auto generation of special cases easier:
   constraint pick_fraction_val{
      (TransType == Zero) -> 		{ Fraction == `$frac_width`'b0 };
      (TransType == Denorm100) -> 	{ Fraction == {1'b1, `$frac_width-1`'b0} };
      (TransType == DenormFFF) -> 	{ Fraction == {(`$frac_width`){1'b1}} };
      (TransType == Denorm001) -> 	{ Fraction == {`$frac_width-1`'b0, 1'b1} };
      (TransType == DenormRnd) -> 	{ Fraction != `$frac_width`'b0 };
      (TransType == QuietNaN) -> 	{ Fraction[`$frac_width-1`] == 1'b1 };
      (TransType == SignalingNaN) -> 	{ Fraction[`$frac_width-1`] == 1'b0 && Fraction[`$frac_width-2`:0] != `$frac_width-1`'b0 };
      (TransType == Min) -> 		{ Fraction == `$frac_width`'b0 };
      (TransType == Max) -> 		{ Fraction == {(`$frac_width`){1'b1}} };
      (TransType == Inf) -> 		{ Fraction == `$frac_width`'b0 };
      (TransType == One) -> 		{ Fraction == `$frac_width`'b0 };
      (TransType == PointOneOneOne) -> 	{ Fraction == {(`$frac_width`){1'b1}}  };
      (TransType == EzAndSml) ->	{ Fraction inside {[1:10]} };
      (TransType == Random) -> 		{ 1'b1 /* No constraint */ };
   }
     
   constraint pick_exponent_val{
      (TransType == Zero) -> 		{ Exponent == `$exp_width`'b0 };
      (TransType == Denorm100) -> 	{ Exponent == `$exp_width`'b0 };
      (TransType == DenormFFF) -> 	{ Exponent == `$exp_width`'b0 };
      (TransType == Denorm001) -> 	{ Exponent == `$exp_width`'b0 };
      (TransType == DenormRnd) -> 	{ Exponent == `$exp_width`'b0 };
      (TransType == QuietNaN) -> 	{ Exponent == {(`$exp_width`){1'b1}} };
      (TransType == SignalingNaN) -> 	{ Exponent == {(`$exp_width`){1'b1}} };
      (TransType == Min) -> 		{ Exponent == `$exp_width`'b1 };
      (TransType == Max) -> 		{ Exponent == { {(`$exp_width-1`){1'b1}}, 1'b0} };
      (TransType == Inf) -> 		{ Exponent == {(`$exp_width`){1'b1}} };
      (TransType == One) -> 		{ Exponent == {  1'b0, {(`$exp_width-1`){1'b1}}  } };
      (TransType == PointOneOneOne) -> 	{ Exponent == {  1'b0, {(`$exp_width-2`){1'b1}}, 1'b0} } ;
      (TransType == EzAndSml) ->	{ Exponent[`$exp_width-1`] == 1'b1 && Exponent[`$exp_width-2`:2] == `$exp_width-3`'b0 };
      (TransType == Random) -> 		{ Exponent != `$exp_width`'b0 && Exponent != {(`$exp_width`){1'b1}} };
   }
       
   constraint order1 { 
      solve TransType before Fraction, Exponent, Sign, Inc;
   }

   
//;# In Random Mode ONLY:
//; if ($rand_mode =~ /YES/){
   /* The following class members hold the DEFAULT weights 
    * for the various transaction types.
    * However, they may be overwritten by the user at runtime
    * using the "+Zero_w=newWeight" notation */
   static bit 	AllWeightsInitialized = 0;	
   static int 	SignIsPos_w = `$SignIsPos_w`;
   static int 	Inc_w = `$Inc_w`;
   static int 	Zero_w = `$Zero_w`;
   static int 	Denorm100_w = `$Denorm100_w`; 
   static int 	DenormFFF_w = `$DenormFFF_w`; 
   static int 	Denorm001_w = `$Denorm001_w`;
   static int 	DenormRnd_w = `$DenormRnd_w`;
   static int 	QuietNaN_w = `$QuietNaN_w`; 
   static int 	SignalingNaN_w = `$SignalingNaN_w`; 
   static int 	Min_w = `$Min_w`; 
   static int 	Max_w = `$Max_w`; 
   static int 	Inf_w = `$Inf_w`; 
   static int 	One_w = `$One_w`; 
   static int 	PointOneOneOne_w = `$PointOneOneOne_w`;
   static int 	EzAndSml_w =`$EzAndSml_w`;
   static int 	Random_w = `$Random_w`;
   
   // The following are constraints blocks for controling and generating
   // meaningful transactions.
   constraint pick_sign{ 
      Sign dist { 0 := SignIsPos_w, 1 := 100-SignIsPos_w }; 
   }
       
   constraint pick_inc{ 
      Inc dist { 1 := Inc_w, 0 := 100-Inc_w }; 
   }
     
   constraint pick_trans_type{
      TransType dist {Zero := Zero_w, 
		      Denorm100 := Denorm100_w, 
		      DenormFFF := DenormFFF_w, 
		      Denorm001 := Denorm001_w,
		      DenormRnd := DenormRnd_w,
		      QuietNaN := QuietNaN_w, 
		      SignalingNaN := SignalingNaN_w, 
		      Min := Min_w, 
		      Max := Max_w, 
		      Inf := Inf_w, 
		      One := One_w, 
		      PointOneOneOne := PointOneOneOne_w,
		      EzAndSml := EzAndSml_w,
		      Random := Random_w };
   }

     

     // C'tor for a Random transaction
     // The constructor also reads user defined, per simulation, weights
     function new();
	if (! AllWeightsInitialized) begin
	   if ($test$plusargs("SignIsPos_DistWeight`$NamedTransCtrl`")) begin
	      $value$plusargs("SignIsPos_DistWeight`$NamedTransCtrl`=%d",  SignIsPos_w);
	      $display("%t: `mname`: Runtime input +SignIsPos_DistWeight`$NamedTransCtrl`=%d found", $time, SignIsPos_w);
	   end
	   //;   if ($arch =~ /Cascade/){
	   if ($test$plusargs("Inc_DistWeight`$NamedTransCtrl`")) begin
	      $value$plusargs("Inc_DistWeight`$NamedTransCtrl`=%d",  Inc_w);
	      $display("%t: `mname`: Runtime input +Inc_DistWeight`$NamedTransCtrl`=%d found", $time, Inc_w);
	   end
	   //;   }
	   if ($test$plusargs("Zero_DistWeight`$NamedTransCtrl`")) begin
	      $value$plusargs("Zero_DistWeight`$NamedTransCtrl`=%d",  Zero_w);
	      $display("%t: `mname`: Runtime input +Zero_DistWeight`$NamedTransCtrl`=%d found", $time, Zero_w);
	   end
	   //;   if ($test_denormals =~ /NO/){
	   if ($test$plusargs("Denorm100_DistWeight`$NamedTransCtrl`")) begin
	      $value$plusargs("Denorm100_DistWeight`$NamedTransCtrl`=%d",  Denorm100_w);
	      $display("%t: `mname`: Runtime input +Denorm100_DistWeight`$NamedTransCtrl`=%d found", $time, Denorm100_w);
	   end
	   if ($test$plusargs("DenormFFF_DistWeight`$NamedTransCtrl`")) begin
	      $value$plusargs("DenormFFF_DistWeight`$NamedTransCtrl`=%d",  DenormFFF_w);
	      $display("%t: `mname`: Runtime input +DenormFFF_DistWeight`$NamedTransCtrl`=%d found", $time, DenormFFF_w);
	   end
	   if ($test$plusargs("Denorm001_DistWeight`$NamedTransCtrl`")) begin
	      $value$plusargs("Denorm001_DistWeight`$NamedTransCtrl`=%d",  Denorm001_w);
	      $display("%t: `mname`: Runtime input +Denorm001_DistWeight`$NamedTransCtrl`=%d found", $time, Denorm001_w);
	   end
	   if ($test$plusargs("DenormRnd_DistWeight`$NamedTransCtrl`")) begin
	      $value$plusargs("DenormRnd_DistWeight`$NamedTransCtrl`=%d",  DenormRnd_w);
	      $display("%t: `mname`: Runtime input +DenormRnd_DistWeight`$NamedTransCtrl`=%d found", $time, DenormRnd_w);
	   end
	   //;   } # End of "if ($test_denormals..."	   
	   if ($test$plusargs("QuietNaN_DistWeight`$NamedTransCtrl`")) begin
	      $value$plusargs("QuietNaN_DistWeight`$NamedTransCtrl`=%d",  QuietNaN_w);
	      $display("%t: `mname`: Runtime input +QuietNaN_DistWeight`$NamedTransCtrl`=%d found", $time, QuietNaN_w);
	   end
	   if ($test$plusargs("SignalingNaN_DistWeight`$NamedTransCtrl`")) begin
	      $value$plusargs("SignalingNaN_DistWeight`$NamedTransCtrl`=%d",  SignalingNaN_w);
	      $display("%t: `mname`: Runtime input +SignalingNaN_DistWeight`$NamedTransCtrl`=%d found", $time, SignalingNaN_w);
	   end
	   if ($test$plusargs("Min_DistWeight`$NamedTransCtrl`")) begin
	      $value$plusargs("Min_DistWeight`$NamedTransCtrl`=%d",  Min_w);
	      $display("%t: `mname`: Runtime input +Min_DistWeight`$NamedTransCtrl`=%d found", $time, Min_w);
	   end
	   if ($test$plusargs("Max_DistWeight`$NamedTransCtrl`")) begin
	      $value$plusargs("Max_DistWeight`$NamedTransCtrl`=%d",  Max_w);
	      $display("%t: `mname`: Runtime input +Max_DistWeight`$NamedTransCtrl`=%d found", $time, Max_w);
	   end
	   if ($test$plusargs("Inf_DistWeight`$NamedTransCtrl`")) begin
	      $value$plusargs("Inf_DistWeight`$NamedTransCtrl`=%d",  Inf_w);
	      $display("%t: `mname`: Runtime input +Inf_DistWeight`$NamedTransCtrl`=%d found", $time, Inf_w);
	   end
	   if ($test$plusargs("One_DistWeight`$NamedTransCtrl`")) begin
	      $value$plusargs("One_DistWeight`$NamedTransCtrl`=%d",  One_w);
	      $display("%t: `mname`: Runtime input +One_DistWeight`$NamedTransCtrl`=%d found", $time, One_w);
	   end
	   if ($test$plusargs("PointOneOneOne_DistWeight`$NamedTransCtrl`")) begin
	      $value$plusargs("PointOneOneOne_DistWeight`$NamedTransCtrl`=%d",  PointOneOneOne_w);
	      $display("%t: `mname`: Runtime input +PointOneOneOne_DistWeight`$NamedTransCtrl`=%d found", $time, PointOneOneOne_w);
	   end
	   if ($test$plusargs("EzAndSml_DistWeight`$NamedTransCtrl`")) begin
	      $value$plusargs("EzAndSml_DistWeight`$NamedTransCtrl`=%d",  EzAndSml_w);
	      $display("%t: `mname`: Runtime input +EzAndSml_DistWeight`$NamedTransCtrl`=%d found", $time, EzAndSml_w);
	   end
	   if ($test$plusargs("Random_DistWeight`$NamedTransCtrl`")) begin
	      $value$plusargs("Random_DistWeight`$NamedTransCtrl`=%d",  Random_w);
	      $display("%t: `mname`: Runtime input +Random_DistWeight`$NamedTransCtrl`=%d found", $time, Random_w);
	   end
	end // if (! AllWeightsInitialized)
     endfunction // new
//; } # End of "if ($rand_mode =~ /YES/)..."
endclass : `mname`

