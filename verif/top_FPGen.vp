/* *****************************************************************************
 * Description:
 * Top module for simulation, used for simple FMA module testing. Should not
 * be mistaken as a full fledged verification environment. It's not!
 * 
 * 
 * 
 * Change bar:
 * -----------
 * Date          Author    Description
 * Feb 04, 2012  jingpu    init version - change original top module to FMA verif
 * ****************************************************************************/

/*******************************************************************************
 * PARAMETERIZATION
 * ****************************************************************************/
//; my $verif_mode = parameter(Name=>'VERIF_MODE',
//;                            Val=>'OFF', List=>['ON','OFF'],
//;                            Doc=>"Verification mode determines whether or not ".
//;                                 "monitors and drivers are on. Possible values ".
//;                                 "are ON or Off." ); 
//; my $synth_mode = parameter(Name=>'SYNTH_MODE',
//;                            Val=>'ON', List=>['ON','OFF'],
//;                            Doc=>"Synthesis mode determines whether or not ".
//;                                 "special synthesis constructs are used. ".
//;                                 "Possible values are ON or Off.");
//;  

module `mname` ();   
   //; # Generate the DUT here and get the pipeline depth
   //; my $FP_obj               = generate_base('FPGen', 'FPGen');
   //; my $pipeline_depth       = $FP_obj->get_param('PipelineDepth');
   //; my $mul_pipeline_depth   = $FP_obj->get_param('MulPipelineDepth') ;
   //; my $add_pipeline_depth   = $FP_obj->get_param('AddPipelineDepth');
   //; my $frac_width           = $FP_obj->get_param('FractionWidth');
   //; my $exp_width            = $FP_obj->get_param('ExponentWidth');
   //; my $enable_forwarding    = $FP_obj->get_param('EnableForwarding');
   //; my $enable_denormals     = $FP_obj->get_param('EnableDenormals');
   //; my $interface_name       = $FP_obj->get_param('InterfaceName');
   //; my $product_width        = 2 * $frac_width + 2;

   //; my $FPGen_ifc = generate('FPGen_ifc', 'FPGen_ifc',
   //;                          FractionWidth => $frac_width, ExponentWidth => $exp_width,
   //;                         EnableForwarding=> $enable_forwarding, PipelineDepth =>$pipeline_depth,
   //;                         MulPipelineDepth=>$mul_pipeline_depth);


// ##############################################################
// ### Local Signals to Stitch the Bench to the DUT
// ##############################################################
   
// ##### GLOBALS ######
          logic 				     clk; 
          logic 				     reset;
          `$interface_name` FPGen_ifc();

// #######################################################################
// ### A Clock and Reset Generator
// #######################################################################
//; my $clocker_obj = generate('clocker' , 'clocker', CLK_PERIOD=>1000, RST_PERIOD=>20);
   `$clocker_obj->instantiate()` ( .clk(clk), .reset(reset) );
      
// #######################################################################
// ### Instantiate Floating Point Multiply Add Unit as DEVICE UNDER TEST
// #######################################################################  
   `$FP_obj->instantiate()` ( .clk(clk), .reset(reset), .FPGen_bus(FPGen_ifc.FPU) );



   
// #######################################################################
// ### Begin Verification Framework
// #######################################################################   
   // ------------------------ VERIFICATION HARNES ---------------------------//
   // Instantiate the TestGenerator here:
   //; my $TestBench_obj = generate('TestBench_FPGen', 'TestBench', DUT=>$FP_obj);
   `$TestBench_obj->instantiate` ( .clk(clk), .reset(reset), .FPGen_bus(FPGen_ifc.Controller) );
endmodule : `mname`
