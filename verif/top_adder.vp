/* *****************************************************************************
 * Description:
 * Top module for simulation, used for simple FMA module testing. Should not
 * be mistaken as a full fledged verification environment. It's not!
 * 
 * 
 * 
 * Change bar:
 * -----------
 * Date          Author    Description
 * Feb 04, 2012  jingpu    init version - change original top module to FMA verif
 * ****************************************************************************/

/*******************************************************************************
 * PARAMETERIZATION
 * ****************************************************************************/
//; my $verif_mode = parameter(Name=>'VERIF_MODE',
//;                            Val=>'ON', List=>['ON','OFF'],
//;                            Doc=>"Verification mode determines whether or not ".
//;                                 "monitors and drivers are on. Possible values ".
//;                                 "are ON or Off." ); 
//; my $synth_mode = parameter(Name=>'SYNTH_MODE',
//;                            Val=>'OFF', List=>['ON','OFF'],
//;                            Doc=>"Synthesis mode determines whether or not ".
//;                                 "special synthesis constructs are used. ".
//;                                 "Possible values are ON or Off.");
//; #my $desinware_mode = parameter(Name=>'Designware_MODE',
//; #                           Val=>'OFF', List=>['ON','OFF'],
//; #                           Doc=>"Designware mode determines whether or not ".
//; #                                "designware codes are used instead of our ".
//; #                                "design.");


module `mname` ();   
   //; # Generate the DUT here
   //; my $Inst_obj = generate('adder', 'adder');

   //; # Read what kind of DUT the user wanted so you can test it
   //; my $BW = $Inst_obj->get_param('BitWidth');
  
   // local signals for  
   logic [`$BW-1`:0] a, b, s;
   logic co , ci ;
   
						  
   //; if ($verif_mode =~ /ON/){
   logic 				      dumptolog;
   //; }
   
   // Instantiate the dut here
   `$Inst_obj->instantiate()` ( .a(a), .b(b), .ci(ci), .s(s) , .co(co) );

   
endmodule : `mname`
