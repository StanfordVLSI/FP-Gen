/*************************************************************************
 ** From Perforce:
 **
 ** $Id: //Smart_design/ChipGen/FP-Gen/verif/top.vp#14 $
 ** $DateTime: 2012/03/05 19:02:57 $
 ** $Change: 10233 $
 ** $Author: jingpu $
 *************************************************************************/

/* *****************************************************************************
 * Description:
 * Top module for simulation, used for simple module testing. Should not
 * be mistaken as a full fledged verification environment. It's not!
 * 
 * 
 * 
 * Change bar:
 * -----------
 * Date          Author    Description
 * Oct 03, 2011  shacham   init version - ported my wallace env
 * Jul 11, 2012  jingpu    add an external clk/rst generator
 * ****************************************************************************/

/*******************************************************************************
 * PARAMETERIZATION
 * ****************************************************************************/
//; my $verif_mode = parameter(Name=>'VERIF_MODE',
//;                            Val=>'ON', List=>['ON','OFF'],
//;                            Doc=>"Verification mode determines whether or not ".
//;                                 "monitors and drivers are on. Possible values ".
//;                                 "are ON or Off.  !IGNORE!" ); 
//; my $synth_mode = parameter(Name=>'SYNTH_MODE',
//;                            Val=>'OFF', List=>['ON','OFF'],
//;                            Doc=>"Synthesis mode determines whether or not ".
//;                                 "special synthesis constructs are used. ".
//;                                 "Possible values are ON or Off. !IGNORE! ");

module `mname` ();   
   //; # Generate the DUT here
   //; my $FP_obj = generate('FPMult', 'FPMult');

   //; # Read what kind of DUT the user wanted so you can test it
   //; my $frac_width = $FP_obj->get_param('FractionWidth');
   //; my $exp_width = $FP_obj->get_param('ExponentWidth');
   //; my $enable_denormals = $FP_obj->get_param('EnableDenormals');
   //; my $pipeline_depth = $FP_obj->get_param('PipelineDepth');
   //; my $enable_forwarding = $FP_obj->get_param('EnableForwarding');
   //; my $product_width = 2 * $frac_width + 2;
   //; my $input_width = $frac_width + $exp_width +1;


   // ##############################################################
   // ### Local Signals to Stitch the Bench to the DUT
   // ##############################################################


   //; if ($verif_mode =~ /ON/){
   // ##### Verification Signals #####		       
   logic 				     dumptolog;
   //; }
   
   // ##### DUT INPUTS ######
   logic [`$frac_width + $exp_width`:0]      a, b;
   
   //; if ($enable_forwarding =~ /YES/){ 
   // ##### Inputs For Forwarding #####
   logic 				      forward_a;
   logic 				      forward_b;
   //; }
   
   // ##### Outputs ##### 
   logic [`$exp_width + 1`:0] 		      ExpAB;
   logic [`$product_width - 1`: 0] 	      ManAB; //entire mantissa, not just fraction
   logic 				      SignAB, NANAB, InfAB, ZeroAB;


   // ##### GLOBALS ######
   logic 				      clk; 
   logic 				      reset;
   	
   //; if ($pipeline_depth>0){
   // ##### Controls and Outputs for Piped Design #####
   logic 				      stall_in;
   logic 				      valid_in;
   logic 				      valid_out;
   logic 				      stall_request;
   //; }

   // #######################################################################
   // ### A Clock and Reset Generator
   // #######################################################################
   //; my $clocker_obj = generate('clocker' , 'clocker', CLK_PERIOD=>1000, RST_PERIOD=>20);
   `$clocker_obj->instantiate()` (.clk(clk), .reset(reset));
   
   // #######################################################################
   // ### Instantiate Floating Point Multiply Add Unit as DEVICE UNDER TEST
   // #######################################################################
   
   `$FP_obj->instantiate()` (
			     //; if ($verif_mode =~ /ON/){
			     // ##### Verification Signals #####
			     .dumptolog(dumptolog),
			     //; }
			     
			     // ###### Inputs ######
			     .a_in(a), 
			     .b_in(b),
			     
                             //; if ($enable_forwarding =~ /YES/){
			     // ##### Inputs For Forwarding #####
                             .forward_a(forward_a), 
			     .forward_b(forward_b),
			     // Set to be zero since we are not verifying 
			     // the function of the following ports
			     .ExpZ(`$exp_width`'b0),
			     .ManZ(`$frac_width+1`'b0),
			     .SignZ(1'b0), .InfZ(1'b0), .NANZ(1'b0), .ZeroZ(1'b0), .IncZ(1'b0),
                             //; }
			     
   			     //; if ($pipeline_depth>0){
			     // ##### Controls for Piped Design #####
                             .clk(clk), 
			     .reset(reset), 
			     .valid_in(valid_in), 
			     .stall_in(stall_in),			  
			     
			     // ##### Outputs for Piped Design #####
			     .valid_out(valid_out), 
			     .stall_request(stall_request),
                             //; }
			     
			     // ###### OUTPUTS ###### 
			     .SignAB_out(SignAB), .ExpAB_out(ExpAB), .ManAB_out(ManAB),
			     .NANAB_out(NANAB), 
			     .InfAB_out(InfAB), 
			     .ZeroAB_out(ZeroAB)
			     );

   
   //; if ($verif_mode =~ /ON/){
   // #######################################################################
   // ### Begin Verification Framework
   // #######################################################################  
   // ------------------------ VERIFICATION HARNES ---------------------------//
   // Instantiate the TestGenerator here:
   //; my $TestBench_obj = generate('TestBench_FPMult', 'TestBench', DUT=>$FP_obj);
   `$TestBench_obj->instantiate` (
				  // outputs:
				  .dumptolog(dumptolog),
				  .a(a), .b(b),
 
				  //; if ($enable_forwarding =~ /YES/){
				  .forward_a(forward_a), .forward_b(forward_b),
				  //; }
				  
				  .clk(clk), .reset(reset),
   			     	  //; if ($pipeline_depth>0){
                             	  .valid_in(valid_in), .stall_in(stall_in),
                                  .valid_out(valid_out), .stall_request(stall_request),
   		            	  //; }
				  
				  // inputs
				  .SignRes(SignAB), .ExpRes(ExpAB), .ManRes(ManAB),
				  .NaNRes(NANAB), .InfRes(InfAB), .ZeroRes(ZeroAB) 
				  );
   //; } # End of "if ($verif_mode..."
   
endmodule : `mname`
