/*************************************************************************
 ** From Perforce:
 **
 ** $Id$
 ** $DateTime$
 ** $Change$
 ** $Author$
 *************************************************************************/

/* *****************************************************************************
 * Description:
 * Top module for simulation, used for simple module testing. Should not
 * be mistaken as a full fledged verification environment. It's not!
 * 
 * 
 * 
 * Change bar:
 * -----------
 * Date          Author    Description
 * Oct 03, 2011  shacham   init version - ported my wallace env
 * ****************************************************************************/

/*******************************************************************************
 * PARAMETERIZATION
 * ****************************************************************************/
//; my $verif_mode = parameter(Name=>'VERIF_MODE',
//;                            Val=>'ON', List=>['ON','OFF'],
//;                            Doc=>"Verification mode determines whether or not ".
//;                                 "monitors and drivers are on. Possible values ".
//;                                 "are ON or Off." ); 
//; my $synth_mode = parameter(Name=>'SYNTH_MODE',
//;                            Val=>'OFF', List=>['ON','OFF'],
//;                            Doc=>"Synthesis mode determines whether or not ".
//;                                 "special synthesis constructs are used. ".
//;                                 "Possible values are ON or Off.");

module `mname` ();   
   //; # Generate the DUT here
   //; my $FP_obj = generate('CascadeFPMult', 'CascadeFPMult_u');

   //; # Read what kind of DUT the user wanted so you can test it
   //; my $sig_width = $FP_obj->get_param('SignalWidth');
   //; my $exp_width = $FP_obj->get_param('ExponentWidth');
   //; my $enable_denormals = $FP_obj->get_param('EnableDenormals');
   //; my $product_width = 2 * $sig_width + 2;
  
   // local signals for driving inputs
   logic [`$sig_width - 1`:0] 		      SigA, SigB, SigC;
   logic [`$exp_width - 1`:0] 		      ExpA, ExpB, ExpC;
   logic 				      SignA, SignB, SignC;
   logic 				      IncA, IncB;

   
   // local signals for observing outputs
   logic [`$exp_width + 1`:0] 		      ExpAB;
   logic [`$product_width - 1`: 0] 	      ManAB;
   logic 				      SignAB, ANAB, InfAB, ZeroAB, RStickyAB;
  
   //; if ($verif_mode =~ /ON/){
   logic 				      dumptolog;
   //; }
   
   // Instantiate the dut here
   `$FP_obj->instantiate()` (
			     // inputs:
			     //; if ($verif_mode =~ /ON/){
			     .dumptolog(dumptolog),
			     //; }
			     .A({SignA, ExpA, SigA}), .B({SignB, ExpB, SigB}), .IncA(IncA), .IncB(IncB),
			     //outputs:
			     .SignAB(SignAB), .ExpAB(ExpAB), .ManAB(ManAB),
			     .NANAB(NANAB), .InfAB(InfAB), .ZeroAB(ZeroAB), .RStickyAB(RStickyAB) 
			     );


   //; if ($verif_mode =~ /ON/){
   // ------------------------ VERIFICATION HARNES ---------------------------//
   // Instantiate the TestGenerator here:
   //; my $TestBench_obj = generate('TestBench', 'TestBench', 
   //;                              SignalWidth=>$sig_width, 
   //;                              ExponentWidth=>$exp_width, 
   //;                              TestDenormals=>$enable_denormals);
   `$TestBench_obj->instantiate` (
				// outputs:
				.dumptolog(dumptolog),
				.SignA(SignA), .ExpA(ExpA), .SigA(SigA), 
				.SignB(SignB), .ExpB(ExpB), .SigB(SigB), 
				.SignC(SignC), .ExpC(ExpC), .SigC(SigC)
				// inputs
				//.SignAB(SignAB), .ExpAB(ExpAB), .ManAB(ManAB),
				//.NANAB(NANAB), .InfAB(InfAB), .ZeroAB(ZeroAB), .RStickyAB(RStickyAB) 
				);
   //; } # End of "if ($verif_mode..."
   
endmodule : `mname`
