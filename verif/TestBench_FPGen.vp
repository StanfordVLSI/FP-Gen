/* *****************************************************************************
 * Description:
 * -----------
 * TestBench for FMA
 * 
 * Runtime Arguments 
 * -----------------
 * (Via the "make run RUN=+<runtime_flag[=value]>" notation)
 * * +Wave, +WaveDelay=N, +Seed=N, +NumTrans=N, +SAIF
 * 
 * Parameters:
 * -----------
 * * DUT -- pointer to the design under test object 
 * * NumTrans, Seed
 * 
 * 
 * Change bar:
 * -----------
 * Date          Author    Description
 * Oct 05, 2011  shacham   init version - test generator for FP Mult-Acc
 * 
 * ****************************************************************************/

/*******************************************************************************
 * PARAMETERIZATION
 * ****************************************************************************/
//; my $FP_obj = parameter(Name=>'DUT', Val=>undef, Doc=>"Pointer to the design under test object");
//; $self->error("Missing pointer to DUT") unless $FP_obj;
//;
//; # Extract some data from the design
//; my $frac_width           = $FP_obj->get_param('FractionWidth');
//; my $exp_width            = $FP_obj->get_param('ExponentWidth');
//; my $enable_forwarding    = $FP_obj->get_param('EnableForwarding');
//; my $pipeline_depth       = $FP_obj->get_param('PipelineDepth');
//; my $test_denormals       = $FP_obj->get_param('EnableDenormals');
//; my $mul_pipeline_depth   = $FP_obj->get_param('MulPipelineDepth') ;
//; my $forward_cycle        = $FP_obj->get_param('ForwardCycle');
//;
//; my $vector_file = parameter(Name=>'TestVectorFile', Val=>'',
//;                             Doc=>"Name of the input testvector file");
//; my $num_trans = parameter(Name=>'NumTrans',Val=>10, Min=>1, Step=>1,
//;                           Doc=>"Number of test transactions to run ".
//;                                "(can be overriden at runtime using the '+NumTrans=value' command line notation)");
//; my $seed = parameter(Name=>'Seed',Val=>12345, Min=>0, Step=>1,
//;                      Doc=>"Seed for random values".
//;                      "(can AND SHOULD be overriden at runtime using the '+Seed=value' command line notation)");
//;
//; # local variables
//; my $forward_cycle_a = $forward_cycle;
//; my $forward_cycle_b = $forward_cycle;
//; my $forward_cycle_c = $forward_cycle;
//;                                 
//; my $product_width = 2 * $frac_width + 2; # (leading one + frac_w) *2;
//; my $fp_width = $frac_width + $exp_width + 1;
//;
//; my $FPGen_ifc = generate('FPGen_ifc', 'FPGen_ifc', FractionWidth => $frac_width,
//;                         ExponentWidth => $exp_width, EnableForwarding=> $enable_forwarding, PipelineDepth =>$pipeline_depth,
//;                         MulPipelineDepth=>$mul_pipeline_depth);


program automatic `mname` (input logic 				       clk, reset,
			   `$FPGen_ifc->mname`.Controller FPGen_bus
			   );

   // Local variables and handles for controlling the simulation
   int 								       seed=`$seed`;
   int 								       num_trans = `$num_trans`;
   int 								       dummy;
   string 							       vector_file = "`$vector_file`";
   int 								       verb = 1;
   int 								       result_tag;
   int 								       ignore_errors=0;
   
   
   


   // Local variables and macros for controlling the input file and local memory
   parameter MEM_SIZE = 1000000;
   parameter MEM_WIDTH = 4+`$fp_width*4`+4+4+4+4+4;

   // Signals for the input testvector verification
   logic [MEM_WIDTH-1:0] 					       Memory [0:MEM_SIZE-1];  // Space for input file
   logic [MEM_WIDTH-1:0] 					       Temp, Temp_q[$], r_Temp;  // Verilog doesn't allow direct access to a

   
   // Singals for read the queues
   logic [`$exp_width + $frac_width`:0] 			       r_a, r_b, r_c;
   logic [`$exp_width + $frac_width`:0] 			       expected, expectedZ;
   logic [2:0] 							       r_rnd;
   
   // queues for storing numbers inside the pipeline
   logic [`$exp_width + $frac_width`:0] 			       a_q[$], b_q[$], c_q[$];
   logic [`$exp_width + $frac_width`:0] 			       expected_q[$];
   

   //; my $FPGenControl_obj;
   //; if ($pipeline_depth>0){
   //;   $FPGenControl_obj = generate('FPGenControl','FPControl');
   `$FPGenControl_obj->instantiate`;
   
   //; }

   logic stall_requested;
   //; if ($pipeline_depth==0){
   assign stall_requested = 1'b0; // cheat here for
   //; } else {
   assign stall_requested = FPGen_bus.stall_request;
   //; }
   
   // FP transaction handles
   //; my $TransGenA_obj = generate('FPTransaction','TransGenA',
   //;				    Random=>'YES',
   //;                              FractionWidth=>$frac_width, 
   //;                              ExponentWidth=>$exp_width,
   //;                              TestDenormals=>$test_denormals);
   `$TransGenA_obj->instantiate`;
   //; my $TransGenB_obj = generate('FPTransaction','TransGenB',
   //;				    Random=>'YES',
   //;                              FractionWidth=>$frac_width, 
   //;                              ExponentWidth=>$exp_width, 
   //;                              TestDenormals=>$test_denormals);
   `$TransGenB_obj->instantiate`;
   //; my $TransGenC_obj = generate('FPTransaction','TransGenC',
   //;				    Random=>'YES',
   //;                              FractionWidth=>$frac_width, 
   //;                              ExponentWidth=>$exp_width, 
   //;                              TestDenormals=>$test_denormals);
   `$TransGenC_obj->instantiate`;   
   //; my $TransExpected_obj = generate('FPTransaction','TransExpected',
   //;				    Random=>'NO',
   //;                              FractionWidth=>$frac_width, 
   //;                              ExponentWidth=>$exp_width,   
   //;                              TestDenormals=>$test_denormals);
   `$TransExpected_obj->instantiate`;

   // one more handle for the observed output
   //; my $TransRes_obj = generate('FPTransaction','TransRes',
   //;				    Random=>'NO',
   //;                              FractionWidth=>$frac_width, 
   //;                              ExponentWidth=>$exp_width,   
   //;                              TestDenormals=>$test_denormals);
   `$TransRes_obj->instantiate`;

   
   // Reference model
   //; my $GoldRef_obj = generate('GoldFMA', 'GoldRef', 
   //;                              FPTransA_Ptr=>$TransGenA_obj, 
   //;                              FPTransB_Ptr=>$TransGenB_obj,
   //;                              FPTransC_Ptr=>$TransGenC_obj,
   //;                              FPTransRes_Ptr=>$TransRes_obj,
   //;                              TestDenormals=>$test_denormals);
   `$GoldRef_obj->instantiate`;


   //; my $forward_A;
   //; my $forward_B;
   //; my $forward_C;
   //; if ($enable_forwarding eq 'YES'){
   // Random model for forwarding signal
   //; $forward_A = generate('forward', 'ForwardA', Width=>1);
   `$forward_A->instantiate()`;
   //; $forward_B = generate('forward', 'ForwardB', Width=>1);
   `$forward_B->instantiate()`; 
   //; $forward_C = generate('forward', 'ForwardC', Width=>$mul_pipeline_depth+1);
   `$forward_C->instantiate()`;
   logic							       forward_a_q[$], forward_b_q[$];
   logic [`$mul_pipeline_depth`:0] 				       forward_c_q[$];
   
   //; }
   

   //-------------------------------------------------------------------------//
   // MAIN: Main flow of test
   //-------------------------------------------------------------------------//
   initial begin
      get_command_line_args();
      start_up_testbench();

      // Fork the driver and monitor to do their thing
      fork
	 start_saif();
	 drive_dut();
	 monitor_dut();
      join
      
      // if we reached this point safely, the test passed!
      repeat (10) @(negedge clk); // give the lines some time to settle
      $display("%t: TESTBENCH IS DONE -- \033[0;32mTEST PASS\033[0m", $time);
      result_tag = $fopen("TEST_PASS","w");
      $fclose(result_tag);
      
      finish_saif();
      $finish(0);
   end
   

   
   //-------------------------------------------------------------------------//
   // start_up_testbench: Task to reset all DUT signals and testbench objects
   //-------------------------------------------------------------------------//
   task start_up_testbench;
      $display("%t: TESTBENCH IS ALIVE -- STARTING INITIALIZATION...",$time);
      // some simulation control initialization
      dummy = $urandom(seed);
      TransGenA = new();
      TransGenB = new();
      TransGenC = new();
      TransExpected = new();
      TransRes = new();
      GoldRef = new();
      //; if ($enable_forwarding eq 'YES'){
      `$forward_A->iname()` = new();
      `$forward_B->iname()` = new();
      `$forward_C->iname()` = new();
      //; }
      $display("%t: TESTBENCH IS ALIVE (SEED=%d) -- NOW RUNNING %d TESTS...", $time, seed, num_trans);
      // some simulation wire values initialization
      //FPGen_bus.dumptolog = 1'b0;
      //; if ($pipeline_depth>0){
      FPGen_bus.valid_in = 1'b0;
      FPGen_bus.stall_in = 1'b0;
      FPGen_bus.adder_mode = 1'b0;
      FPGen_bus.multiplier_mode = 1'b0;
      `$FPGenControl_obj->iname()` = new();
      //; }
      FPGen_bus.a = 0;
      FPGen_bus.b = 0;
      FPGen_bus.c = 0;
      FPGen_bus.rnd = 3'b000;
      //; if ($enable_forwarding eq 'YES'){
      FPGen_bus.forward_a = 1'b0;
      FPGen_bus.forward_b = 1'b0;
      FPGen_bus.forward_c = 0;
      //; }
   endtask // start_up_testbench
   

   //-------------------------------------------------------------------------//
   // Driver: every cycle, on the neg edge generate stimulus	
   //-------------------------------------------------------------------------//
   task drive_dut;
      int loc;
      @(negedge reset);
      @(negedge clk);
      #1;
      
      if (vector_file == "") begin   // if there is no input test file, then use our own transaction and gold model
	 int i=0;
	 while (i<num_trans) begin
	    if(!stall_requested) begin
               //; if ($pipeline_depth>0){
	       FPGen_bus.valid_in = 1'b1;
               `$FPGenControl_obj->iname()`.randomize();
               FPGen_bus.adder_mode = `$FPGenControl_obj->iname()`.adder_mode;
               FPGen_bus.multiplier_mode = `$FPGenControl_obj->iname()`.multiplier_mode;
               //; }
	       i++;
	       // Assign values to the lines
	       //FPGen_bus.dumptolog = 1'b0;
	       //; if ($enable_forwarding eq 'YES'){
	       `$forward_A->iname()`.randomize();
	       `$forward_B->iname()`.randomize();
	       `$forward_C->iname()`.randomize();
	       
	       if ( `$forward_A->iname()`.forward
		    // check the if there is result in pipeline for forwarding
		    && i > `$forward_cycle_a` ) begin
		  FPGen_bus.forward_a = 1'b1;
                //; if ($forward_cycle_a==$pipeline_depth){   
		  TransGenA.ForceFPNum( expectedZ);
                //; } else {
		  TransGenA.ForceFPNum( expected_q[`$pipeline_depth-$forward_cycle_a-1`]);
                //; }
	       end 
	       else  begin
		  FPGen_bus.forward_a = 1'b0;
		  TransGenA.randomize();
	       end // else: !if( `$forward_A->iname()`.forward...
	       // store the forward_a signal in the queue
	       forward_a_q = {forward_a_q, FPGen_bus.forward_a};

               if (FPGen_bus.adder_mode) begin
                  FPGen_bus.forward_b = 1'b0;
                  TransGenB.ForceFPNum({ 2'b0, {(`$exp_width-1`){1'b1}}, `$frac_width`'b0 });
               end	       
	       else if ( `$forward_B->iname()`.forward
		    // check the if there is result in pipeline for forwarding
		    && i > `$forward_cycle_b` ) begin
		  FPGen_bus.forward_b = 1'b1;
                //; if ($forward_cycle_b==$pipeline_depth){   
		  TransGenB.ForceFPNum( expectedZ);
                //; } else {
		  TransGenB.ForceFPNum( expected_q[`$pipeline_depth-$forward_cycle_b-1`]);
                //; }
	       end 
	       else  begin
		  FPGen_bus.forward_b = 1'b0;
		  TransGenB.randomize();
	       end // else: !if( `$forward_B->iname()`.forward...
	       // store the forward_b signal in the queue
	       forward_b_q = {forward_b_q, FPGen_bus.forward_b};

               if (FPGen_bus.multiplier_mode) begin
                  FPGen_bus.forward_c = 1'b0;
                  TransGenC.ForceFPNum(0);	
               end	       
	       if ( (|`$forward_C->iname()`.forward)
		    // check the if there is result in pipeline for forwarding
		    && i > `$forward_cycle_c` ) begin
		  FPGen_bus.forward_c = `$forward_C->iname()`.forward;
                  if (`$pipeline_depth-$forward_cycle_c-1`+`$forward_C->iname()`.hotbit < 0)
                    TransGenC.ForceFPNum(expectedZ);
                  else
		    TransGenC.ForceFPNum(expected_q[`$pipeline_depth-$forward_cycle_c-1`+`$forward_C->iname()`.hotbit]);
	       end 
	       else  begin
		  FPGen_bus.forward_c = 0;
		  TransGenC.randomize();
	       end // else: !if( `$forward_C->iname()`.forward...
	       // store the forward_a signal in the queue
	       forward_c_q = {forward_c_q, FPGen_bus.forward_c};
	       //; } else {
	       TransGenA.randomize();
	       FPGen_bus.a = TransGenA.GetFPNum();	       
	          //; if ($pipeline_depth>0){
               if (FPGen_bus.adder_mode)
                    TransGenB.ForceFPNum({ 2'b0, {(`$exp_width-1`){1'b1}}, `$frac_width`'b0 });
               else 
		 TransGenB.randomize();	
	       if (FPGen_bus.multiplier_mode)
                    TransGenC.ForceFPNum(0);
               else TransGenC.randomize();
	          //; } else {
	       TransGenB.randomize();	
	       TransGenC.randomize();
	          //; }
	       //;}
               FPGen_bus.a = TransGenA.GetFPNum();
               FPGen_bus.b = TransGenB.GetFPNum();	
	       FPGen_bus.c = TransGenC.GetFPNum();
	       // calculate the expected result
	       GoldRef.CalcGold(TransGenA, TransGenB, TransGenC, FPGen_bus.rnd);
	       expected = GoldRef.Expected.GetFPNum();
	       // store all the numbers in queques
	       a_q = {a_q, FPGen_bus.a};
	       b_q = {b_q, FPGen_bus.b};
	       c_q = {c_q, FPGen_bus.c};
	       expected_q = {expected_q, expected};
	    end
	    @(negedge clk);#1;		// wait a clock cycle
    	 end // for (int i=0; i<num_trans; i++)
      end // if (vector_file == "")
      else begin // use the input test file
	 $readmemh (vector_file, Memory);
	 loc=0;
	 Temp = Memory[loc];
	 Temp_q = {Temp_q, Temp};
	 while((loc < MEM_SIZE) && !(Temp == 1'bx) ) begin	    
	    if(!stall_requested) begin
               //; if ($pipeline_depth>0){
	       FPGen_bus.valid_in = 1'b1;
               FPGen_bus.adder_mode = 1'b0;
               FPGen_bus.multiplier_mode = 1'b0;
               //; }
	       FPGen_bus.rnd = Temp[`$fp_width*4+20+1`:`$fp_width*4+20`];
	       FPGen_bus.a = Temp[`$fp_width*4+20-1`:`$fp_width*3+20`];
	       FPGen_bus.b = Temp[`$fp_width*3+20-1`:`$fp_width*2+20`];
	       FPGen_bus.c = Temp[`$fp_width*2+20-1`:`$fp_width  +20`];	    
	       loc = loc + 1;
	       Temp = Memory[loc];
	       Temp_q = {Temp_q, Temp};
	    end
	    @(negedge clk); #1;		// wait a clock cycle
	 end // while (loc <MEM_SIZE && MemTemp !== 1b'x )
      end // else: !if(vector_file == "")
   endtask // drive_dut
   
   
   
   //-------------------------------------------------------------------------//
   // Monitor: every clk*$pipeline_depth+clk*k, check results	
   //-------------------------------------------------------------------------//
   task monitor_dut;
      @(negedge reset);
      @(negedge clk);
      repeat(`$pipeline_depth`) begin
	 @(negedge clk);
	 // while stall_requested is enable, wait another cycle
	 while(stall_requested) @(negedge clk);
      end
      
      // @(negedge clk); 

      if (vector_file == "") begin   // if there is no input test file, then use our own transaction and gold model
	 int i=0;
	 while (i<num_trans) begin
	    if(!stall_requested) begin
	       i++;
	       if (verb) begin
		  $display("\n%t: Transaction #%0d: ", $time, i);
	       end
	       
	       // set the input numbers and dequeque
	       r_a = a_q[0];
	       r_b = b_q[0];
	       r_c = c_q[0];
	       expectedZ = expected_q[0];
	       a_q = a_q[1:$];
	       b_q = b_q[1:$];
	       c_q = c_q[1:$];
	       expected_q = expected_q[1:$];
	       // restore FP models
	       TransRes.ForceFPNum(FPGen_bus.z);
	       TransGenA.ForceFPNum(r_a);
	       TransGenB.ForceFPNum(r_b);
	       TransGenC.ForceFPNum(r_c);
	       TransExpected.ForceFPNum(expectedZ);
	     
	       //; if ($enable_forwarding eq 'YES'){
	       // Print the forwarding information
	       if(verb) begin
		  if ( forward_a_q[0] )
		    $display("%t A is forwarded from Transaction #%0d", $time, i-`$forward_cycle_a`);
		  if ( forward_b_q[0] )
		    $display("%t B is forwarded from Transaction #%0d", $time, i-`$forward_cycle_b`);
		  if ( |forward_c_q[0] ) begin
		     // find the hotbit in forward_c_q[0]
		     int hotbit;
		     for (int k=0; k<=`$mul_pipeline_depth`; k++) begin
			if (forward_c_q[0][k]) begin
			   hotbit=k;
			end
		     end
		     $display("%t C is forwarded from Transaction #%0d", $time, i-`$forward_cycle_c`+hotbit);
		  end
	       end
	       // dequeque
	       forward_a_q = forward_a_q[1:$];
	       forward_b_q = forward_b_q[1:$];
	       forward_c_q = forward_c_q[1:$];
	       //; }
	       
	       // now check results...
	       if ( !ignore_errors   &&  !GoldRef.CheckMultResult(TransRes, TransExpected) ) begin
		  //FPGen_bus.dumptolog = 1'b1;
		  #1;	      
		  // Print some transaction information
		  $display( "%t: SENT:   TypeA=%s SignA=%b ExpA=0x%h FracA=0x%h", $time,
			    TransGenA.TransType.name(), TransGenA.Sign, TransGenA.Exponent, TransGenA.Fraction);
		  $display( "%t:         TypeB=%s SignB=%b ExpB=0x%h FracB=0x%h", $time,
			    TransGenB.TransType.name(), TransGenB.Sign, TransGenB.Exponent, TransGenB.Fraction);
		  $display( "%t:         TypeC=%s SignC=%b ExpC=0x%h FracC=0x%h", $time,
			    TransGenC.TransType.name(), TransGenC.Sign, TransGenC.Exponent, TransGenC.Fraction);  
		  $display( "%t: EXPECTED: Type=%s Sign=%1b Exp=0x%h Frac=0x%h", $time,
			    TransExpected.TransType.name(), TransExpected.Sign, TransExpected.Exponent, TransExpected.Fraction);
		  $display( "%t: FOUND:   Type=%s Sign=%b Exp=0x%h Frac=0x%h", $time,
			    TransRes.TransType.name(), TransRes.Sign, TransRes.Exponent, TransRes.Fraction);
		  $display("%t: %hx%h+%h = %h (%h) WRONG", $time, r_a, r_b, r_c, FPGen_bus.z, expectedZ);
		  $display("%t: \033[0;31mERROR Found\033[0m", $time);
		  result_tag = $fopen("TEST_FAIL","w");
		  $fclose(result_tag);
                  @(negedge clk); #1;		// wait a clock cycle
		  $finish(2);
	       end
	       else begin
		  // Print some transaction information
		  if (verb) begin
		  $display( "%t: SENT:   TypeA=%s SignA=%b ExpA=0x%h FracA=0x%h", $time,
			    TransGenA.TransType.name(), TransGenA.Sign, TransGenA.Exponent, TransGenA.Fraction);
		  $display( "%t:         TypeB=%s SignB=%b ExpB=0x%h FracB=0x%h", $time,
			    TransGenB.TransType.name(), TransGenB.Sign, TransGenB.Exponent, TransGenB.Fraction);
		  $display( "%t:         TypeC=%s SignC=%b ExpC=0x%h FracC=0x%h", $time,
			    TransGenC.TransType.name(), TransGenC.Sign, TransGenC.Exponent, TransGenC.Fraction);  
		  $display( "%t: EXPECTED: Type=%s Sign=%1b Exp=0x%h Frac=0x%h", $time,
			    TransExpected.TransType.name(), TransExpected.Sign, TransExpected.Exponent, TransExpected.Fraction);
		  $display( "%t: FOUND:   Type=%s Sign=%b Exp=0x%h Frac=0x%h", $time,
			    TransRes.TransType.name(), TransRes.Sign, TransRes.Exponent, TransRes.Fraction);
		  $display("%t: %hx%h+%h = %h (%h) Checked", $time, r_a, r_b, r_c, FPGen_bus.z, expectedZ);
		  end // if (verb)
	       end 
	    end
            @(posedge clk);		// wait a clock cycle
    	 end // for (int i=0; i<num_trans; i++)
      end // if (vector_file == "")
      else begin // use the input test file
	 r_Temp = Temp_q[0];
  	 Temp_q = Temp_q[1:$];
	 while( !(r_Temp == 1'bx) ) begin
	    
	    if(!stall_requested) begin	      
	       // X for inexact, O for overflow, U for underflow, V for invalid, and Z for zero-divide
	       logic   FX, FO, FU, FV, FZ, expectNaN, expectIsZero, resultIsZero;
	       
	       expectedZ = r_Temp[`$fp_width+20-1`:20];
	       FO = r_Temp[12];
	       FZ = r_Temp[0];
	       FV = r_Temp[4];
	       FU = r_Temp[8];
	       FX = r_Temp[16];
	       r_rnd = r_Temp[`$fp_width*4+20+1`:`$fp_width*4+20`];
	       r_a = r_Temp[`$fp_width*4+20-1`:`$fp_width*3+20`];
	       r_b = r_Temp[`$fp_width*3+20-1`:`$fp_width*2+20`];
	       r_c = r_Temp[`$fp_width*2+20-1`:`$fp_width  +20`];
	       
	       expectNaN = expectedZ[`$fp_width-2`:`$frac_width`] ==	{(`$exp_width`){1'b1}} 
		       && expectedZ[`$frac_width-1`:0]!={(`$frac_width`){1'b0}};
	       expectIsZero = expectedZ[`$fp_width-2`:`$frac_width`] == {(`$exp_width`){1'b0}} 
		       && expectedZ[`$frac_width-1`:0]=={(`$frac_width`){1'b0}};
	       
	       /*
		if(FO) begin
		expectedZ[`$fp_width-2`:0] = {{(`$exp_width`){1'b1}},{(`$frac_width`){1'b0}}};
	    end
		if(FU) begin
		expectedZ[`$fp_width-2`:0] = {(`$exp_width+$frac_width`){1'b0}};
	    end
		*/

	       if (verb) begin
		  $display("\n\n%t: Input: %h_%h_%h_%h ( %e * %e + %e = %e )", $time,
			   r_rnd, r_a, r_b, r_c, $bitstoreal(r_a),  $bitstoreal(r_b), 
			   $bitstoreal(r_c), $bitstoreal(expectedZ));
		  // X for inexact, O for overflow, U for underflow, V for invalid, and Z for zero-divide
		  $display("%t: Expect Result: \tSign = %h, Exp = %h, Man = %h, FO=%h FU=%h FV=%h FX=%h FZ=%h, NaN=%b", $time,
			   expectedZ[`$fp_width-1`], expectedZ[`$fp_width-2`:`$frac_width`], expectedZ[`$frac_width-1`:0],FO, FU, FV, FX, FZ, expectNaN);
		  $display("%t: FMA_Result: \tSign = %h, Exp = %h, Man = %h", $time,
			   FPGen_bus.z[`$fp_width-1`], FPGen_bus.z[`$fp_width-2`:`$frac_width`], FPGen_bus.z[`$frac_width-1`:0]);
	       end
	       
	       /*
		//calculate output result after inc
    		TransRes.ForceFPNum(z);
		TransRes.CalculateInc();
		z2 = TransRes.GetFPNum();
		$display("%t: After Inc: Sign = %h, Exp = %h, Man = %h  ", $time,
		z2[`$fp_width-1`], z2[`$fp_width-2`:`$frac_width`], z2[`$frac_width-1`:0] );
		*/

	       
	       resultIsZero = FPGen_bus.z[`$fp_width-2`:`$frac_width`] == {(`$exp_width`){1'b0}} 
			      && FPGen_bus.z[`$frac_width-1`:0]=={(`$frac_width`){1'b0}};
	       if (!ignore_errors) begin
		  if(!(FPGen_bus.z == expectedZ || (resultIsZero==1 && expectIsZero==1)
		       /* && !(FO==1 && status[1]==1) && !(FU==1 && (status[0]|status[3]==1))*/
		       || (expectNaN==1 && (FPGen_bus.status[2]==1)))) begin
		     //FPGen_bus.dumptolog = 1'b1;
		     #1;
		     $display("%t: \033[0;31mERROR Found\033[0m", $time);
		     result_tag = $fopen("TEST_FAIL","w");
		     $fclose(result_tag);
		     $finish(2);
		  end
	       end
	       r_Temp = Temp_q[0];
  	       Temp_q = Temp_q[1:$];
	    end
	    @(negedge clk);
	 end // while ( MemTemp !== 1b'x )
      end // else: !if(vector_file == "")
   endtask // monitor_dut
   


   
   //-------------------------------------------------------------------------//
   // general runtime argument parsing procedure
   //-------------------------------------------------------------------------//
   task get_command_line_args;
      int 	wave=0;
      int 	wave_delay=0;
      // if this is a "+wave" run, it must record all signals      
      if ( $test$plusargs("Silent") ) begin
	 $display("\t%t:\tRuntime input +Silent found",$time);
	 verb = 0;
      end
      if ( $test$plusargs("Wave") ) begin
         $display("\t%t:\tRuntime input Wave found (will start signal capture soon...)",$time);
	 wave = 1;
      end
      if ( $test$plusargs("WaveDelay") ) begin
	 $value$plusargs("WaveDelay=%d", wave_delay);
	 $display("\t%t:\tRuntime input +WaveDelay=%0d found. Waveform will be recorded from the %0dth Transaction",$time, wave_delay, wave_delay);
      end      
      // Run wave if wave=1
      fork
	 if (wave) start_wave(.wave_delay(wave_delay));
      join_none
      
      // find the seed for this run
      if ( $test$plusargs("Seed") ) begin
	 $value$plusargs("Seed=%d", seed);
	 $display("\t%t:\tRuntime input +Seed=%d found",$time, seed);
      end
      if ( $test$plusargs("NumTrans") ) begin
	 $value$plusargs("NumTrans=%d", num_trans);
	 $display("\t%t:\tRuntime input +NumTrans=%d found",$time, num_trans);
      end
      if ( $test$plusargs("IgnoreErrors") ) begin
	 $display("\n\t%t:\tWARNING IgnoreErrors was set -- all checks are disabled\n",$time);
	 ignore_errors = 1;
      end
      if ( $test$plusargs("File") ) begin
	 $value$plusargs("File=%s", vector_file);
	 $display("\t%t:\tRuntime input +File=%s found",$time, vector_file);
      end
   endtask // get_command_line_args


   // task to control wave capture
   task start_wave(input int wave_delay=0);
      if(wave_delay)	
	repeat(wave_delay) @(posedge clk);
      $display("\t%t:\tStarting signal and memory wave capture",$time);
      $vcdpluson(   0  , `($self->get_top())->mname`);
   endtask // start_wave

   
   // Activity factor tasks
   task start_saif;
      if ( $test$plusargs("SAIF") ) begin
         $display("\t%t:\tStarting SAIF (Switching Activity Interchange Format)",$time);
	 // setup SAIF: https://solvnet.synopsys.com/retrieve/029417.html
	 $set_gate_level_monitoring("on", "mda");
      	 $set_toggle_region(`$FP_obj->get_instance_path()`);
	 // wait for sim to really start
	 @(negedge reset);
	 $toggle_start;
      end
   endtask // start_saif

   task finish_saif;
      if ( $test$plusargs("SAIF") ) begin
         $display("\t%t:\tFinalizing SAIF (Switching Activity Interchange Format)",$time);
	 $toggle_stop();
	 $toggle_report ("`$FP_obj->iname()`.saif",1.0e-12,`$FP_obj->get_instance_path()`);
      end
   endtask // finish_saif
   
endprogram : `mname`
