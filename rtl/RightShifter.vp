
/*************************************************************************
 ** From Perforce:
 **
 ** $Id: //Smart_design/ChipGen/FP-Gen/rtl/RightShifter.vp#1 $
 ** $DateTime: 2011/12/24 22:02:13 $
 ** $Change: 9979 $
 ** $Author: sameh06 $
 *************************************************************************/

/* *****************************************************************************
 * Description:
 * ------------
 * Right shifter that uses the LSB of shift amount before MSB
 *  
 * 
 * Parameters:
 * ------------
 * * width, isSigned
 * 
 * 
 * Change bar:
 * -----------
 * Date           Author    Description
 * Jan 24, 2012   sameh06   init version - 
 *                          
 * ****************************************************************************/

/*******************************************************************************
 * PARAMETERIZATION
 * ****************************************************************************/
//; # Perl Libraries
//; use POSIX qw(ceil log); # For ceiling rounding and log math
//; sub CeilOfLog2{ return ceil(log(@_)/log(2)); }
//;
//; # get some values from the top
//; my $verif_mode = parameter(Name=>'VERIF_MODE',
//;                            Val=>'ON', List=>['ON','OFF'],
//;                            Doc=>"Verification mode determines whether or not ".
//;                                 "monitors and drivers are on. Possible values ".
//;                                 "are ON or Off. !IGNORE!" ); 
//; my $synth_mode = parameter(Name=>'SYNTH_MODE',
//;                            Val=>'OFF', List=>['ON','OFF'],
//;                            Doc=>"Synthesis mode determines whether or not ".
//;                                 "special synthesis constructs are used. ".
//;                                 "Possible values are ON or Off.  !IGNORE!");

//;
//; # module parameters
//; my $width = parameter(Name=>'Width', Val=>52, 
//;                           Min=>4, Step=>1, 
//;                           Doc=>"Width of shifter input");
//; my $min_shift_width = CeilOfLog2($width);
//; my $shift_width = parameter(Name=>'ShiftWidth', Val=>$min_shift_width, 
//;                           Min=>$min_shift_width, Step=>1, 
//;                           Doc=>"Shift signal width");
//; my $is_signed = parameter(Name=>'isSigned', Val=>'NO', 
//;                           List=>['YES','NO'], 
//;                           Doc=>"Indicates if MSB is sign bit or not");
//;


module `mname` (
    input  logic [`$width-1`:0] a,
    input  logic [`$shift_width-1`:0] sh,
    output  logic [`$width-1`:0] z
           );

  /* synopsys dc_tcl_script_begin
   set_ungroup [current_design] true
   set_flatten true -effort high -phase true -design [current_design]
  */

  logic MSB;

//; if ( $is_signed =~ /YES/) {
  assign MSB = a[`$width-1`];
//; } else {
  assign MSB = 0;
//; }

//; for(my $i=0;$i<$min_shift_width;$i++) {
//;   if ($i==$shift_width-1) {
  assign z = sh[`$i`]? { {(`2**$i`) {MSB}} , a_`$i-1`[`$width-1`:`2**$i`] } : a_`$i-1` ;
//;   } else {
  logic [`$width-1`:0] a_`$i`;
//;     if ($i==0) {
  assign a_`$i` = sh[`$i`]? { {(`2**$i`) {MSB}} , a[`$width-1`:`2**$i`] }: a;
//;     } else {
  assign a_`$i` = sh[`$i`]? { {(`2**$i`) {MSB}} , a_`$i-1`[`$width-1`:`2**$i`] }: a_`$i-1`;
//;     }
//;   } 
//; }

//; if ( $shift_width > $min_shift_width ) {
  assign z = (|sh[`$shift_width-1`:`$min_shift_width`])? {(`$width`) {MSB}} : a_`$min_shift_width-1`;
//; }

endmodule


