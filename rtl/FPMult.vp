/*************************************************************************
 ** From Perforce:
 **
 ** $Id$
 ** $DateTime$
 ** $Change$
 ** $Author$
 *************************************************************************/

/* *****************************************************************************
 * Description:
 * A floating point multiplier that takes two floating point number A, B and 
 * produces the result AxB in full precision without any truncation. 
 * The output may be used for constructing a cascade FMA or rounded to 
 * input precision to construct a FP multiplier
 * 
 * 
 * Parameters:
 * * FractionWidth, ExponentWidth, EnableDenormals
 * 
 * Change bar:
 * -----------
 * Date          Author    Description
 * Oct 01, 2011   shacham   init version - ported Sameh's original code to 
 *                         genesis
 * ****************************************************************************/

/*******************************************************************************
 * PARAMETERIZATION
 * ****************************************************************************/
//; # Perl Libraries
//; use POSIX qw(ceil log); # For ceiling rounding and log math
//; sub CeilOfLog2{ return ceil(log(@_)/log(2)); }
//;
//; # get some values from the top
//; my $verif_mode = $self->get_top_param('VERIF_MODE'); # Reads this parameter from the top level
//; my $synth_mode = $self->get_top_param('SYNTH_MODE'); # Reads this parameter from the top level
//;
//; # module parameters
//; my $frac_width = parameter(Name=>'FractionWidth', Val=>52, 
//;                           Min=>4, Step=>1, 
//;                           Doc=>"Width of the Fraction for the multiplier (default is IEEE Double, 52 bit)  !FUNCTIONAL!");
//; my $exp_width = parameter(Name=>'ExponentWidth', Val=>11, 
//;                           Min=>4, Step=>1, 
//;                           Doc=>"Width of the exponent for the multiplier (default is IEEE Double, 11 bit)  !FUNCTIONAL!");
//; my $dw   = parameter(Name=>'DesignWare', Val=>'NO' , List=>['YES','NO'] ,
//;                      Doc=>'Use the designware implementation of FPMult documented !IGNORE!' );  #JB- ignore until implementd
//; my $arch = parameter(Name=>'Architecture', Val=>'Cascade', List=>['Cascade', 'Fused'],
//; 			 Doc=>"Which architecture is tested? Cascaded multiply accumulate ".
//; 			      "or Fused? (Pick:Cascade/Fused)  !IGNORE!"); #JB- ignoring for now...
//; my $useInc = parameter(Name=>'useInc', Val=>1, List=>[1, 0],
//; 			   Doc=>"Inputs A has an increment signal");
//; my $enable_denormals = parameter(Name=>'EnableDenormals', Val=>'YES', 
//;                           List=>['YES','NO'], 
//;                           Doc=>"Enable denormals parameters to enable handling denormal values ".
//;                                "of inputs A and B correctly (YES/NO) !FUNCTIONAL!");
//;
//; # And some local variables
//; my $shift_width = CeilOfLog2($frac_width+1) + 1;
//; my $product_width = 2 * $frac_width + 2;

module `mname`(
  //; if ($verif_mode =~ /ON/){
    input logic dumptolog,
  //; }
    input logic [`$exp_width + $frac_width`:0] A, B,
  //; if ($useInc){
    input logic 			      IncA, IncB,
  //; }	
    output logic 			      SignAB, NANAB, InfAB, ZeroAB, RStickyAB,
    output logic [`$exp_width + 1`:0] 	      ExpAB,
    output logic [`$product_width - 1`: 0]    ManAB
	       );
   
   logic [`$frac_width - 1`:0] 		      SigA, SigB;
   logic [`$frac_width`:0] 		      ManA, ManB;
   logic [`$exp_width - 1`:0] 		      ExpA, ExpB;
   //; if ( ! $useInc){
   logic 				      IncA, IncB;
   assign IncA = 1'b0;
   assign IncB = 1'b0;
   //; }	

   logic [`$exp_width + 1`:0] 		      bias_offset, Eab_ps0, Eab_ps1, ExpAB0, ExpAB1;
   logic [`$product_width-1`: 0] 	      ManAB_unnormalized, ManAB_normalized;
   //if IncA=IncB=1, ManA=ManB=`$frac_width`'b1, the product may be 1 bit larger
   logic [`$product_width`: 0] 		      ManAB_unnormalized_long;
   

   logic 				      NANorInfA, NANorInfB, zeroSigA, zeroSigB, InfA;
   logic 				      InfB, NANA, NANB, SignA, SignB, ZeroExpA, ZeroExpB;
   logic 				      ZeroA, ZeroB, co_dummy0, co_dummy1, co_dummy2;
   logic 				      co_dummy3, co_dummy4, noShift, denormalAB;

   logic 				      RStickyAB_int, ManAB_normalized_nextbit;
   logic 				      zeroSigAplusInc, zeroSigBplusInc, zeroAplusInc, zeroBplusInc, InfAplusInc, InfBplusInc, NANAplusInc, NANBplusInc, NANorInfAplusInc, NANorInfBplusInc, MaxA, MaxB;

   logic 				      noShiftRight;
   
   


   assign SigA  = A[`$frac_width - 1` : 0 ];
   assign SigB  = B[`$frac_width - 1` : 0 ];
   assign ZeroExpA  =  (A[`$exp_width + $frac_width - 1`:`$frac_width`] == `$exp_width`'b0)? 1'b1:1'b0;
   assign ZeroExpB  =  (B[`$exp_width + $frac_width - 1`:`$frac_width`] == `$exp_width`'b0)? 1'b1:1'b0;
   assign ExpA  = { A[`$exp_width + $frac_width - 1` : `$frac_width + 1` ] , ZeroExpA | A[`$frac_width`] }; // convert denormals exponents to normal
   assign ExpB  = { B[`$exp_width + $frac_width - 1` : `$frac_width + 1` ] , ZeroExpB | B[`$frac_width`] }; // convert denormals exponents to normal
   assign SignA = A[ `$exp_width + $frac_width` ];
   assign SignB = B[ `$exp_width + $frac_width` ];
   
   assign NANorInfA =  ExpA=={(`$exp_width`){1'b1}};
   assign NANorInfB =  ExpB=={(`$exp_width`){1'b1}};
   assign zeroSigA  =  SigA==0;
   assign zeroSigB  =  SigB==0;
   assign ZeroA     =  zeroSigA & ZeroExpA;
   assign ZeroB     =  zeroSigB & ZeroExpB;
   assign InfA      =  zeroSigA & NANorInfA;
   assign InfB      =  zeroSigB & NANorInfB;
   assign NANA      = ~zeroSigA & NANorInfA;
   assign NANB      = ~zeroSigB & NANorInfB;
   assign MaxA      =  ExpA=={{(`$exp_width-1`){1'b1}},1'b0} && SigA=={(`$frac_width`){1'b1}};
   assign MaxB      =  ExpB=={{(`$exp_width-1`){1'b1}},1'b0} && SigB=={(`$frac_width`){1'b1}};
   
   assign NANorInfAplusInc = NANorInfA | (IncA & MaxA);
   assign NANorInfBplusInc = NANorInfB | (IncB & MaxB);
   assign zeroSigAplusInc = (zeroSigA & ~(IncA & ~InfA & ~NANA)) | (IncA & MaxA);
   assign zeroSigBplusInc = (zeroSigB & ~(IncB & ~InfB & ~NANB)) | (IncB & MaxB);
   assign zeroAplusInc = zeroSigAplusInc & ZeroExpA;
   assign zeroBplusInc = zeroSigBplusInc & ZeroExpB;
   assign InfAplusInc =  zeroSigAplusInc & NANorInfAplusInc;
   assign InfBplusInc =  zeroSigBplusInc & NANorInfBplusInc;
   assign NANAplusInc = ~zeroSigAplusInc & NANorInfAplusInc;
   assign NANBplusInc = ~zeroSigBplusInc & NANorInfBplusInc;
   
  assign NANAB = NANAplusInc | NANBplusInc | (InfAplusInc & zeroBplusInc) | (InfBplusInc & zeroAplusInc);
 
  assign InfAB = (InfBplusInc | InfAplusInc) & ~NANAB ;


  assign ManA = { ~ZeroExpA , SigA };
  assign ManB = { ~ZeroExpB , SigB };

   // BIAS = {($exp_width-1){1'b1}} = {(`$exp_width-1`){1'b1}}
  assign bias_offset = - {(`$exp_width-1`){1'b1}}; // sign extend the bias to be exp_width+2=`$exp_width`+2 wide

  // Eab = Ea + Eb - BIAS - LZD_A - LZD_B

   // If $useInc==1: sign extend the exponents by 2 bits since the maximum positive result is:
   //         2^($exp_width+1) - 2^($exp_width-1) - 1 = 2^(`$exp_width+1`) - 2^(`$exp_width-1`) - 1
   // and the minimum negative result is: 
   //         - 2^($exp_width-1) + 1 = - 2^(`$exp_width-1`) + 1

  DW01_csa #(`$exp_width+2`) EAB_CSA0  (.a({2'b00, ExpA}),.b({2'b00, ExpB}),.c(bias_offset),
					.ci(noShiftRight), .carry(Eab_ps0), .sum(Eab_ps1), .co(co_dummy0) );

   //; if ($enable_denormals=~ /YES/i){
   // enable_denormals = YES
    logic [`$exp_width + 1`:0] Eab_ps2, Eab_ps3, Eab_ps4, Eab_ps5, Eab_1_ps0;
    logic [`$exp_width + 1`:0] Eab_1_ps1, ExpAB_1, denormalShiftConst, SHD_ps0, SHD_ps1, SHD_wide;
    logic [`2*$product_width - 1` : 0] ManAB_shifted;
    logic [`$shift_width - 1`:0] LZD_A, LZD_B, normalShiftConst, SHN_ps0, SHN_ps1, SHN;
    logic [`$shift_width + 1`:0] shiftAmount;
    logic co_dummy5, co_dummy6, co_dummy7;

    DW_lzd #(`$frac_width`+1) LZDA ( .a({ManA[`$frac_width`:1],ManA[0]|IncA}), .enc(LZD_A) );
    DW_lzd #(`$frac_width`+1) LZDB ( .a({ManB[`$frac_width`:1],ManB[0]|IncB}), .enc(LZD_B) );

    DW01_csa #(`$exp_width`+2) EAB_CSA1  (.a(Eab_ps0),.b(Eab_ps1),
					  .c({{(`$exp_width+2-$shift_width`){1'b1}},~LZD_A}),
					  .ci(1'b1), .carry(Eab_ps2), .sum(Eab_ps3), 
					  .co(co_dummy1) );
    DW01_csa #(`$exp_width`+2) EAB_CSA2  (.a(Eab_ps2),.b(Eab_ps3),
					  .c({{(`$exp_width+2-$shift_width`){1'b1}},~LZD_B}),
					  .ci(1'b1), .carry(Eab_ps4), .sum(Eab_ps5), 
					  .co(co_dummy2) );
    DW01_csa #(`$exp_width`+2) EAB_1_CSA (.a(Eab_ps2),.b(Eab_ps3),
					  .c({{(`$exp_width+2-$shift_width`){1'b1}},~LZD_B}),
					  .ci(1'b0), .carry(Eab_1_ps0), .sum(Eab_1_ps1), 
					  .co(co_dummy7) );

    assign ExpAB_1 = Eab_1_ps0 + Eab_1_ps1; // ExpAB - 1
   
   //; my $ExpAdd_obj = generate('CompoundAdder', 'ExpAdd', Width=>($exp_width+2), EnableCarryIn=>'OFF', ZeroWidth=>0);   
   `$ExpAdd_obj->instantiate()` 
     (
      //; if ($verif_mode =~ /ON/){
      .dumptolog(dumptolog),
      //; }
      .a(Eab_ps4), .b(Eab_ps5), .sum0(ExpAB0), .co0(co_dummy3),  .sum1(ExpAB1), .co1(co_dummy4));


    //Normal Shift Amount = `$frac_width` + 1 - LZD_A - LZD_B = `$frac_width` + 3 + ~LZD_A + ~LZD_B
    assign normalShiftConst = `$frac_width` + 3;
    DW01_csa #(`$shift_width`) SHN_CSA (.a(~LZD_A),.b(~LZD_B),.c(normalShiftConst),.ci(1'b0), .carry(SHN_ps0), .sum(SHN_ps1), .co(co_dummy5) );
    assign SHN = SHN_ps0 + SHN_ps1;

    //Denormal Shift Amount = `$frac_width` + 1 + 1 - Eab_ps0 - Eab_ps1 = `$frac_width` + 4 + ~Eab_ps0 + ~Eab_ps1
    assign denormalShiftConst = `$frac_width` + 4;
    DW01_csa #(`$exp_width`+2) SHD_CSA (.a(~Eab_ps0),.b(~Eab_ps1),.c(denormalShiftConst),.ci(1'b0), .carry(SHD_ps0), .sum(SHD_ps1), .co(co_dummy6) );
    assign SHD_wide = SHD_ps0 + SHD_ps1;

    assign denormalAB = ExpAB_1[`$exp_width`+1];

  //;if($exp_width < $shift_width+1){
    assign shiftAmount = denormalAB? SHD_wide[`$shift_width+1`:0] : {1'b0,SHN};
  //;}else{
    assign shiftAmount = denormalAB? (|SHD_wide[`$exp_width`+1:`$shift_width+2`] ? 
				      {(`$shift_width+2`){1'b1}}:SHD_wide[`$shift_width+1`:0]) : {1'b0,SHN};
  //;}

    assign ManAB_shifted = { ManAB_unnormalized , {(`$product_width`){1'b0}} }>>shiftAmount;
    assign ManAB_normalized = ManAB_shifted[`$product_width + $frac_width`:`$frac_width+1`];
    assign ManAB_normalized_nextbit = ManAB_shifted[`$frac_width`];
    assign RStickyAB_int = |ManAB_shifted[`$frac_width-1`:0] | ( ManAB_normalized==0 & ~ZeroAB);

   //; }else{           
   // enable_denormals = NO
   assign denormalAB = 0;
   assign ManAB_normalized = ManAB_unnormalized;
   assign RStickyAB = 0;
   //; my $ExpAdd_obj = generate('CompoundAdder', 'ExpAdd', Width=>($exp_width+2), EnableCarryIn=>'OFF', ZeroWidth=>0);   
   `$ExpAdd_obj->instantiate()` 
     (
      //; if ($verif_mode =~ /ON/){
      .dumptolog(dumptolog),
      //; }
      .a(Eab_ps0), .b(Eab_ps1), .sum0(ExpAB0), .co0(co_dummy3),  .sum1(ExpAB1), .co1(co_dummy4)
      );
   //; }


   //; my $Mul_obj = generate('Multiplier', 'Mult', Width=>$frac_width+1, UseInc=>($useInc)?"YES":"NO");
   `$Mul_obj->instantiate()` 
     (
      //; if ($verif_mode =~ /ON/){
       .dumptolog(dumptolog),
      //; }
      .a(ManA), .b(ManB), 
      //; if ($useInc){
      .ainc(IncA), .binc(IncB),
      //; }
      .out(ManAB_unnormalized_long)
      );

   //if IncA=IncB=1, ManA=ManB=`$frac_width`'b1, the product may be 1 bit larger, next two lines deal with this case
   assign noShiftRight = ManAB_unnormalized_long[`$product_width`];
   assign ManAB_unnormalized = noShiftRight?ManAB_unnormalized_long[`$product_width`:1]:ManAB_unnormalized_long[`$product_width-1`:0];
   
   
/*
  DW02_mult #(`$frac_width`+1, `$frac_width`+1 ) U1 ( .A(ManA),   .B(ManB),
                                                  .TC(1'b0), //Two's complement: 0 = unsigned, 1 = signed
                                                  .PRODUCT(ManAB_unnormalized));
*/


  assign noShift = ManAB_normalized[`$product_width - 1`];
  assign ZeroAB = zeroAplusInc | zeroBplusInc;
//  assign ExpAB = ZeroAB? 0 : ( noShift? ExpAB1 : (denormalAB?1:ExpAB0));

  assign ExpAB = ZeroAB? 0 : (denormalAB?1:ExpAB0);
  assign ManAB = ManAB_normalized;

  // Ofer?assign ExpAB = ZeroAB? 0 : ( noShift? ExpAB1 : (denormalAB?1:ExpAB0));
  // Ofer? assign ManAB = noShift? ManAB_normalized : {ManAB_normalized[`$product_width-2`:0],ManAB_normalized_nextbit};
  assign SignAB = SignA ^ SignB;
  assign RStickyAB = noShift?  RStickyAB_int|ManAB_normalized_nextbit : RStickyAB_int;
   



//; if ($verif_mode =~ /ON/){
   always @(posedge dumptolog)
     begin
	$display ("`$self->get_instance_path()`: ZeroExpA=0x%h ZeroA=0x%h InfA=0x%h ExpA=%h ManA=%h, SigA=%h IncA=0x%h",ZeroExpA, ZeroA, InfA, ExpA, ManA, SigA, IncA);
	$display ("`$self->get_instance_path()`: ZeroExpB=0x%h ZeroB=0x%h InfB=0x%h ExpB=%h ManB=%h, SigB=%h IncB=0x%h",ZeroExpB, ZeroB, InfB, ExpB, ManB, SigB, IncB);
	$display ("`$self->get_instance_path()`: ExpAB=%h , ManAB=%h, SignAB=%h, NANAB=%h, InfAB=%h, ZeroAB=%h, RStickyAB=%h",ExpAB, ManAB, SignAB, NANAB, InfAB, ZeroAB, RStickyAB);
	$display ("`$self->get_instance_path()`: ExpAB0=%h, ExpAB1=%h",ExpAB0, ExpAB1);
	$display ("`$self->get_instance_path()`: ManAB_unnormalized =%h ManAB_normalized =%h ManAB_unnormalized_long =%h",ManAB_unnormalized,ManAB_normalized,ManAB_unnormalized_long);
	$display ("`$self->get_instance_path()`: noShift =0x%h ExpAB0 =%h ExpAB1 =%h",noShift, ExpAB0, ExpAB1);
	$display ("`$self->get_instance_path()`: ZeroAB=0x%h InfAB=0x%h NANAB=0x%h RStickyAB=0x%h",ZeroAB, InfAB, NANAB, RStickyAB);
	$display ("`$self->get_instance_path()`: NANorInfAplusInc=%d, zeroSigAplusInc=%d, NANAplusInc=%d, NANBplusInc=%d, InfAplusInc=%d, ZeroBplusInc=%d, InfBplusInc=%d, ZeroAplusInc=%d, NANAB=%d",NANorInfAplusInc,zeroSigAplusInc,NANAplusInc, NANBplusInc, InfAplusInc, zeroBplusInc, InfBplusInc, zeroAplusInc, NANAB);
     end
 //; }

endmodule : `mname`
