/*************************************************************************
 ** From Perforce:
 **
 ** $Id$
 ** $DateTime$
 ** $Change$
 ** $Author$
 *************************************************************************/

/* *****************************************************************************
 * Description:
 * A floating point multiplier that takes two floating point number A, B and 
 * produces the result AxB in full precision without any truncation. 
 * The output may be used for constructing a cascade FMA or rounded to 
 * input precision to construct a FP multiplier
 * 
 * 
 * Parameters:
 * * FractionWidth, ExponentWidth, EnableDenormals, EnableForwarding
 * * PipelineDepth, EnableMultiplePumping, MulpPipelineDepth, FloatingDigits
 * 
 * Change bar:
 * -----------
 * Date          Author    Description
 * Oct 01, 2011   shacham   init version - ported Sameh's original code to 
 *                         genesis
 * Apr 21, 2011  tema8     added multi precision
 * ****************************************************************************/

/*******************************************************************************
 * PARAMETERIZATION
 * ****************************************************************************/
//; # Perl Libraries
//; use POSIX qw(ceil floor log); # For ceiling rounding and log math
//; sub CeilOfLog2{ return ceil(log(@_)/log(2)); }
//;
//; # get some values from the top
//; my $verif_mode = $self->get_top_param('VERIF_MODE'); # Reads this parameter from the top level
//; my $synth_mode = $self->get_top_param('SYNTH_MODE'); # Reads this parameter from the top level
//;
//; # module parameters

//; my $frac_width = parameter(Name=>'FractionWidth', Val=>52,  Min=>4, Step=>1, 
//;                           Doc=>"Width of the Fraction for the multiplier (default is IEEE Double, 52 bit)");
//; my $exp_width = parameter(Name=>'ExponentWidth', Val=>11, Min=>4, Step=>1, 
//;                           Doc=>"Width of the exponent for the multiplier (default is IEEE Double, 11 bit)");
//; my $enable_denormals = parameter(Name=>'EnableDenormals', Val=>'YES',  List=>['YES','NO'], 
//;                           Doc=>"Enable denormals parameters to enable handling denormal values ".
//;                                "of inputs A and B correctly (YES/NO) FUNCTIONAL!");
//;
//; my $enable_forwarding = parameter(Name=>'EnableForwarding', Val=>'YES', List=>['YES', 'NO'],
//; 			   Doc=>"Pick 'NO' for A*B or pick 'YES' for (A+ainc)*(B+binc)");
//; my $pipeline_depth = parameter(Name=>'PipelineDepth', Val=>4, List=>[ 0,1,2,3,4,5,6,7 ] ,
//;                       Doc=>"Pipeline depth");
//; my $enableMultiplePumping = parameter(Name=>'EnableMultiplePumping', Val=>'NO', List=>['YES', 'NO'],
//; 			  Doc=>"!FUNCTIONAL! Use parallel MultiplierP unit");

//; # Multi precision mode
//; my $useMP = parameter(Name=>'UseMP', Val=>0, List=>[1, 0],
//; 			  Doc=>"Multi precision mode: Treat inputs as 2 numbers and produce 2 results.");
//; my $floating_digits= parameter(Name=>'FloatingDigits', Val=>1,  List=>[1,2],
//; 			   Doc=>"Number of digits before floating point");
//; my $mulp_pipeline_depth = parameter(Name=>'MulpPipelineDepth', Val=>ceil($pipeline_depth/2),
//;                       Doc=>"!FUNCTIONAL! MultiplierP Part Pipeline depth");
//; my $add_pipeline_depth = $pipeline_depth - $mulp_pipeline_depth;
//;
//; # And some local variables
//; my $shift_width = CeilOfLog2($frac_width+1) + 1;
//; my $product_width = 2 * $frac_width + 2;

module `mname`(
   //; if ($verif_mode =~ /ON/){
    input logic dumptolog,
   //; }
   //; if ($useMP){
    input logic                   mp_mode,
   //; }
    input logic [`$exp_width + $frac_width`:0] 	a_in, b_in,
   //; if ($enable_forwarding =~ /YES/){
    input logic forward_a, forward_b,	
    input logic [`$exp_width-1`:0] ExpZ,
    input logic [`$frac_width`:0] ManZ,
    input logic SignZ, InfZ, NANZ, ZeroZ, IncZ,
   //; }
   //; if ($pipeline_depth>0) {
    input logic  clk , reset, valid_in, stall_in,	       
    output logic valid_out, stall_request,
   //; }
    output logic 			      SignAB_out, NANAB_out, InfAB_out, ZeroAB_out,
    output logic [`$exp_width + 1`:0] 	      ExpAB_out,
    output logic [`$product_width - 1`: 0]    ManAB_out
	       );

   logic [`$exp_width - 1`:0] 	ExpA_P0, ExpB_P0, ExpAin_P0, ExpBin_P0;
   logic [`$exp_width + 1`:0]   bias_offset, Eab_ps0_P0, Eab_ps1_P0, ExpAB0_P0, ExpAB1_P0, ExpAB_P0, ExpAB_PEnd;
   logic [`$frac_width - 1`:0] 	SigA_P0, SigB_P0;
   logic [`$frac_width`:0] 	ManA_P0, ManB_P0, ManAin_P0, ManBin_P0;
   logic [`$product_width-1`: 0] ManAB_PEnd, ManAB_unnormalized_PEnd, ManAB_shifted_PEnd, ManAB_normalized_PEnd;
   //if IncA=IncB=1, ManA=ManB=`$frac_width`'b1, the product may be 1 bit larger
   logic [`$product_width`: 0] 	ManAB_unnormalized_long_PEnd;

   logic IncA_P0, IncB_P0 , stall, valid_Mult, valid_shiftAmount, valid_ManAB, valid_ExpAB;
   logic NANorInfA_P0, NANorInfB_P0, InfA_P0, InfB_P0, NANA_P0, NANB_P0;
   logic zeroSigA_P0, zeroSigB_P0, ZeroExpA_P0, ZeroExpB_P0, ZeroExpAin_P0, ZeroExpBin_P0;
   logic SignA_P0, SignB_P0, SignAin_P0, SignBin_P0, denormZ, denormAin_P0, denormA_P0, denormA_PEnd, denormBin_P0, denormB_P0, denormB_PEnd, shiftleft_P0, shiftleft_PEnd;
   logic ZeroA_P0, ZeroA_PEnd, ZeroB_P0, ZeroB_PEnd;
   logic SignAB_P0, SignAB_PEnd, NANAB_P0, NANAB_PEnd, InfAB_P0, InfAB_PEnd, ZeroAB_P0, ZeroAB_PEnd;
   logic co_dummy0_P0, co_dummy1_P0, co_dummy2_P0, co_dummy3_P0, co_dummy4_P0;

   //; if ($enable_forwarding =~ /YES/){
   assign denormZ = ~ManZ[`$frac_width`];
   //; }

//; if($enable_forwarding =~ /YES/ && $pipeline_depth > 0 ){
   assign {ExpA_P0,ManA_P0, SignA_P0, ZeroExpA_P0, denormA_P0, IncA_P0} = forward_a?
                     {ExpZ,ManZ, SignZ, 1'b0, denormZ, IncZ}
                    :{ExpAin_P0,ManAin_P0, SignAin_P0, ZeroExpAin_P0, denormAin_P0, 1'b0};
   assign {ExpB_P0,ManB_P0, SignB_P0, ZeroExpB_P0, denormB_P0, IncB_P0} = forward_b? 
                     {ExpZ,ManZ, SignZ, 1'b0, denormZ, IncZ}
                    :{ExpBin_P0,ManBin_P0, SignBin_P0, ZeroExpBin_P0, denormBin_P0, 1'b0};
//; } else {
   assign {ExpA_P0,ManA_P0, SignA_P0, ZeroExpA_P0, IncA_P0} = 
          {ExpAin_P0,ManAin_P0, SignAin_P0, ZeroExpAin_P0,1'b0};
   assign {ExpB_P0,ManB_P0, SignB_P0, ZeroExpB_P0, IncB_P0} = 
          {ExpBin_P0,ManBin_P0, SignBin_P0, ZeroExpBin_P0,1'b0};
//; }


   // Calculations for Ain
   assign SignAin_P0 = a_in[ `$exp_width + $frac_width` ];
   assign ExpAin_P0  = a_in[`$exp_width + $frac_width - 1` : `$frac_width` ] ;
   assign ZeroExpAin_P0  =  ~|ExpAin_P0;
   assign ManAin_P0 = { ~denormAin_P0 , a_in[`$frac_width - 1` : 0 ]};

   //Calculation for A
   assign SigA_P0      = ManA_P0[`$frac_width - 1` : 0 ];
   assign zeroSigA_P0  = SigA_P0=={(`$frac_width`){IncA_P0}};
   assign ZeroA_P0     = ~ManA_P0[`$frac_width`] & zeroSigA_P0 & ~IncA_P0 ;
   assign NANorInfA_P0 = ( & ExpA_P0[`$exp_width - 1` : 1])  & ( ExpA_P0[0] | (IncA_P0 & zeroSigA_P0) )  ;
   assign InfA_P0      =  zeroSigA_P0 & NANorInfA_P0;
   assign NANA_P0      = ~zeroSigA_P0 & NANorInfA_P0;


   // Calculations for Bin
   assign SignBin_P0 = b_in[ `$exp_width + $frac_width` ];
   assign ExpBin_P0  = b_in[`$exp_width + $frac_width - 1` : `$frac_width` ] ;
   assign ZeroExpBin_P0  =  ~|ExpBin_P0;
   assign ManBin_P0 = { ~denormBin_P0 , b_in[`$frac_width - 1` : 0 ] };

   //Calculation for B
   assign SigB_P0      = ManB_P0[`$frac_width - 1` : 0 ];
   assign zeroSigB_P0  = SigB_P0=={(`$frac_width`){IncB_P0}};
   assign ZeroB_P0     = ~ManB_P0[`$frac_width`] & zeroSigB_P0 & ~IncB_P0;
   assign NANorInfB_P0 = ( & ExpB_P0[`$exp_width - 1` : 1])  & ( ExpB_P0[0] | (IncB_P0 & zeroSigB_P0) )  ;
   assign InfB_P0      =  zeroSigB_P0 & NANorInfB_P0;
   assign NANB_P0      = ~zeroSigB_P0 & NANorInfB_P0;
   
   // Calculations for AB
   assign NANAB_P0 = NANA_P0 | NANB_P0 | (InfA_P0 & ZeroB_P0) | (InfB_P0 & ZeroA_P0);
   assign InfAB_P0 = (InfB_P0 | InfA_P0) & ~NANAB_P0 ;
   assign ZeroAB_P0 = ZeroA_P0 | ZeroB_P0;
   assign SignAB_P0 = SignA_P0 ^ SignB_P0;
   
   //; if ($enable_forwarding =~ /YES/){
   assign shiftleft_P0 = (&ManZ) & IncA_P0 & IncB_P0 ;
   //; } else {
   assign shiftleft_P0 = IncA_P0 & IncB_P0 ;
   //; }
   
   //Mantissa multiplication
//; my $Mul_obj = generate('Multiplier', 'Mult', Width=>$frac_width+1, UseInc=>$enable_forwarding, 
//;                        MulpPipelineDepth=> $mulp_pipeline_depth, EnableMultiplePumping=> $enableMultiplePumping, 
//;                        AddPipelineDepth=> $add_pipeline_depth , UseMP=>($useMP)?"YES":"NO");
  `$Mul_obj->instantiate()` 
     (
      //; if ($verif_mode =~ /ON/){
       .dumptolog(dumptolog),
      //; }
      .a( ManA_P0), .b( ManB_P0), 
	       
      //; if ($useMP){
      .mp_mode(mp_mode),
      //; }
      //; if($enable_forwarding =~ /YES/){
      .ainc(IncA_P0), .binc(IncB_P0),
      //; }
      //; if ($pipeline_depth>0) {
      .valid_in(valid_in),
      .stall(stall), .clk(clk) , .reset(reset),
      .valid_out(valid_Mult),
      //; }
      .out(ManAB_unnormalized_long_PEnd)
      );

   assign ManAB_unnormalized_PEnd = shiftleft_PEnd?
                                     ManAB_unnormalized_long_PEnd[`$product_width`:1] 
                                   : ManAB_unnormalized_long_PEnd[`$product_width-1`:0];


   
//; if ($pipeline_depth>0) {
//;   my $pipe_AB = generate(  'FF_pipeline',  'pipe_AB',  
//;                             Width=> 9,
//;                             PipelineDepth => $pipeline_depth, Retime=>'YES');
  `$pipe_AB ->instantiate()` ( .in({ZeroA_P0, denormA_P0, ZeroB_P0, denormB_P0, ZeroAB_P0, SignAB_P0, NANAB_P0, InfAB_P0, shiftleft_P0}) ,
                               .valid_in(valid_in), .clk(clk) , .stall(stall), .reset(reset), 
                               .out({ZeroA_PEnd, denormA_PEnd, ZeroB_PEnd, denormB_PEnd, ZeroAB_PEnd, SignAB_PEnd, NANAB_PEnd, InfAB_PEnd, shiftleft_PEnd }),
                               .valid_out(valid_out) );
   //; } else {
   assign {ZeroA_PEnd, denormA_PEnd, ZeroB_PEnd, denormB_PEnd, ZeroAB_PEnd, SignAB_PEnd, NANAB_PEnd, InfAB_PEnd, shiftleft_PEnd } = {ZeroA_P0, denormA_P0, ZeroB_P0, denormB_P0, ZeroAB_P0, SignAB_P0, NANAB_P0, InfAB_P0, shiftleft_P0};
   //; }

   

//; if ($enable_denormals=~ /YES/){
   // enable_denormals = YES
    assign denormAin_P0 = ZeroExpAin_P0;
    assign denormBin_P0 = ZeroExpBin_P0;

    logic [`$exp_width + 1`:0] Eab_ps2_P0, Eab_ps3_P0, Eab_ps4_P0, Eab_ps5_P0;
    logic [`$shift_width - 1`:0] LZD_A_P0, LZD_B_P0;
    logic [`$frac_width`:0]  dec_a_P0, dec_b_P0;
    logic [`$shift_width`:0] shiftAmount_P0, shiftAmount_PEnd;


    // Eab = Ea + Eb - BIAS - LZD_A - LZD_B + ZeroExpA + ZeroExpB
    //     = Ea + Eb + bias_offset + ~LZD_A + ~LZD_B + ZeroExpA + ZeroExpB (where bias_offset = -BIAS +2)

    assign bias_offset = - {(`$exp_width-1`){1'b1}} + 2; // sign extend the bias to be exp_width+2=`$exp_width`+2 wide

    DW_lzd #(`$frac_width`+1) LZDA ( .a({ManA_P0[`$frac_width`:1],ManA_P0[0]|IncA_P0}), .enc(LZD_A_P0) , .dec(dec_a_P0));
    DW_lzd #(`$frac_width`+1) LZDB ( .a({ManB_P0[`$frac_width`:1],ManB_P0[0]|IncB_P0}), .enc(LZD_B_P0) , .dec(dec_b_P0));
    assign shiftAmount_P0 = LZD_A_P0 + LZD_B_P0;


   
//; if ($pipeline_depth>0) {
//;   my $pipe_shiftAmount = generate(  'FF_pipeline',  'pipe_shiftAmount',  
//;                             Width=> $shift_width+1,
//;                             PipelineDepth => $pipeline_depth, Retime=>'YES');
  `$pipe_shiftAmount ->instantiate()` ( .in(shiftAmount_P0) ,
                               .valid_in(valid_in), .clk(clk) , .stall(stall), .reset(reset), 
                               .out(shiftAmount_PEnd),
                               .valid_out(valid_shiftAmount) );
   //; } else {
   assign shiftAmount_PEnd = shiftAmount_P0;
   //; }

    DW01_csa #(`$exp_width`+2) EAB_CSA1  (.a(Eab_ps0_P0),.b(Eab_ps1_P0),
					  .c({{(`$exp_width+2-$shift_width`){1'b1}},~LZD_A_P0}),
					  .ci(ZeroExpA_P0), .carry(Eab_ps2_P0), .sum(Eab_ps3_P0), 
					  .co(co_dummy1_P0) );
    DW01_csa #(`$exp_width`+2) EAB_CSA2  (.a(Eab_ps2_P0),.b(Eab_ps3_P0),
					  .c({{(`$exp_width+2-$shift_width`){1'b1}},~LZD_B_P0}),
					  .ci(ZeroExpB_P0), .carry(Eab_ps4_P0), .sum(Eab_ps5_P0), 
					  .co(co_dummy2_P0) );
   
   //; my $ExpAdd_obj = generate('CompoundAdder', 'ExpAdd', Width=>($exp_width+2), EnableCarryIn=>'OFF', ZeroWidth=>0);   
   `$ExpAdd_obj->instantiate()` 
     (
      //; if ($verif_mode =~ /ON/){
      .dumptolog(dumptolog),
      //; }
      .a(Eab_ps4_P0), .b(Eab_ps5_P0), .sum0(ExpAB0_P0), .co0(co_dummy3_P0),  .sum1(ExpAB1_P0), .co1(co_dummy4_P0));

//; if( $pipeline_depth > 0 ){
    logic [`$product_width-1`: 0] ManAB_unnormalized_PNorm, ManAB_shifted_PNorm;
    logic [`$shift_width`:0] shiftAmount_PNorm;
    logic normalize_ManAB_PEnd;
    reg stalled;

    assign normalize_ManAB_PEnd = (denormA_PEnd | denormB_PEnd) & ~ZeroAB_PEnd;
    assign stall_request = stalled? 0: normalize_ManAB_PEnd ;
    assign stall = stall_request | stall_in;
    
    always @(posedge clk)
    if (reset)
      stalled <= 0;
    else
      stalled <= stall;

   
//; if ($pipeline_depth>0) {
//;   my $normalization_pipe = generate('FF_pipeline','norm_stage', Width=> $product_width+$shift_width+1, PipelineDepth=> 1, Retime=>'YES');
    `$normalization_pipe ->instantiate()` (
       .in({ManAB_unnormalized_PEnd,shiftAmount_PEnd}) , .valid_in(stall_request), .clk(clk) , .stall(1'b0), .reset(reset), 
       .out( {ManAB_unnormalized_PNorm,shiftAmount_PNorm}), .valid_out(valid_ManAB) );
   //; } else {
   assign {ManAB_unnormalized_PNorm,shiftAmount_PNorm} = {ManAB_unnormalized_PEnd,shiftAmount_PEnd};
   //; }

    assign ManAB_shifted_PNorm = ManAB_unnormalized_PNorm << shiftAmount_PNorm; 
    assign ManAB_normalized_PEnd = normalize_ManAB_PEnd ? ManAB_shifted_PNorm : ManAB_unnormalized_PEnd;
//; } else {
    assign ManAB_normalized_PEnd = ManAB_unnormalized_PEnd << shiftAmount_PEnd;
//; }
    

//; }else{ 
          
   // enable_denormals = NO
   assign {denormAin_P0, denormBin_P0} = 0; 
   
   assign bias_offset = - {(`$exp_width-1`){1'b1}}; // sign extend the bias to be exp_width+2=`$exp_width`+2 wide

   //; my $ExpAdd_obj = generate('CompoundAdder', 'ExpAdd', Width=>($exp_width+2), EnableCarryIn=>'OFF', ZeroWidth=>0);   
   `$ExpAdd_obj->instantiate()` 
     (
      //; if ($verif_mode =~ /ON/){
      .dumptolog(dumptolog),
      //; }
      .a(Eab_ps0_P0), .b(Eab_ps1_P0), .sum0(ExpAB0_P0), .co0(co_dummy3_P0),  .sum1(ExpAB1_P0), .co1(co_dummy4_P0)
      );

    assign ManAB_normalized_PEnd = ManAB_unnormalized_PEnd;
    assign stall = stall_in;
    assign stall_request = 0;
//; }

  DW01_csa #(`$exp_width+2`) EAB_CSA0  (.a({2'b00, ExpA_P0}),.b({2'b00, ExpB_P0}),.c(bias_offset),
					.ci(shiftleft_P0), .carry(Eab_ps0_P0), .sum(Eab_ps1_P0), .co(co_dummy0_P0) );

//;  if ($floating_digits==1) {
  logic [`$exp_width + 1`:0] ExpAB0_PEnd, ExpAB1_PEnd;
   
//; if ($pipeline_depth>0) {
//;   my $pipe_ExpAB = generate(  'FF_pipeline',  'pipe_ExpAB',  
//;                             Width=> 2*$exp_width + 4,
//;                             PipelineDepth => $pipeline_depth, Retime=>'YES');
  `$pipe_ExpAB ->instantiate()` ( .in({ExpAB0_P0, ExpAB1_P0}) ,
                               .valid_in(valid_in), .clk(clk) , .stall(stall), .reset(reset), 
                               .out( {ExpAB0_PEnd, ExpAB1_PEnd} ),
                               .valid_out(valid_ExpAB) );
//; } else {
   assign {ExpAB0_PEnd, ExpAB1_PEnd} = {ExpAB0_P0, ExpAB1_P0};
   //; }
   
  assign ExpAB_PEnd = ZeroAB_PEnd? 1 : ( ManAB_normalized_PEnd[`$product_width-1`]? ExpAB1_PEnd : ExpAB0_PEnd);
  assign ManAB_PEnd = ManAB_normalized_PEnd[`$product_width-1`]? ManAB_normalized_PEnd : {ManAB_normalized_PEnd[`$product_width-2`:0],1'b0};
//; } else {
  
//; if ($pipeline_depth>0) { 
//;   my $pipe_ExpAB = generate(  'FF_pipeline',  'pipe_ExpAB',  
//;                             Width=> $exp_width + 2,
//;                             PipelineDepth => $pipeline_depth, Retime=>'YES');
  `$pipe_ExpAB ->instantiate()` ( .in(ExpAB_P0) ,
                               .valid_in(valid_in), .clk(clk) , .stall(stall), .reset(reset), 
                               .out(ExpAB_PEnd),
                               .valid_out(valid_ExpAB) );
   //; } else {
   assign ExpAB_PEnd = ExpAB_P0;
   //; }
   
  assign ExpAB_P0 = ZeroAB_P0? 1 : ExpAB0_P0;
  assign ManAB_PEnd = ManAB_normalized_PEnd;
//; }

   
   assign {InfAB_out,NANAB_out, ZeroAB_out, SignAB_out} = {InfAB_PEnd, NANAB_PEnd, ZeroAB_PEnd, SignAB_PEnd};
   assign {ExpAB_out, ManAB_out} = {ExpAB_PEnd, ManAB_PEnd};


//; if ($verif_mode =~ /ON/){
// synopsys translate_off
   always @(posedge dumptolog)
     begin
	$display ("`$self->get_instance_path()`: ZeroExpA=0x%h ZeroA=0x%h InfA=0x%h ExpA=%h ManA=%h IncA=0x%h", ZeroExpA_P0, ZeroA_P0, InfA_P0, ExpA_P0, ManA_P0, IncA_P0);
	$display ("`$self->get_instance_path()`: ZeroExpB=0x%h ZeroB=0x%h InfB=0x%h ExpB=%h ManB=%h IncB=0x%h", ZeroExpB_P0, ZeroB_P0, InfB_P0, ExpB_P0, ManB_P0, IncB_P0);
	$display ("`$self->get_instance_path()`: ExpAB=%h , ManAB=%h, SignAB=%h, NANAB=%h, InfAB=%h, ZeroAB=%h", ExpAB_PEnd, ManAB_PEnd, SignAB_PEnd, NANAB_PEnd, InfAB_PEnd, ZeroAB_PEnd);
	$display ("`$self->get_instance_path()`: ExpAB0=%h, ExpAB1=%h",ExpAB0_P0, ExpAB1_P0);
	$display ("`$self->get_instance_path()`: ManAB_unnormalized =%h ManAB_normalized =%h ManAB_unnormalized_long =%h", ManAB_unnormalized_PEnd,ManAB_normalized_PEnd, ManAB_unnormalized_long_PEnd);
    //;if ($enable_denormals=~ /YES/){
	$display ("`$self->get_instance_path()`: ManAB_shifted=%h shiftAmount=%h", ManAB_shifted_PEnd, shiftAmount_PEnd);
    //;}
     end
// synopsys translate_on
 //; }

endmodule : `mname`
