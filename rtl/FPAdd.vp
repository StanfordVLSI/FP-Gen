/*************************************************************************
 ** From Perforce:
 **
 ** $Id: //Smart_design/ChipGen/FP-Gen/rtl/FPAdd.vp#2 $
 ** $DateTime: 2012/02/08 11:27:28 $
 ** $Change: 10078 $
 ** $Author: jbrunhav $
 *************************************************************************/

/* *****************************************************************************
 * Description:
 * Floating Point adder
 * 
 * 
 * Parameters:
 * * FractionWidth, ExponentWidth, useInc, EnableDenormals
 * 
 * Change bar:
 * -----------
 * Date           Author    Description
 * Oct 13, 2011   sameh   init version - ported Sameh's original code to 
 *                          genesis
 * ****************************************************************************/

/*******************************************************************************
 * PARAMETERIZATION
 * ****************************************************************************/
//; # Perl Libraries
//; use POSIX qw(ceil log); # For ceiling rounding and log math
//; sub CeilOfLog2{ return ceil(log(@_)/log(2)); }
//;
//; # get some values from the top
//; my $verif_mode = $self->get_top_param('VERIF_MODE'); # Reads this parameter from the top level
//; my $synth_mode = $self->get_top_param('SYNTH_MODE'); # Reads this parameter from the top level
//;
//; # module parameters
//; my $frac_width = parameter(Name=>'FractionWidth', Val=>52, 
//;                           Min=>4, Step=>1, 
//;                           Doc=>"Width of the Fraction for the multiplier (default is IEEE Double, 52 bit)  !FUNCTIONAL!");
//; my $exp_width = parameter(Name=>'ExponentWidth', Val=>11, 
//;                           Min=>4, Step=>1, 
//;                           Doc=>"Width of the exponent for the multiplier (default is IEEE Double, 11 bit)  !FUNCTIONAL!");
//; my $enable_forwarding = parameter(Name=>'EnableForwarding', Val=>'YES', List=>['YES', 'NO'],
//; 			   Doc=>"allow forwarding of unrounded A unsing IncA signal");
//;
//; my $enable_denormals = parameter(Name=>'EnableDenormals', Val=>'YES', 
//;                           List=>['YES','NO'], 
//;                           Doc=>"Enable denormals parameters to enable handling denormal values ".
//;                                "of inputs A and B correctly (YES/NO) !FUNCTIONAL!");
//; my $pipeline_depth = parameter(Name=>'PipelineDepth', Val=>3, List=>[ 0,1,2,3,4,5,6,7 ] ,
//;                       Doc=>"Pipeline depth !FUNCTIONAL!");
//;
//; # And some local variables
//; my $manA_width = $frac_width + 1;
//; my $manB_width = 2 * $manA_width;
//; my $ExpB_width = $exp_width + 2;
//; my $shift_width = CeilOfLog2($manB_width+1) + 1;


module `mname` (
  //; if ($verif_mode =~ /ON/){
    input logic dumptolog,
  //; }
    input logic [`$exp_width-1`:0] ExpA,
    input logic [`$frac_width`:0] ManA,
    input logic SignA, InfA, NANA, ZeroA, 
  //; if ($enable_forwarding =~ /YES/){
    input logic IncA,
  //; }
    input logic [`$ExpB_width-1`:0] ExpB, ExpDifference,
    input logic [`$manB_width-1`:0] ManB,
    input logic SignB, InfB, NANB, ZeroB,
    input logic ResultIsClose, ResultMaybeClose, ResultMaybeFar, ExpA_gt_ExpB,
    input logic [2:0] rnd,
  //; if ($pipeline_depth > 0 ) {
    input logic  clk , reset, valid_in, stall,
    output logic  valid_out,
  //; }
    output logic [`$ExpB_width-1`:0] ExpZ_pp0, ExpZ_pp1, ExpZ_pp0_late, ExpZ_pp1_late,
    output logic ExpZ_ci, ExpZ_ci_late,
    output logic [`$exp_width-1`:0] ExpZ,
    output logic [`$frac_width`:0] ManZ,
    output logic SignZ, InfZ, NANZ, ZeroZ, IncZ,
    output [7:0] status,
    output logic ExpZDecrementWhenShifting, ExpZDecrementWhenShifting_late, ShiftZ
               );

  /* synopsys dc_tcl_script_begin
   set_ungroup [current_design] true
   set_flatten true -effort high -phase true -design [current_design]
  */

//; if ( $enable_forwarding =~ /NO/){
  logic IncA;
  assign IncA=0; 
//; }
	
  logic [`$frac_width`:0] ManFarSum , ManCloseDiff, ManSum;
  logic [`$ExpB_width-1`:0] CloseExpbase_pp0, CloseExpbase_pp1, FarExpbase_pp0, FarExpbase_pp1, ExtendedExpA;
  logic [`$exp_width-1`:0] ExpFarSum, ExpCloseDiff, ExpSum;
  logic ZeroSum, ResultIsInfinity, ResultIsNotSpecial, SignSum, Guard, Sticky, SignInfinity, SignZero, ShiftSum, ShiftFarSum, ShiftCloseDiff, CloseExpbase_ci;
  logic SignFarSum, FarGuard, FarSticky, ZeroFarSum, FarOverflow, CloseGuard, CloseSticky, SignCloseDiff, ZeroCloseDiff, CloseOverflow, Overflow, IncSum, subtract;
  logic FX, FV, FU, FI, Tiny;
  logic FI_p2, ResultIsInfinity_p2, ResultIsNotSpecial_p2, SignInfinity_p2, SignZero_p2;
  logic subtract_p, ResultIsClose_p, ResultIsClose_p2;
  logic RndMaxNum, MaxNum;
  logic valid_Result, valid_Result2, valid_A, valid_A2, valid_far, valid_close;
  logic [2:0] rnd_p2;

  assign ExtendedExpA = ExpA;

  
  assign FI = NANA | NANB | (InfA & InfB & (SignA!=SignB));
  assign ResultIsInfinity =   (InfA | InfB) & ~FI;
  assign ResultIsNotSpecial = ~InfA & ~InfB & ~NANA & ~NANB;
  assign SignInfinity = InfA ? SignA : SignB;
  assign SignZero = SignA & SignB;
  assign subtract = (SignA ^ SignB) & ~ZeroA & ~ZeroB;

//; if ($pipeline_depth > 0 ) {
//;   my $pipeMisc = generate(  'FF_pipeline',  'pipe_misc',  Width=> 8, PipelineDepth => $pipeline_depth, Retime=>'YES');
  `$pipeMisc ->instantiate()` ( .in({FI, ResultIsInfinity, ResultIsNotSpecial, SignInfinity, SignZero, rnd}) ,
                                .valid_in(valid_in), .clk(clk) , .stall(stall), .reset(reset), 
                                .out({FI_p2, ResultIsInfinity_p2, ResultIsNotSpecial_p2, SignInfinity_p2, SignZero_p2, rnd_p2}),
                                .valid_out(valid_out) );


//;   my $pipeMisc2 = generate(  'FF_pipeline',  'pipe_misc_short',  Width=> 2, PipelineDepth => $pipeline_depth-1, Retime=>'YES');
  `$pipeMisc2->instantiate()` ( .in({subtract, ResultIsClose}) ,
                                .valid_in(valid_in), .clk(clk) , .stall(stall), .reset(reset), 
                                .out({subtract_p, ResultIsClose_p}),
                                .valid_out(valid_Result) );

//;   my $pipeMisc3 = generate(  'FF_pipeline',  'pipe_misc_one',  Width=> 2*$ExpB_width+3, PipelineDepth => ($pipeline_depth>0?1:0), Retime=>'YES');
  `$pipeMisc3->instantiate()` ( .in({ResultIsClose_p, ExpZ_pp0, ExpZ_pp1, ExpZ_ci, ExpZDecrementWhenShifting}) ,
                                .valid_in(valid_Result), .clk(clk) , .stall(stall), .reset(reset), 
                                .out({ResultIsClose_p2, ExpZ_pp0_late, ExpZ_pp1_late, ExpZ_ci_late, ExpZDecrementWhenShifting_late}),
                                .valid_out(valid_Result2) );

//; } else {
  assign {FI_p2, ResultIsInfinity_p2, ResultIsNotSpecial_p2, SignInfinity_p2, SignZero_p2, rnd_p2} = {FI, ResultIsInfinity, ResultIsNotSpecial, SignInfinity, SignZero, rnd};
  assign {subtract_p, ResultIsClose_p} = {subtract, ResultIsClose};
  assign {ResultIsClose_p2, ExpZ_pp0_late, ExpZ_pp1_late, ExpZ_ci_late, ExpZDecrementWhenShifting_late} = {ResultIsClose_p, ExpZ_pp0, ExpZ_pp1, ExpZ_ci, ExpZDecrementWhenShifting};
//; }

//; my $FarPathAdd_obj = generate('FarPathAdd', 'FPA', 
//;                               , FractionWidth => $frac_width
//;                               , ExponentWidth => $exp_width
//;                               , PipelineDepth => $pipeline_depth
//;                               , useInc => $enable_forwarding
//;                               , EnableDenormals => $enable_denormals);

  `$FarPathAdd_obj->instantiate()` (.ManA_in(ManA), .ExpA_in(ExtendedExpA), .SignA_in(SignA), .ZeroA_in(ZeroA),
  //; if ($enable_forwarding =~ /YES/){
                                    .IncA_in(IncA),
  //; }
                                    .ManB_in(ManB), .ExpB_in(ExpB), .SignB_in(SignB), .ZeroB_in(ZeroB),
                                    .ExpDifference_in(ExpDifference) , .ExpA_gt_ExpB_in(ExpA_gt_ExpB),
  //; if ($pipeline_depth > 0 ) {
                                    .valid_in(valid_in & ResultMaybeFar ), .stall(stall), .clk(clk) , .reset(reset),
                                    .valid_out(valid_far),
  //; }
                                    .ManSum_out(ManFarSum), .ExpSum_out(ExpFarSum), .SignSum_out(SignFarSum), .ZeroSum_out(ZeroFarSum),
                                    .Guard_out(FarGuard), .Sticky_out(FarSticky) ,.Overflow_out(FarOverflow) , .ShiftExponent_out(ShiftFarSum), .Expbase_pp0(FarExpbase_pp0), .Expbase_pp1(FarExpbase_pp1)
  //; if ($verif_mode =~ /ON/){
                                    , .dumptolog(dumptolog)
  //; }
                                      );

//; my $ClosePathSub_obj = generate('ClosePathSub', 'CPS', 
//;                               , FractionWidth => $frac_width
//;                               , ExponentWidth => $exp_width
//;                               , PipelineDepth => $pipeline_depth
//;                               , useInc => $enable_forwarding
//;                               , EnableDenormals => $enable_denormals);

  `$ClosePathSub_obj->instantiate()` ( .ManA_in(ManA), .ExpA_in(ExtendedExpA), .SignA_in(SignA),
                                       .ManB_in(ManB), .ExpB_in(ExpB), .SignB_in(SignB),
  //; if ($enable_forwarding =~ /YES/){
                                       .IncA_in(IncA),
  //; }
  //; if ($pipeline_depth > 0 ) {
                                       .valid_in(valid_in & ResultMaybeClose ),
                                       .stall(stall), .clk(clk) , .reset(reset),
                                       .valid_out(valid_close),
  //; }
                                       .ManDiff_out(ManCloseDiff), .ExpDiff_out(ExpCloseDiff), .Overflow_out(CloseOverflow),
                                       .SignDiff_out(SignCloseDiff) , .ZeroDiff_out(ZeroCloseDiff),
                                       .Guard_out(CloseGuard), .Sticky_out(CloseSticky),
                                       .Expbase_pp0(CloseExpbase_pp0), .Expbase_pp1(CloseExpbase_pp1), .Expbase_ci(CloseExpbase_ci),
                                       .LZA_wrong_out(ShiftCloseDiff)
  //; if ($verif_mode =~ /ON/){
                                       , .dumptolog(dumptolog)
  //; }
                                      );




  assign {ExpZ_pp0, ExpZ_pp1, ExpZ_ci, ExpZDecrementWhenShifting} = ResultIsClose_p?
                                                             {CloseExpbase_pp0, CloseExpbase_pp1, CloseExpbase_ci, 1'b0}
                                                           : {FarExpbase_pp0 , FarExpbase_pp1 , 1'b0, subtract_p};

  assign {ManSum, ExpSum, SignSum, Guard, Sticky, ZeroSum, Overflow , ShiftSum} = 
                    ResultIsClose_p2?
                    {ManCloseDiff, ExpCloseDiff, SignCloseDiff, CloseGuard, CloseSticky, ZeroCloseDiff, CloseOverflow, ShiftCloseDiff}
                   :{ManFarSum   , ExpFarSum, SignFarSum   , FarGuard  , FarSticky  , ZeroFarSum   , FarOverflow, ShiftFarSum};

//; my $rnd_obj = generate('Rndlogic', 'Rndlgc');
  `$rnd_obj->instantiate()` (.rnd(rnd_p2), .Sign(SignSum), .LSB(ManSum[0]), .Guard(Guard), .Sticky(Sticky), .Inc(IncSum), .MaxNum(RndMaxNum));

  assign FX = ResultIsNotSpecial_p2 & (Guard | Sticky| Overflow);
  assign FV = Overflow & ResultIsNotSpecial_p2;
  assign FU = ZeroSum & FX;
  assign MaxNum =  FV & RndMaxNum;

  //assign Tiny = denormSum & (FinalSum!=0);
  assign Tiny = 0;

  assign status = {2'b0, FX, FV, Tiny, FI_p2, ResultIsInfinity_p2, ZeroSum};

  assign ManZ = (ManSum & {(`$frac_width+1`){ ~ (ZeroSum| FI_p2| ResultIsInfinity_p2| FV)}}) 
              ^ { (FI_p2 | ResultIsInfinity_p2 | FV) , {(`$frac_width`){FI_p2 | MaxNum & (ResultIsInfinity_p2|FV)}} };
  assign ExpZ = (ExpSum & {(`$exp_width`){ ~ (ZeroSum| FI_p2| ResultIsInfinity_p2| FV)}}) 
              ^ { {(`$exp_width-1`){(FI_p2| ResultIsInfinity_p2|FV)}}, FI_p2 | ((ResultIsInfinity_p2|FV)?~MaxNum :ZeroSum)};

  assign {ShiftZ, InfZ, NANZ, ZeroZ, IncZ, SignZ} = FI_p2 ? 6'b001000
                                  : (ResultIsInfinity_p2|FV) ?
                                      {5'b01000, SignInfinity_p2}
                                    : { ShiftSum , 2'b00, ZeroSum, IncSum, (ZeroSum?SignZero_p2:SignSum)};

//; if ($verif_mode =~ /ON/){
  // synopsys translate_off
  always @(posedge dumptolog)
  begin
    $display ("`$self->get_instance_path()`: ZeroC=%b InfC=%b ExpC=%h ManC=%h IncC=%b", ZeroA, InfA, ExpA, ManA, IncA);
    $display ("`$self->get_instance_path()`: ExpDifference=%d ResultIsInfinity_p2 =%b ResultIsNotSpecial_p2 =%b, ResultIsClose_p2=%b",ExpDifference, ResultIsInfinity_p2,ResultIsNotSpecial_p2, ResultIsClose_p2);
    $display ("`$self->get_instance_path()`: FU =%b , FV =%b ,FI =%b ,FX =%b, LSB=%b, Guard=%b, Sticky=%b, IncSum =%b Overflow=%b FarOverflow=%b",FU, FV , FI,FX, ManSum[0], Guard, Sticky, IncSum,Overflow,FarOverflow);
    $display ("`$self->get_instance_path()`: ManZ=%h ExpZ=%h ShiftZ=%h InfZ=%h NANZ=%h ZeroZ=%h  IncZ=%h  SignZ=%h", ManZ, ExpZ, ShiftZ, InfZ, NANZ, ZeroZ, IncZ, SignZ);
  end
  // synopsys translate_on
//; }
endmodule : `mname`

