/*************************************************************************
 ** From Perforce:
 **
 ** $Id$
 ** $DateTime$
 ** $Change$
 ** $Author$
 *************************************************************************/

/* *****************************************************************************
 * Description:
 * This is a Wallace summation tree for PPCount partial products of PPWidth width.
 * 
 *                  FIXME OFER: merge sum and carry using DW01_csa
 * 
 * Parameters:
 * * PPWidth, BoothType, PPCount
 * 
 * Change bar:
 * -----------
 * Date           Author    Description
 * Oct 04, 2011   shacham   init version - ported my original no booth wallace
 * 
 * ****************************************************************************/

/*******************************************************************************
 * PARAMETERIZATION
 * ****************************************************************************/
//; # Perl Libraries
//; use POSIX qw(floor); # For floor rounding math
//;
//; # get some values from the top
//; my $verif_mode = $self->get_top_param('VERIF_MODE'); # Reads this parameter from the top level
//; my $synth_mode = $self->get_top_param('SYNTH_MODE'); # Reads this parameter from the top level
//;
//; # module parameters
//; my $pp_width = parameter(Name=>'PPWidth', Val=>4, Min=>2, Step=>1,
//;                          Doc=>"Bit width of the partial products");
//; my $pp_count = parameter(Name=>'PPCount', Val=>4, Min=>2, Step=>1,
//;                          Doc=>"Number of partial products to sum");
//; my $booth = parameter(Name=>'BoothType', Val=>1, Min=>1, Max=>3, Step=>1,
//;                       Doc=>"What booth was used to create the partial products? ".
//;                            "(This determines the slope of the partial products ".
//;                            "paralleloid)");
//;
//; # Some variables initialization
//; my $hight = $pp_count;
//; my $width = $pp_width + $booth*($pp_count-1);  # add a booth width for every extra partial product
//; my $final_width = $width;

module `mname()` ( 
   //; if ($verif_mode =~ /ON/){
    input logic dumptolog,
   //; }
    input logic [`$pp_width-1`:0] pp [0:`$pp_count-1`],
    output [`$width-1`:0] out0,out1
   );

   //; my $step = 0;
   // make pps rectangular (insert 0s!)  
   logic [`$width-1`:0]   pp0_step`$step`;
   assign pp0_step`$step` = {{(`$width-$pp_width`){1'b0}}, pp[0]};
   //; for (my $i=1; $i<$pp_count; $i++) {
   logic [`$width-1`:0] 	      pp`$i`_step`$step`;
   assign pp`$i`_step`$step` = {{(`$width-$pp_width-$i*$booth`){1'b0}}, pp[`$i`], {`$i*$booth`{1'b0}}};
   //; }


   //; while($hight > 2){
   //;   $step++; $width++;
   // STARTING TREE REDUCTION STEP `$step`
   // Sum:
   //;   for (my $i=0; $i < floor($hight/3); $i++){
   logic [`$width-1`:0]       pp`$i`_step`$step`;
   assign pp`$i`_step`$step` = {1'b0, // pad with a zero
				pp`3*$i`_step`$step-1` ^ 
				pp`3*$i+1`_step`$step-1` ^ 
				pp`3*$i+2`_step`$step-1`
				};   
   //;   } # end of "for (my $i..."

   // Carry:
   //;   for (my $i=0; $i < floor($hight/3); $i++){
   //;     my $idx = $i + floor($hight/3);
   logic [`$width-1`:0] pp`$idx`_step`$step`;
   assign pp`$idx`_step`$step` = {(pp`3*$i`_step`$step-1` & pp`3*$i+1`_step`$step-1`) | 
				  (pp`3*$i+1`_step`$step-1` & pp`3*$i+2`_step`$step-1`) |
				  (pp`3*$i`_step`$step-1` & pp`3*$i+2`_step`$step-1`),
				  1'b0 // pad with a zero
				  };
   //;   } # end of "for (my $i..."   
   
   // Left overs:
   //;   for (my $i=0; $i < $hight%3; $i++){
   //;     my $old_idx = $i + 3*floor($hight/3);
   //;     my $new_idx = $i + 2 * floor($hight/3);
   logic [`$width-1`:0] pp`$new_idx`_step`$step`;
   assign pp`$new_idx`_step`$step` = {1'b0, pp`$old_idx`_step`$step-1`};
   //;   } # end of "for (my $i..."
   //; $hight = 2 * floor($hight/3) + $hight%3;
   // END TREE REDUCTION STEP `$step`

   
   //; } # end of "while($hight > 2)..."

   // Ignore all the top bits and assign final PPs to output
   assign out0 = pp0_step`$step`[`$final_width-1`:0];
   assign out1 = pp1_step`$step`[`$final_width-1`:0];
   
   
endmodule : `mname` 