
/*************************************************************************
 ** From Perforce:
 **
 ** $Id: //Smart_design/ChipGen/FP-Gen/rtl/FPIncrementer.vp#1 $
 ** $DateTime: 2012/5/12 22:02:13 $
 ** $Change: 9979 $
 ** $Author: sameh06 $
 *************************************************************************/

/* *****************************************************************************
 * Description:
 * ------------
 * Incrementer: increments the significand by 1,
 * 
 * Parameters:
 * ------------
 * * FractionWidth, ExponentWidth
 * 
 * 
 * Change bar:
 * -----------
 * Date           Author    Description
 * Jan 24, 2012   sameh06   init version - 
 *                          
 * ****************************************************************************/

/*******************************************************************************
 * PARAMETERIZATION
 * ****************************************************************************/
//; # Perl Libraries
//; use POSIX qw(ceil log); # For ceiling rounding and log math
//; sub CeilOfLog2{ return ceil(log(@_)/log(2)); }
//;
//; # get some values from the top
//; my $verif_mode = $self->get_top_param('VERIF_MODE'); # Reads this parameter from the top level
//; my $synth_mode = $self->get_top_param('SYNTH_MODE'); # Reads this parameter from the top level

//;
//; # module parameters
//; my $frac_width = parameter(Name=>'FractionWidth', Val=>52, 
//;                           Min=>4, Step=>1, 
//;                           Doc=>"Width of the Fraction for the multiplier (default is IEEE Double, 52 bit) !FUNCTIONAL!");
//; my $exp_width = parameter(Name=>'ExponentWidth', Val=>11, 
//;                           Min=>4, Step=>1, 
//;                           Doc=>"Width of the exponent for the multiplier (default is IEEE Double, 11 bit) !FUNCTIONAL!");

module `mname` (
   //; if ($verif_mode =~ /ON/){
    input logic dumptolog,
   //; }
    input logic SignA,
    input logic [`$exp_width-1`:0] ExpA,
    input logic [`$frac_width`:0] ManA,
    input logic denormA , IncA,
    output logic [`$exp_width + $frac_width`:0] out);

  logic [`$frac_width`:0] ManInc;
  logic [`$exp_width-1`:0] ExpInc;
  logic IncExpA, overflow;	
  assign {IncExpA, ManInc} = ManA + 1;
  assign {overflow, ExpInc} = ExpA + 1;

  assign out[`$exp_width + $frac_width`] = SignA;
  assign out[`$exp_width + $frac_width-1`:`$frac_width+1`] = (IncA & IncExpA)? ExpInc[`$exp_width-1`:1]: ExpA[`$exp_width-1`:1];
  assign out[`$frac_width`] =  IncA? (IncExpA? ExpInc[0] : ManInc[`$frac_width`] & ExpA[0]): ManA[`$frac_width`] & ExpA[0];
  assign out[`$frac_width-1`:0] = IncA? ManInc[`$frac_width-1`:0] : ManA[`$frac_width-1`:0];

//; if( $verif_mode eq 'ON' ){
// synopsys translate_off
always @(posedge dumptolog)
begin
    $display ("out=%h", out);
end
// synopsys translate_on
//; }
   
endmodule

