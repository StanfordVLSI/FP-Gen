/*************************************************************************
 ** From Perforce:
 **
 ** $Id: //Smart_design/ChipGen/FP-Gen/rtl/ExponentDifference.vp#1 $
 ** $DateTime: 2012/02/08 11:27:28 $
 ** $Change: 10078 $
 ** $Author: jbrunhav $
 *************************************************************************/

/* *****************************************************************************
 * Description:
 * Exponent difference unit
 * 
 * 
 * Parameters:
 * * Width
 * 
 * Change bar:
 * -----------
 * Date           Author    Description
 * Oct 13, 2011   sameh   init version - ported Sameh's original code to 
 *                          genesis
 * ****************************************************************************/

/*******************************************************************************
 * PARAMETERIZATION
 * ****************************************************************************/
//; # Perl Libraries
//; use POSIX qw(ceil log); # For ceiling rounding and log math
//; sub CeilOfLog2{ return ceil(log(@_)/log(2)); }
//;
//; # get some values from the top
//; my $verif_mode = $self->get_top_param('VERIF_MODE'); # Reads this parameter from the top level
//; my $synth_mode = $self->get_top_param('SYNTH_MODE'); # Reads this parameter from the top level
//;
//; # module parameters
//; my $exp_width = parameter(Name=>'ExponentWidth', Val=>11, 
//;                           Min=>4, Step=>1, 
//;                           Doc=>"Width of the exponent for the multiplier (default is IEEE Double, 11 bit)  !FUNCTIONAL!");
//;
//; # And some local variables
//; my $ExtendedExp_width = $exp_width + 2;

module `mname`(
 //; if ($verif_mode =~ /ON/){
  input logic dumptolog,
 //; }
  input logic [`$ExtendedExp_width-1`:0] ExpA_pp0, ExpA_pp1, ExpB, 
  input logic ExpADecrementWhenShifting, SignA, ShiftA,  SignB, 
  output logic [`$ExtendedExp_width-1`:0] ExpDifference,
  output logic ResultIsClose, ExpB_gt_ExpA);

  logic [`$ExtendedExp_width-1`:0] ExpDiff_pp0, ExpDiff_pp1, ExpA_ExpB_3, ExpA_ExpB_2, ExpA_ExpB_1, ExpA_ExpB, ExpA_ExpB_plus1, ExpDiffDec, ExpDiff, ExpDiffInc, ExpDiffShifted;

  logic co_dummy0, co_dummy1, co_dummy2, co_dummy3, co_dummy4;

  // ExpA_pp0 + ExpA_pp1 = ExpA - 1

  DW01_csa #(`$ExtendedExp_width`) CSA ( .a( ExpA_pp0), .b( ExpA_pp1), .c(~ExpB), .ci(1'b0), .sum(ExpDiff_pp0), .carry(ExpDiff_pp1), .co(co_dummy0 ));


 // ExpDiff_pp0 + ExpDiff_pp1 = (ExpA-1)  + ~ExpB = ExpA - ExpB - 2 

  assign ExpA_ExpB_3 = ExpDiff_pp0 + ExpDiff_pp1 - 1;


//; my $CompoundAdder_obj = generate('CompoundAdder', 'CA0', 
//;                                                 , Width =>$ExtendedExp_width
//;                                                 , EnableCarryIn => 'ON'
//;                                                 , ZeroWidth => 0);

  `$CompoundAdder_obj->instantiate()`  (.a(ExpDiff_pp0), .b(ExpDiff_pp1), 
                                   .sum0(ExpA_ExpB_2), .co0(co_dummy1),
                                   .sum1(ExpA_ExpB_1), .co1(co_dummy2));

  //Half adder for a+b+2
  assign ExpA_ExpB = ExpDiff_pp0 + ExpDiff_pp1 + 2;
  assign ExpA_ExpB_plus1 = ExpDiff_pp0 + ExpDiff_pp1 + 3;

  

  assign ExpB_gt_ExpA = ExpA_ExpB[`$ExtendedExp_width-1`];


  assign ExpDiffDec = ExpB_gt_ExpA? ~ExpA_ExpB_2 : ExpA_ExpB_1;
  assign ExpDiff    = ExpB_gt_ExpA? ~ExpA_ExpB_1 : ExpA_ExpB;
  assign ExpDiffInc = ExpB_gt_ExpA? ~ExpA_ExpB   : ExpA_ExpB_plus1;

  assign ExpDiffShifted =   ExpADecrementWhenShifting? ExpDiffDec : ExpDiffInc;

  assign ExpDifference = ShiftA? ExpDiffShifted : ExpDiff;

  assign ResultIsClose = ((SignA ^ SignB) & (~|ExpDifference[`$ExtendedExp_width-1`:2])) & ~(ExpDifference[1] & ExpDifference[0]) ; //0-2

//; if ($verif_mode =~ /ON/){
// synopsys translate_off
always @(posedge dumptolog)
begin
    $display ("`$self->get_instance_path()`: ExpA_pp0=%h ExpA_pp1=%h ExpB=%h",ExpA_pp0, ExpA_pp1, ExpB);
    $display ("`$self->get_instance_path()`: ExpA_ExpB_2=%h ExpA_ExpB_1=%h ExpA_ExpB=%h ExpA_ExpB_plus1=%h ExpB_gt_ExpA=%b", ExpA_ExpB_2, ExpA_ExpB_1, ExpA_ExpB, ExpA_ExpB_plus1, ExpB_gt_ExpA);
    $display ("`$self->get_instance_path()`: ExpDifference=%d ResultIsClose=%b",ExpDifference, ResultIsClose);
end
// synopsys translate_on
//; }

endmodule



