/*************************************************************************
 ** From Perforce:
 **
 ** $Id: //Smart_design/ChipGen/FP-Gen/rtl/ExponentDifference.vp#1 $
 ** $DateTime: 2012/02/08 11:27:28 $
 ** $Change: 10078 $
 ** $Author: jbrunhav $
 *************************************************************************/

/* *****************************************************************************
 * Description:
 * Exponent difference unit
 * 
 * 
 * Parameters:
 * * Width
 * 
 * Change bar:
 * -----------
 * Date           Author    Description
 * Oct 13, 2011   sameh   init version - ported Sameh's original code to 
 *                          genesis
 * ****************************************************************************/

/*******************************************************************************
 * PARAMETERIZATION
 * ****************************************************************************/
//; # Perl Libraries
//; use POSIX qw(ceil log); # For ceiling rounding and log math
//; sub CeilOfLog2{ return ceil(log(@_)/log(2)); }
//;
//; # get some values from the top
//; my $verif_mode = $self->get_top_param('VERIF_MODE'); # Reads this parameter from the top level
//; my $synth_mode = $self->get_top_param('SYNTH_MODE'); # Reads this parameter from the top level
//;
//; # module parameters
//; my $exp_width = parameter(Name=>'ExponentWidth', Val=>11, 
//;                           Min=>4, Step=>1, 
//;                           Doc=>"Width of the exponent for the multiplier (default is IEEE Double, 11 bit)  !FUNCTIONAL!");
//;
//; # And some local variables
//; my $ExtendedExp_width = $exp_width + 2;

module `mname`(
 //; if ($verif_mode =~ /ON/){
  input logic dumptolog,
 //; }
  input logic [`$ExtendedExp_width-1`:0] ExpA_pp0, ExpA_pp1, ExpB,
  input logic ExpA_ci,
  input logic ExpADecrementWhenShifting, SignA, ShiftA,  SignB, 
  output logic [`$ExtendedExp_width-1`:0] ExpDifference,
  output logic ResultIsClose, ExpA_gt_ExpB);

  logic [`$ExtendedExp_width-1`:0] ExpDiff_pp0, ExpDiff_pp1, ExpA_ExpB_2, ExpA_ExpB_1, ExpA_ExpB, ExpA_ExpB_plus1, ExpDiffDec, ExpDiff, ExpDiffInc, ExpDiffShifted;

  logic ExpA_gt_ExpB_shifted, ExpDiff_Upper0s, ExpDiff_Upper1s, co_dummy0, co_dummy1, co_dummy2, co_dummy3, co_dummy4;

  // ExpA_pp0 + ExpA_pp1 + ExpA_ci = ExpA - 1

  DW01_csa #(`$ExtendedExp_width`) CSA ( .a( ExpA_pp0), .b( ExpA_pp1), .c(~ExpB), .ci(ExpA_ci), .sum(ExpDiff_pp0), .carry(ExpDiff_pp1), .co(co_dummy0 ));


 // ExpDiff_pp0 + ExpDiff_pp1 = (ExpA-1)  + ~ExpB = ExpA - ExpB - 2 


//; my $CompoundAdder_obj = generate('CompoundAdder', 'CA0', 
//;                                                 , Width =>$ExtendedExp_width
//;                                                 , EnableCarryIn => 'OFF'
//;                                                 , ZeroWidth => 0);

  `$CompoundAdder_obj->instantiate()`  (
      //; if ($verif_mode =~ /ON/){
       .dumptolog(dumptolog),
      //; }
       .a(ExpDiff_pp0), .b(ExpDiff_pp1), 
       .sum0(ExpA_ExpB_2), .co0(co_dummy1),
       .sum1(ExpA_ExpB_1), .co1(co_dummy2));

  //Half adder for a+b+2
  assign ExpA_ExpB = ExpDiff_pp0 + ExpDiff_pp1 + 2;
  assign ExpA_ExpB_plus1 = ExpDiff_pp0 + ExpDiff_pp1 + 3;

// Result is close if expdiff is in the range of [0,2]: therefore we have following cases for result of ExpA-ExpB-2
// a) ExpDifference = ExpB-ExpA-1    ---->   [-5,-3]
// b) ExpDifference = ExpB-ExpA      ---->   [-4,-2]
// c) ExpDifference = ExpB-ExpA+1    ---->   [-3,-1]
// d) ExpDifference = ExpA-ExpB+1    ---->   [-3,-1]
// e) ExpDifference = ExpA-ExpB      ---->   [-2, 0]
// f) ExpDifference = ExpA-ExpB-1    ---->   [-1, 1]

 //; my $SC0_obj = generate('SumComparator', 'SC0', Width => $ExtendedExp_width-4);
   `$SC0_obj->instantiate` (.a(ExpDiff_pp0[`$ExtendedExp_width-1`:4]), .b(ExpDiff_pp1[`$ExtendedExp_width-1`:4]), .sum({ (`$ExtendedExp_width-4`){1'b0}}), .equal(ExpDiff_Upper0s));
 //; my $SC1_obj = generate('SumComparator', 'SC1', Width => $ExtendedExp_width-4);
   `$SC1_obj->instantiate` (.a(ExpDiff_pp0[`$ExtendedExp_width-1`:4]), .b(ExpDiff_pp1[`$ExtendedExp_width-1`:4]), .sum({ (`$ExtendedExp_width-4`){1'b1}}), .equal(ExpDiff_Upper1s));
  
  assign ExpDiffDec = ExpA_ExpB_1[`$ExtendedExp_width-1`]?     ~ExpA_ExpB_2 : ExpA_ExpB_1; 
  assign ExpDiff    = ExpA_ExpB[`$ExtendedExp_width-1`]?       ~ExpA_ExpB_1 : ExpA_ExpB;
  assign ExpDiffInc = ExpA_ExpB_plus1[`$ExtendedExp_width-1`]? ~ExpA_ExpB   : ExpA_ExpB_plus1;

  assign {ExpA_gt_ExpB_shifted, ExpDiffShifted} =   ExpADecrementWhenShifting? 
                                                   {~ExpA_ExpB_2[`$ExtendedExp_width-1`],ExpDiffDec} 
                                                 : {~ExpA_ExpB[`$ExtendedExp_width-1`],ExpDiffInc};

  assign {ExpA_gt_ExpB, ExpDifference} = ShiftA? {ExpA_gt_ExpB_shifted, ExpDiffShifted} 
                                               : {~ExpA_ExpB_1[`$ExtendedExp_width-1`] , ExpDiff};

  assign ResultIsClose = ((SignA ^ SignB) & ( ExpDiff_Upper0s | ExpDiff_Upper1s ) & (~|ExpDifference[4:2])) & ~(ExpDifference[1] & ExpDifference[0]) ; //0-2

//; if ($verif_mode =~ /ON/){
// synopsys translate_off
always @(posedge dumptolog)
begin
    $display ("`$self->get_instance_path()`: ExpA_pp0=%h ExpA_pp1=%h ExpB=%h",ExpA_pp0, ExpA_pp1, ExpB);
    $display ("`$self->get_instance_path()`: ExpA_ExpB_2=%h ExpA_ExpB_1=%h ExpA_ExpB=%h ExpA_ExpB_plus1=%h ExpA_gt_ExpB=%b", ExpA_ExpB_2, ExpA_ExpB_1, ExpA_ExpB, ExpA_ExpB_plus1, ExpA_gt_ExpB);
    $display ("`$self->get_instance_path()`: ExpDifference=%d ResultIsClose=%b",ExpDifference, ResultIsClose);
end
// synopsys translate_on
//; }

endmodule



