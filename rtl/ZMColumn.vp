/*************************************************************************
 ** From Perforce:
 **
 ** $Id: //Smart_design/ChipGen/FP-Gen/rtl/ZM_Column.vp#1 $
 ** $DateTime: 2011/11/07 22:38:49 $
 ** $Change: 9561 $
 ** $Author: artem $
 *************************************************************************/

/* *****************************************************************************
 * Description:
 * This is a ZM_Column that process a vertical slice in multiplication tree 
 * using a ZM tree architecture
 *
 * Parameters:
 * * ColumnHight, ColumnPosition, MinRow, BoothType, OneLessCarryIn, LayoutShape
 * 
 *
 * Inputs:
 * * Given that N=ColumnHight
 * * [N-1:0] pp                 
 * * [(N-3)-1:0] ci   (Note: if OneLessCarryIn then we have one less ci)
 *  
 * Outputs:
 * * sum
 * * carry
 * * [(N-3)-1:0] co
 *
 * Change bar:
 * -----------
 * Date           Author    Description
 * Nov 07, 2011   Artem     initial version
 * Nov 25, 2011   Artem     Added new abstraction using CarryInFlag=OneMissing/Normal/
 * 			    OneExtra/TwoExtra 
 * Nov 28, 2011   Artem     New abstraction using refference
 * Feb 28, 2012   Artem     Changed ci[] connection to produce min critical path
 *
 * ****************************************************************************/

/* Zuras-McAllister "Balanced Delay Trees and Combinatorial Division in VLSI" ISSJ '86


n   array     depth
-------------------
2   -           0
3   3           1 
4   4           2 
5   5           3 
6   3,3         3 
7   4,3         4 
8   4,4         4          
9   3,3,3       5         
10  3,3,4       5        
11  3,3,5       5       
12  4,4,4       6        
13  4,4,5       6 
14  4,4,6       6  
15  3,3,5,4     7  
16  3,3,5,5     7  
17  3,3,5,6     7 
18  3,3,5,7     7 
19  4,4,6,5     8 
20  4,4,6,6     8 
21  4,4,6,7     8 
22  4,4,6,8     8  
23  3,3,5,7,5   9  
24  3,3,5,7,6   9 
25  3,3,5,7,7   9 
26  3,3,5,7,8   9 
27  3,3,5,7,9   9 
28  4,4,6,8,6  10  

detect n at which the number of arrays increases:

n = 1 + (4+4+6+8+10+12+.....+d-1) = 3 + Sigma ( x -> 1:(d-1)/2 , 2x) = 3 + 0.25 (d-1)*(d+1) 
d^2 - 4n + 11 = 0

d = sqrt(4*n-11) = (4*n-11)**0.5
array_count = (d+1)/2 = ((4*n-11)**0.5+1)/2

now we need to detect if we are using even or odd arrays by comparing n to the n_odd limit

n_odd = 3+3+5+7+...+2*array_count-1 = 2 + Sigma ( x -> 1:array_count , 2x-1) = 2 + array_count^2

n_odd : 6, 11, 18, 27


*/




/*******************************************************************************
 * PARAMETERIZATION
 * ****************************************************************************/
//; # Perl Libraries
//; use POSIX qw(floor ceil); # For floor and ceiling rounding math 
//;
//; # get some values from the top
//; my $verif_mode = $self->get_top_param('VERIF_MODE'); # Reads this parameter from the top level
//; my $synth_mode = $self->get_top_param('SYNTH_MODE'); # Reads this parameter from the top level
//;
//; # module parameters
//; my $pp_count = parameter(Name=>'PPCount', Val=>4, Min=>0, Step=>1,
//;                          Doc=>"Number of partial products to sum");
//; my $col = parameter(Name=>'ColumnPosition', Val=>0, Min=>0, Step=>1,
//;                          Doc=>"The column number");
//; my $min_row = parameter(Name=>'MinRow', Val=>0, Min=>0, Step=>1,
//;                          Doc=>"The starting row position");
//; my $booth = parameter(Name=>'BoothType', Val=>1, Min=>1, Max=>4, Step=>1,
//;                       Doc=>"What booth was used to create the partial products? ".
//;                            "(This determines the slope of the partial products ".
//;                            "paralleloid)");
//; my $prev_col = parameter(Name=>'PrevColumn', Val=>-1, 
//;			     Doc=>"Pointer to the previous column of the multiplier ".
//;				  "(must be assigned or set to zero at instantiation!)");
//; $self->error("Parameter PrevColumn must be assigned with a pointer to a Wallace column or 0 (zero)!")
//;          unless $prev_col || $prev_col==0;
//;
//; my $layout_shape = parameter(Name=>'LayoutShape',Val=>'Square', List=>['Square','Parallelogram'],
//;                              Doc=>"Hints for layout positioning (Supported layouts: Square, Parallelogram)");
//;
//;
//;
//; my $ci_w = 0;
//; if ($prev_col){
//;     $ci_w = $prev_col->get_param('CarryOutWidth');
//; }
//; 
//
//;     my $co_w = $pp_count-3;
//; if($ci_w == $pp_count-1){
//;     $co_w =$ci_w-1;
//; }elsif($ci_w == $pp_count-2){
//;     $co_w =$ci_w;
//;}
//;
//; my $pp_count_eff = $co_w+3;
//
//co_w=`$co_w` pp_count_eff="`$pp_count_eff`"
//
//; 
//; my $col_ht = $pp_count_eff;
//;
//; # print STDERR "DEBUG: pp_count=$pp_count, col=$col, min_row=$min_row, booth=$booth, ci_w=$ci_w, co_w=$co_w \n";
//DEBUG: pp_count=`$pp_count`, ci_w=`$ci_w`, co_w=`$co_w`


module `mname()` (
    input logic [`$pp_count-1`:0] pp,
//; if($ci_w){
    input logic  [`$ci_w-1`:0] ci,
//; }
//;if($co_w){
    output logic [`$co_w-1`:0] co,
//;}
    output logic sum, carry
   );
   
   //;  my $pp_remain = $pp_count_eff;
   //;  my $array_csa = 0;
   //;
   //;  my $row = $min_row;
   //;  my $Y = $col;
   //;    $Y = $col - $row * $booth  if $layout_shape =~ /Square/;
   //;    $Y = $col if $layout_shape =~ /Parallelogram/;
   //; 
   //; my $put_csa = 1;
   //;
   //;my $array_count = ($col_ht>2) ? floor((sqrt(4*$pp_count_eff-11)+1)/2) : 0; 
   //;$array_count = 1 if ($col_ht==2);
   //;$array_count = 1 if ($col_ht==5);
   //;
   // array_count = `$array_count`;
   //;
   //;  my $pp_index = 0;
   //;  my $ci_index = 0;
   //;  my $co_index = 0;
   //;  my $array_csa_prev = 0;
   //;  my @array_conn =("","","");
   //;  my $csa_cnt = -1;
   //;  my $csa_cnt_prev = 0;
   //;  
   //;  for (my $array=0; $array < $array_count; $array++){
   //;	     my $array_length = ( ($col_ht > 2 + $array_count*$array_count)? ($array==0? 4 : $array==$array_count-1? $col_ht - $array*($array+1)- 2 : 2+2*$array) : ($array==0? 3 : $array==$array_count-1? $col_ht - $array*$array- 2 : 1+2*$array) );
   //;       $array_length = 5 if ($col_ht==5 );
   //;       my $array_csa = $array_length - 2;
   //;       $array_csa = 1 if ($array_length==2);
   
   // array = `$array` , array_length = `$array_length`, array_csa = `$array_csa`;
   //;
   //;       $csa_cnt_prev = $csa_cnt;
   //;
   //;
   //;	     for(my $nodes = 0; $nodes < $array_csa; $nodes++ ){
   //;           $array_conn[0]="";$array_conn[1]="";$array_conn[2]="";
   //;
   //;		     if($nodes == 0){
   //;                   $put_csa = 1;
   //;                   $array_conn[0] = "pp[${pp_index}]";$pp_index++;$pp_remain--;
   //;                   if($pp_index<$pp_count){
   //;                      $array_conn[1] = "pp[${pp_index}]";$pp_index++;$pp_remain--;
   //;                   } else {
   //;                      $put_csa = -1;
      logic pp_`$array`_`$nodes`_s;
      assign pp_`$array`_`$nodes`_s = `$array_conn[0]`;
   //;                   }
   //;
   //;                   if($pp_index<$pp_count){
   //;                      $array_conn[2] = "pp[${pp_index}]";$pp_index++;$pp_remain--;
   //;                   }elsif($ci_w>0 && $ci_w>$co_w){
   //;                      $csa_cnt++;
   //;                      $pp_remain--;
   //;                      $array_conn[2] = "ci[".$csa_cnt."]";$ci_index++;
   //;                   } else {
   //;                      $put_csa = 0;
   //;                   }
   //;
   //;		     } else{
   //;                   $put_csa = 1;
   //;                   if($pp_index<$pp_count) {
   //;			     $array_conn[0] = "pp[${pp_index}]";$pp_index++;$pp_remain--;
   //;                       if($ci_index<$ci_w) {
   //;                           $array_conn[2] = "ci[".$csa_cnt."]";$ci_index++;
   //;                       }else{
   //;                           $put_csa = 0;
   //;                       }
   //;                   } elsif($ci_index<$ci_w) {
   //;                       $array_conn[0] = "ci[".$csa_cnt."]";$ci_index++;$pp_remain--;
   //;
   //;#                        if( ($array_count == 1) && $nodes == ($array_csa-1) && ($ci_index<$ci_w)) {
   //;                        if( ($array_count == 1 && $ci_index<$ci_w) || ($ci_index+2<$ci_w) ) {
   //;                            $csa_cnt++;
   //;                            $array_conn[2] = "ci[".$csa_cnt."]";$ci_index++;
   //;                        } else {
   //;                            $put_csa = 0;
   //;                        }
   //;                   }
   //;
   //;                   $array_conn[1] = "pp_${array}_".($nodes-1)."_s";
   //;		     }
   //;
   //;               if($put_csa!=-1) {
   //;#                  "csa_`${array}`_`${nodes}`_`${row}`_`${Y}`"
   //;                   my $CSA_obj = generate($put_csa?'CSA':'HA', "csa".($csa_cnt+1)."_${row}_${Y}");
   //;                   $csa_cnt++;
   //;
   //;                   $row++;
   //;                   $Y = $col - $row * $booth  if $layout_shape =~ /Square/;
   //;                   $Y = $col if $layout_shape =~ /Parallelogram/;
 
      logic pp_`$array`_`$nodes`_s;
   //;                    if($put_csa){
   //;
      `$CSA_obj->instantiate()` ( .a(`$array_conn[0]`), .b(`$array_conn[2]`), .ci(`$array_conn[1]`),
   //;
   //;                     } else{
      `$CSA_obj->instantiate()` ( .a(`$array_conn[0]`), .b(`$array_conn[1]`),
   //;                     }
   //;
   //;                     if( ($array_count == 1) && $nodes == ($array_csa-1) && ($ci_index==$ci_w)) {
                                  .s(sum), .co(carry) );
   //;                     } else {
                                  .s(pp_`$array`_`$nodes`_s), .co(co[`$co_index`]) );
   //;
   //; 	                   $co_index++;
   //;               }
   //;           } #if( $array_count == 1 && $nodes....
   //;       }# for(my $nodes = 0; $nodes


   //;	     if($array>0) {
   //Merge branch `$array-1` and `$array`
   //;
   //;           $put_csa = 0;
   //;           $array_conn[0]="";$array_conn[1]="";$array_conn[2]="";
   //;
   //;           $array_conn[2]="pp_${array}_".($array_csa-1)."_s";
   //;
   //;           if($array==1) {
   //;               $array_conn[0]="pp_".($array-1)."_".($array_csa_prev-1)."_s";
   //;           } else {
   //;               $array_conn[0]="pp_merge1_".($array-2)."_s";
   //;           } #if($array==1) {
   //;
   //;           if(($ci_index+2)<$ci_w){
   //;               $array_conn[1]="ci[".$csa_cnt."]";$ci_index++;
   //;		     $put_csa = 1;
   //;           }else{
   //;               $csa_cnt = $csa_cnt - 1 if (($ci_index+2)==$ci_w);
   //;           }
   //;
      logic pp_merge_`$array-1`_s;
   //;           if($put_csa){
   //       	     "csa_merge_`${array}`_`${row}`_`${Y}`"
   //;       	     my $CSA_obj = generate('CSA', "csa".($csa_cnt+1)."_${row}_${Y}");
   //;               $csa_cnt++;
   //;
   //;               $row++;
   //;               $Y = $col - $row * $booth  if $layout_shape =~ /Square/;
   //;               $Y = $col if $layout_shape =~ /Parallelogram/;
   //;

      `$CSA_obj->instantiate()` ( .a(`$array_conn[0]`), .b(`$array_conn[1]`), .ci(`$array_conn[2]`),
                                  .s(pp_merge_`$array-1`_s), .co(co[`$co_index`]) );
   //;               $co_index++;
   //;           } else {
   //       	     "csa_merge_`${array}`_`${row}`_`${Y}`"
   //;       	     my $CSA_obj = generate('HA', "csa".($csa_cnt+1)."_${row}_${Y}");
   //;               $csa_cnt++;
   //;
   //;               $row++;
   //;               $Y = $col - $row * $booth  if $layout_shape =~ /Square/;
   //;               $Y = $col if $layout_shape =~ /Parallelogram/;
   //;

      `$CSA_obj->instantiate()` ( .a(`$array_conn[0]`), .b(`$array_conn[2]`),
                                  .s(pp_merge_`$array-1`_s), .co(co[`$co_index`]) );
   //;               $co_index++;
   //;           }#if($put_csa){
   //;
   //;           $array_conn[0]="";$array_conn[1]="";$array_conn[2]="";
   //;           $array_conn[0]="ci[".$csa_cnt_prev."]";$ci_index++;
   //;           $array_conn[1]="ci[".$csa_cnt."]";$ci_index++;
   //;           $array_conn[2]="pp_merge_".($array-1)."_s";
   //;           $put_csa = ($ci_index <= $ci_w);
   //;
   //;	         if($array==($array_count-1) && ($put_csa==0)){
   //;               $ci_index--;
   //       	     "csa_merge1_`${array}`_`${row}`_`${Y}`"
   //;       	     my $CSA_obj = generate('HA', "csa".($csa_cnt+1)."_${row}_${Y}");
   //;               $csa_cnt++;
   //;
   //;               $row++;
   //;               $Y = $col - $row * $booth  if $layout_shape =~ /Square/;
   //;               $Y = $col if $layout_shape =~ /Parallelogram/;
      `$CSA_obj->instantiate()` ( .a(`$array_conn[0]`), .b(`$array_conn[2]`),
                                  .s(sum), .co(carry) );
   //;           } else {
   //       	     "csa_merge1_`${array}`_`${row}`_`${Y}`"
   //;       	     my $CSA_obj = generate('CSA', "csa".($csa_cnt+1)."_${row}_${Y}");
   //;               $csa_cnt++;
   //;
   //;               $row++;
   //;               $Y = $col - $row * $booth  if $layout_shape =~ /Square/;
   //;               $Y = $col if $layout_shape =~ /Parallelogram/;
      `$CSA_obj->instantiate()` ( .a(`$array_conn[0]`), .b(`$array_conn[1]`), .ci(`$array_conn[2]`),
   //;
   //;                       if($array==($array_count-1)) {
                                  .s(sum), .co(carry) );
   //;                       }
   //;                       else {
                                  .s(pp_merge1_`$array-1`_s), .co(co[`$co_index`]) );
   //;                             $co_index++;
   //;                       }# if($array==($array_count-1) 
   //;            }#if($array==($array_count-1) && $co_w==....
   
   
   //;	     }#if($array>0)
   //;
   //;       $array_csa_prev = $array_csa;
   //;}#for (my $array=0; $array 



endmodule

//`$co_index` == `$co_w`
//`$ci_index` == `$ci_w`
//`$pp_index` == `$pp_count`
//pp_remain = `$pp_remain`

//;if($pp_index ==$pp_count && $ci_index==$ci_w && $co_index==$co_w){
//PASS
//;}else{
//FAIL
//;}


//; # Declare the current csa_arr for other modules to use

//; parameter(Name=>'CarryOutWidth', Val=>$co_w, Force=>1,
//;           Doc=>"Number of column carry out signals");

//;# $self->error("The number of constructed co in ZM does not match  $co_index!= $co_w")
//;#          unless $co_index == $co_w;
//;# $self->error("The number of constructed ci in ZM does not match  $ci_index!= $ci_w")
//;#          unless $ci_index == $ci_w;
//;# $self->error("The number of constructed pp in ZM does not match  $pp_index!= $pp_count")
//;#          unless $pp_index == $pp_count;
