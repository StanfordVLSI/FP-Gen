/*************************************************************************
 ** From Perforce:
 **
 ** $Id$
 ** $DateTime$
 ** $Change$
 ** $Author$
 *************************************************************************/

/* *****************************************************************************
 * Description:
 * Sklansky tree module creates group propagate and generate signals P & G from bit proapagate and generate signals p, g
 * Note that G[i] & P[i] are group signals for bits from 0 to i, while g[i] & p[i] are individual signals. 
 * 
 * 
 * Parameters:
 * * Width
 * 
 * Change bar:
 * -----------
 * Date           Author    Description
 * Oct 04, 2011   shacham   init version - ported Sameh's original code to 
 *                          genesis
 * Nov 22, 2011   jingpu    add parameter for radix
 * ****************************************************************************/

/*******************************************************************************
 * PARAMETERIZATION
 * ****************************************************************************/
//; # Perl Libraries
//; use POSIX qw(floor); # For floor rounding math
//;
//; # get some values from the top
//; my $verif_mode = $self->get_top_param('VERIF_MODE'); # Reads this parameter from the top level
//; my $synth_mode = $self->get_top_param('SYNTH_MODE'); # Reads this parameter from the top level
//;
//; # module parameters
//; my $width = parameter(Name=>'Width', Val=>109, Min=>1, Step=>1,
//;                       Doc=>"Signal bit widths");
//; my $radix = parameter(Name=>'Radix', Val=>2, Min=>1, Step=>1, Max=>8,
//;                       Doc=>"Tree radix");
//;
//; # Local Variables
//; my $width_by_radix = floor($width/$radix);

module `mname` (
    input logic [`$width-1`:0] g,p,
    output logic [`$width-1`:0] G,P
		);
   
   //; if ($synth_mode =~ /ON/) {
   /* 
    synopsys dc_tcl_script_begin
    set_ungroup [current_design] true
    set_flatten true -effort high -phase true -design [current_design]
    */
   //; }

   //; if ($width > $radix) {
     // Use internal signals for upper part of the tree:
     logic [`$width-1`:0] G_sub, P_sub;

     // Generate upper and lower trees

     //; for (my $i=0; $i < $radix-1; $i++) {
     //; my $lowerTree_obj = generate('SklanskyAdderTree', "lowerTree_$i", Width=>$width_by_radix);
     `$lowerTree_obj->instantiate()` (.g(g[`($i+1)*($width_by_radix)-1`:`$i*($width_by_radix)`]), 
                                      .p(p[`($i+1)*($width_by_radix)-1`:`$i*($width_by_radix)`]),
				      .G(G_sub[`($i+1)*($width_by_radix)-1`:`$i*($width_by_radix)`]), 
                                      .P(P_sub[`($i+1)*($width_by_radix)-1`:`$i*($width_by_radix)`]) );
     //; }

     //; my $UpperTree_obj = generate('SklanskyAdderTree', 'UpperTree', Width=>$width - $width_by_radix); 
     `$UpperTree_obj->instantiate()` (.g(g[`$width-1`:`($radix-1)*($width_by_radix)`]),
                                      .p(p[`$width-1`:`($radix-1)*($width_by_radix)`]),
     				      .G(G_sub[`$width-1`:`($radix-1)*($width_by_radix)`]),
                                      .P(P_sub[`$width-1`:`($radix-1)*($width_by_radix)`]) );
     //; for (my $i=0; $i < $width_by_radix ; $i++) {
   assign G[`$i`] = G_sub[`$i`];
   assign P[`$i`] = P_sub[`$i`];
     //; } 
     //; for (my $i=$width_by_radix ; $i < ( $radix==2 ? $width : 2*($width_by_radix) ) ; $i++) {
   assign G[`$i`] = G_sub[`$i`] | P_sub[`$i`] & G_sub[`$width_by_radix-1`];
   assign P[`$i`] = P_sub[`$i`] & P_sub[`$width_by_radix-1`];
     //; }
     //; for (my $i=2*($width_by_radix) ; $i < ( $radix<3? 0 : $radix==3 ? $width : 3*($width_by_radix) ) ; $i++) {
   assign G[`$i`] = G_sub[`$i`] | P_sub[`$i`] & G_sub[`2*($width_by_radix)-1`]
                                | P_sub[`$i`] & P_sub[`2*($width_by_radix)-1`] & G_sub[`$width_by_radix-1`];
   assign P[`$i`] = P_sub[`$i`] & P_sub[`2*($width_by_radix)-1`] & P_sub[`$width_by_radix-1`];
     //; }
     //; for (my $i=3*($width_by_radix) ; $i < ( $radix<4? 0 : $radix==4 ? $width : 4*($width_by_radix) ) ; $i++) {
   assign G[`$i`] = G_sub[`$i`] | P_sub[`$i`] & G_sub[`3*($width_by_radix)-1`]
                                | P_sub[`$i`] & P_sub[`3*($width_by_radix)-1`] & G_sub[`2*($width_by_radix)-1`]
                                | P_sub[`$i`] & P_sub[`3*($width_by_radix)-1`] & P_sub[`2*($width_by_radix)-1`] & G_sub[`$width_by_radix-1`];
   assign P[`$i`] = P_sub[`$i`] & P_sub[`3*($width_by_radix)-1`] & P_sub[`2*($width_by_radix)-1`] & P_sub[`$width_by_radix-1`];
     //; }
     //; for (my $i=4*($width_by_radix) ; $i < ( $radix<5? 0 : $radix==5 ? $width : 5*($width_by_radix) ) ; $i++) {
   assign G[`$i`] = G_sub[`$i`] | P_sub[`$i`] & G_sub[`4*($width_by_radix)-1`]
                                | P_sub[`$i`] & P_sub[`4*($width_by_radix)-1`] & G_sub[`3*($width_by_radix)-1`]
                                | P_sub[`$i`] & P_sub[`4*($width_by_radix)-1`] & P_sub[`3*($width_by_radix)-1`] & G_sub[`2*($width_by_radix)-1`]
                                | P_sub[`$i`] & P_sub[`4*($width_by_radix)-1`] & P_sub[`3*($width_by_radix)-1`] & P_sub[`2*($width_by_radix)-1`] & G_sub[`$width_by_radix-1`];
   assign P[`$i`] = P_sub[`$i`] & P_sub[`4*($width_by_radix)-1`] & P_sub[`3*($width_by_radix)-1`] & P_sub[`2*($width_by_radix)-1`] & P_sub[`$width_by_radix-1`];
     //; }
     //; for (my $i=5*($width_by_radix) ; $i < ( $radix<6? 0 : $radix==6 ? $width : 6*($width_by_radix) ) ; $i++) {
   assign G[`$i`] = G_sub[`$i`] | P_sub[`$i`] & G_sub[`5*($width_by_radix)-1`]
                                | P_sub[`$i`] & P_sub[`5*($width_by_radix)-1`] & G_sub[`4*($width_by_radix)-1`]
                                | P_sub[`$i`] & P_sub[`5*($width_by_radix)-1`] & P_sub[`4*($width_by_radix)-1`] & G_sub[`3*($width_by_radix)-1`]
                                | P_sub[`$i`] & P_sub[`5*($width_by_radix)-1`] & P_sub[`4*($width_by_radix)-1`] & P_sub[`3*($width_by_radix)-1`] & G_sub[`2*($width_by_radix)-1`]
                                | P_sub[`$i`] & P_sub[`5*($width_by_radix)-1`] & P_sub[`4*($width_by_radix)-1`] & P_sub[`3*($width_by_radix)-1`] & P_sub[`2*($width_by_radix)-1`] & G_sub[`1*($width_by_radix)-1`];
   assign P[`$i`] = P_sub[`$i`] & P_sub[`5*($width_by_radix)-1`] & P_sub[`4*($width_by_radix)-1`] & P_sub[`3*($width_by_radix)-1`] & P_sub[`2*($width_by_radix)-1`] & P_sub[`$width_by_radix-1`];
     //; }
     //; for (my $i=6*($width_by_radix) ; $i < ( $radix<7? 0 : $radix==7 ? $width : 7*($width_by_radix) ) ; $i++) {
   assign G[`$i`] = G_sub[`$i`] | P_sub[`$i`] & G_sub[`6*($width_by_radix)-1`]
                                | P_sub[`$i`] & P_sub[`6*($width_by_radix)-1`] & G_sub[`5*($width_by_radix)-1`]
                                | P_sub[`$i`] & P_sub[`6*($width_by_radix)-1`] & P_sub[`5*($width_by_radix)-1`] & G_sub[`4*($width_by_radix)-1`]
                                | P_sub[`$i`] & P_sub[`6*($width_by_radix)-1`] & P_sub[`5*($width_by_radix)-1`] & P_sub[`4*($width_by_radix)-1`] & G_sub[`3*($width_by_radix)-1`]
                                | P_sub[`$i`] & P_sub[`6*($width_by_radix)-1`] & P_sub[`5*($width_by_radix)-1`] & P_sub[`4*($width_by_radix)-1`] & P_sub[`3*($width_by_radix)-1`] & G_sub[`2*($width_by_radix)-1`]
                                | P_sub[`$i`] & P_sub[`6*($width_by_radix)-1`] & P_sub[`5*($width_by_radix)-1`] & P_sub[`4*($width_by_radix)-1`] & P_sub[`3*($width_by_radix)-1`] & P_sub[`2*($width_by_radix)-1`] & G_sub[`1*($width_by_radix)-1`];
   assign P[`$i`] = P_sub[`$i`] & P_sub[`6*($width_by_radix)-1`] & P_sub[`5*($width_by_radix)-1`] & P_sub[`4*($width_by_radix)-1`] & P_sub[`3*($width_by_radix)-1`] & P_sub[`2*($width_by_radix)-1`] & P_sub[`$width_by_radix-1`];
     //; }
     //; for (my $i=7*($width_by_radix) ; $i < ( $radix<8? 0 : $radix==8 ? $width : 8*($width_by_radix) ) ; $i++) {
   assign G[`$i`] = G_sub[`$i`] | P_sub[`$i`] & G_sub[`7*($width_by_radix)-1`]
                                | P_sub[`$i`] & P_sub[`7*($width_by_radix)-1`] & G_sub[`6*($width_by_radix)-1`]
                                | P_sub[`$i`] & P_sub[`7*($width_by_radix)-1`] & P_sub[`6*($width_by_radix)-1`] & G_sub[`5*($width_by_radix)-1`]
                                | P_sub[`$i`] & P_sub[`7*($width_by_radix)-1`] & P_sub[`6*($width_by_radix)-1`] & P_sub[`5*($width_by_radix)-1`] & G_sub[`4*($width_by_radix)-1`]
                                | P_sub[`$i`] & P_sub[`7*($width_by_radix)-1`] & P_sub[`6*($width_by_radix)-1`] & P_sub[`5*($width_by_radix)-1`] & P_sub[`4*($width_by_radix)-1`] & G_sub[`3*($width_by_radix)-1`]
                                | P_sub[`$i`] & P_sub[`7*($width_by_radix)-1`] & P_sub[`6*($width_by_radix)-1`] & P_sub[`5*($width_by_radix)-1`] & P_sub[`4*($width_by_radix)-1`] & P_sub[`3*($width_by_radix)-1`] & G_sub[`2*($width_by_radix)-1`]
                                | P_sub[`$i`] & P_sub[`7*($width_by_radix)-1`] & P_sub[`6*($width_by_radix)-1`] & P_sub[`5*($width_by_radix)-1`] & P_sub[`4*($width_by_radix)-1`] & P_sub[`3*($width_by_radix)-1`] & P_sub[`2*($width_by_radix)-1`] & G_sub[`1*($width_by_radix)-1`];
   assign P[`$i`] = P_sub[`$i`] & P_sub[`7*($width_by_radix)-1`] & P_sub[`6*($width_by_radix)-1`] & P_sub[`5*($width_by_radix)-1`] & P_sub[`4*($width_by_radix)-1`] & P_sub[`3*($width_by_radix)-1`] & P_sub[`2*($width_by_radix)-1`] & P_sub[`$width_by_radix-1`];
     //; }



   //; } else { # I.e., if NOT $width > $radix...
   assign G[0] = g[0];
   assign P[0] = p[0];
     //;   if ($width > 1){
   assign G[1] = g[1] | p[1] & g[0];
   assign P[1] = p[1] & p[0];
     //;   }
     //;   if ($width > 2){
   assign G[2] = g[2] | p[2] & g[1] | p[2] & p[1] & g[0];
   assign P[2] = p[2] & p[1] & p[0];
     //;   }
     //;   if ($width > 3){
   assign G[3] = g[3] | p[3] & g[2] | p[3] & p[2] & g[1] | p[3] & p[2] & p[1] & g[0];
   assign P[3] = p[3] & p[2] & p[1] & p[0];
     //;   }
     //;   if ($width > 4){
   assign G[4] = g[4] | p[4] & g[3] | p[4] & p[3] & g[2] | p[4] & p[3] & p[2] & g[1] 
                      | p[4] & p[3] & p[2] & p[1] & g[0];
   assign P[4] = p[4] & p[3] & p[2] & p[1] & p[0];
     //;   } 
     //;   if ($width > 5){
   assign G[5] = g[5] | p[5] & g[4] | p[5] & p[4] & g[3] | p[5] & p[4] & p[3] & g[2] 
                      | p[5] & p[4] & p[3] & p[2] & g[1] | p[5] & p[4] & p[3] & p[2] & p[1] & g[0];
   assign P[5] = p[5] & p[4] & p[3] & p[2] & p[1] & p[0];
     //;   } 
     //;   if ($width > 6){
   assign G[6] = g[6] | p[6] & g[5] | p[6] & p[5] & g[4] | p[6] & p[5] & p[4] & g[3] 
                      | p[6] & p[5] & p[4] & p[3] & g[2] | p[6] & p[5] & p[4] & p[3] & p[2] & g[1]
                      | p[6] & p[5] & p[4] & p[3] & p[2] & p[1] & g[0];
   assign P[6] = p[6] & p[5] & p[4] & p[3] & p[2] & p[1] & p[0];
     //;   } 
     //;   if ($width > 7){
   assign G[7] = g[7] | p[7] & g[6] | p[7] & p[6] & g[5] | p[7] & p[6] & p[5] & g[4] 
                      | p[7] & p[6] & p[5] & p[4] & g[3] | p[7] & p[6] & p[5] & p[4] & p[3] & g[2] 
                      | p[7] & p[6] & p[5] & p[4] & p[3] & p[2] & g[1] 
                      | p[7] & p[6] & p[5] & p[4] & p[3] & p[2] & p[1] & g[0];
   assign P[7] = p[7] & p[6] & p[5] & p[4] & p[3] & p[2] & p[1] & p[0];
     //;   }
   //; } 
   
endmodule
