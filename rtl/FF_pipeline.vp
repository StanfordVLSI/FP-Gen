/*************************************************************************
 ** From Perforce:
 **
 ** $Id: //Smart_design/ChipGen/FP-Gen/rtl/FF_pipeline.vp#1 $
 ** $DateTime: 2012/02/20 23:29:51 $
 ** $Change: 10128 $
 ** $Author: sameh $
 *************************************************************************/

/* *****************************************************************************
 * Description:
 * parameterized Flip flop pipeline with stall signal to clock gate stalled pipeline
 * 
 * 
 * Parameters:
 * * Width
 * * Pipeline depth
 * 
 * Change bar:
 * -----------
 * Date           Author    Description
 * March 23, 2012   Sameh   init version - ported Sameh's original code to 
 *                          genesis
 * ****************************************************************************/

/*******************************************************************************
 * PARAMETERIZATION
 * ****************************************************************************/
//; # module parameters
//; my $width = parameter(Name=>'Width', Val=>64, Min=>1, Step=>1,
//;                       Doc=>"Signal bit widths");
//; my $pipeline_depth = parameter(Name=>'PipelineDepth', Val=>4, Min=>0, Step=>1,
//;                       Doc=>"Pipeline depth");
//; my $retime_Status = parameter( Name=>'Retime' , Val=>'NO' , List=>[ 'YES' , 'NO' ] , Doc=>"Pipeline Is Retimeable" ) ;

module `mname` (
  input logic [`$width-1`:0] in,
  input logic valid_in,
  input logic clk, stall, reset, 
  output logic [`$width-1`:0] out,
  output logic valid_out
               );

  /* synopsys dc_tcl_script_begin
   set_ungroup [current_design] true
   set_flatten true -effort high -phase true -design [current_design]
//; #   https://solvnet.synopsys.com/dow_retrieve/G-2012.03/manpages/syn2/set_dont_retime.html
//; if( $retime_Status eq 'YES' ){
   set_dont_retime [get_cells -filter {@is_sequential==true}] false 
   set_optimize_registers true -design [current_design]
//; } elsif (  $retime_Status eq 'NO' ){
   set_dont_retime [get_cells -filter {@is_sequential==true}] true
   set_optimize_registers false -design [current_design]
//; } else {
//;    self->error( "Unexpected branch condition in retiming elaboration...\n" ) ;   
//; }
  */

//; if ($pipeline_depth>0) {
    reg [`$width-1`:0] stages [0:`$pipeline_depth-1`];
    reg valid_stages [0:`$pipeline_depth-1`];

    always @(posedge clk)
    if (reset)
      {valid_stages[0],stages[0]} <= 0;
    else
    begin
      valid_stages[0] <= valid_in;
      if (!stall & valid_in)
        stages[0] <= in ;
    end

//;   for (my $i=0; $i<$pipeline_depth-1; $i++){
    always @(posedge clk)
    if (reset)
      {valid_stages[`$i+1`],stages[`$i+1`]} <= 0;
    else
    begin
      valid_stages[`$i+1`] <= valid_stages[`$i`];
      if (!stall & valid_stages[`$i`])
        stages[`$i+1`] <= stages [`$i`];
    end

//;   }

    assign out = stages [`$pipeline_depth-1`];
    assign valid_out = valid_stages[`$pipeline_depth-1`];
//; } else {
    assign out = in;
    assign valid_out = valid_in;
//; }
  
endmodule



