
/*************************************************************************
 ** From Perforce:
 **
 ** $Id: //Smart_design/ChipGen/FP-Gen/rtl/CMA.vp#1 $
 ** $DateTime: 2011/12/24 22:02:13 $
 ** $Change: 9979 $
 ** $Author: sameh06 $
 *************************************************************************/

/* *****************************************************************************
 * Description:
 * ------------
 * FMA datapath
 * Status flag bits
 * ______________________________
 * Bit| Flag      | Description
 * ______________________________
 *  0 | Zero      | Integer or floating point output is zero.
 *  1 | Infinity  | Floating point output is infinity.
 *  2 | Invalid   | Floating point operation is not valid (0x∞, ∞-∞ ) . It is also set to 1 when one of the inputs is NaN
 *  3 | Tiny      | Non zero floating point output after rounding has a magnitude less than the minimum normalized number( a denormalized number)
 *  4 | Huge      | Finite floating point result after rounding has a magnitude greater than the maximum normalized number.
 *  5 | Inexact   | Integer or floating point output is not equal to the infinitely precise result.
 * ______________________________
 *  
 * 
 * Parameters:
 * ------------
 * * FractionWidth, ExponentWidth, EnableDenormals, useInc
 * 
 * 
 * Change bar:
 * -----------
 * Date           Author    Description
 * Jan 24, 2012   sameh06   init version - 
 *                          
 * ****************************************************************************/

/*******************************************************************************
 * PARAMETERIZATION
 * ****************************************************************************/
//; # Perl Libraries
//; use POSIX qw(ceil floor log); # For ceiling rounding and log math
//; sub CeilOfLog2{ return ceil(log(@_)/log(2)); }
//;
//; # get some values from the top
//; my $verif_mode = parameter(Name=>'VERIF_MODE',
//;                            Val=>'ON', List=>['ON','OFF'],
//;                            Doc=>"Verification mode determines whether or not ".
//;                                 "monitors and drivers are on. Possible values ".
//;                                 "are ON or Off." ); 
//; my $synth_mode = parameter(Name=>'SYNTH_MODE',
//;                            Val=>'OFF', List=>['ON','OFF'],
//;                            Doc=>"Synthesis mode determines whether or not ".
//;                                 "special synthesis constructs are used. ".
//;                                 "Possible values are ON or Off.");
//; my $desinware_mode = parameter(Name=>'Designware_MODE',
//;                            Val=>'OFF', List=>['ON','OFF'],
//;                            Doc=>"Designware mode determines whether or not ".
//;                                 "designware codes are used instead of our ".
//;                                 "design.");

//;
//; # module parameters
//; my $frac_width = parameter(Name=>'FractionWidth', Val=>52, 
//;                           Min=>4, Step=>1, Opt=>'No' ,
//;                           Doc=>"!FUNCTIONAL! Width of the Fraction for the multiplier (default is IEEE Double, 52 bit)");
//; my $exp_width = parameter(Name=>'ExponentWidth', Val=>11, 
//;                           Min=>4, Step=>1,  Opt=>'No' ,
//;                           Doc=>"!FUNCTIONAL! Width of the exponent for the multiplier (default is IEEE Double, 11 bit)");
//; my $enable_denormals = parameter(Name=>'EnableDenormals', Val=>'YES', 
//;                           List=>['YES','NO'],  Opt=>'No' ,
//;                           Doc=>"Enable denormals parameters to enable handling denormal values ".
//;                                "of inputs A and B correctly (YES/NO)");
//;
//; my $enable_forwarding = parameter(Name=>'EnableForwarding', Val=>'YES', List=>['YES', 'NO'], Opt=>'No' ,
//; 	 		   Doc=>"Pick 'NO' for A*B or pick 'YES' for (A+ainc)*(B+binc) !FUNCTIONAL!");
//;
//; my $enableMultiplePumping = parameter(Name=>'EnableMultiplePumping', Val=>'NO', List=>['YES', 'NO'],
//; 			  Doc=>"Use parallel MultiplierP unit !FUNCTIONAL!" ,  Opt=>'Yes' );
//;
//; my $pipeline_depth = parameter( Name=>'PipelineDepth', Val=>8 , Min=>(($enable_forwarding =~ /YES/)?5:0), Max=>20,
//;                                 Doc=>"!FUNCTIONAL! Pipeline depth"  , Opt=>'No' );
//; my $muladd_pipeline_depth = ($enable_forwarding =~ /YES/ && $pipeline_depth>0) ? $pipeline_depth-1 : $pipeline_depth ;
//; my $default_mul_pipeline_depth = floor($pipeline_depth / 2);
//; my $min_mul_pipeline_depth = ($enable_forwarding =~ /YES/) ? 2 : 0 ;
//; if ( $default_mul_pipeline_depth < $min_mul_pipeline_depth) {
//;   $default_mul_pipeline_depth = $min_mul_pipeline_depth;
//; }
//; my $mul_pipeline_depth = parameter(Name=>'MulPipelineDepth', Val=>$default_mul_pipeline_depth, Min=>$min_mul_pipeline_depth, Max=> $muladd_pipeline_depth  ,
//;                       Doc=>"Multiplier Part Pipeline depth" , Opt=>'No');
//; my $add_pipeline_depth = $muladd_pipeline_depth-$mul_pipeline_depth;
//; parameter(Name=>'AddPipelineDepth', Val=>$add_pipeline_depth, Min=>$add_pipeline_depth, Max=> $add_pipeline_depth,
//;                       Doc=>"Adder Part Pipeline depth");
//;
//; # And some local variables
//; my $product_width = 2 * $frac_width + 2;
//; my $ExtendedExp_width = $exp_width + 2;
//;


module `mname` (
   //; if ($verif_mode =~ /ON/){
    input logic 				dumptolog,
   //; }
    input logic [`$exp_width+$frac_width`:0] 	a, b, c,
    input logic [2:0] 				rnd,

  //; if ($enable_forwarding =~ /YES/){
    input logic 				forward_a, forward_b,
    input logic [`$mul_pipeline_depth`:0] 	forward_c, 
  //; }
    input logic 				clk , reset,
   //; if ($pipeline_depth>0){
    input logic 				valid_in, adder_mode, multiplier_mode, stall_in, SI, SCAN_ENABLE, test_mode,
    output logic 				valid_out, SO, stall_request,
   //; }
    output logic [`$exp_width + $frac_width`:0] z,
    output logic [7:0] 				status
   );

   
   //; if ($pipeline_depth == 0){
   logic  valid_in, adder_mode, multiplier_mode, stall_in;
   assign valid_in = 1'b1;
   assign adder_mode = 1'b0;
   assign multiplier_mode = 1'b0;
   assign stall_in = 1'b0;
   
   //; }

  /* synopsys dc_tcl_script_begin
   set_ungroup [current_design] true
   set_flatten true -effort high -phase true -design [current_design]
  */

  logic SignA, SignAB, SignAB_final,SignA_P1, SignA_PEnd, SignC, SignC2, SignC_final, SignZ, SignZm;
  logic NANA, NANAB, NANAB_final, NANA_P1, NANA_PEnd, NANC, NANC2, NANC_final, NANZ;
  logic InfA, InfAB, InfAB_final, InfA_P1, InfA_PEnd, InfC, InfC2, InfC_final, InfZ;
  logic ZeroA, ZeroAB, ZeroAB_final, ZeroA_P1, ZeroA_PEnd, ZeroC, ZeroC2, ZeroC_final, ZeroZ;
  logic [`$frac_width`:0] ManA_P1, ManA_PEnd, ManC, ManC2, ManC_final, ManZ, ManZm;
  logic [`$exp_width-1` : 0] ExpA_P1, ExpA_PEnd, ExpC, ExpC2, ExpC_final, ExpZ, ExpZm;
  logic [`$frac_width-1`:0] SigA_P1, SigC;
  logic IncC, IncC2, IncC_final, IncZ, IncZm, IncExpZ, IncExpZm;
  logic ShiftC, ShiftC2, ShiftC_final, ShiftZ;
  logic ZeroExpA_P1, ZeroExpC;
  logic NANorInfA_P1, NANorInfC;
  logic zeroSigA_P1 , zeroSigC ;
  logic denormA_P1, denormAB_final, denormC, denormZ, denormZm;

  logic [`$ExtendedExp_width-1`:0] ExpDifference, ExpAB, ExpAB_unnormalized, ExpAB_final;
  logic [`$product_width-1` : 0] ManAB, ManA, ManAB_final;
  logic ResultIsClose, ResultMaybeClose, ResultMaybeFar, ExpA_gt_ExpB;
  logic [`$ExtendedExp_width-1` : 0] ExpC_pp0_init, ExpC_pp1_init, ExpC_pp0, ExpC_pp1, ExpZ_pp0, ExpZ_pp1, ExpZ_pp0_late, ExpZ_pp1_late;
  logic ExpC_ci_init, ExpC_ci, ExpZ_ci, ExpZ_ci_late;

  logic stall, ExpCdec, ExpCDecrementWhenShifting, ExpZDecrementWhenShifting, ExpZDecrementWhenShifting_late, valid_ExpA, valid_c, valid_ExpC, valid_rnd;
  logic valid_A1, valid_A_adder_mode, valid_mul, valid_add ;
  logic [`$mul_pipeline_depth-1`:0] forward_c_out, forward_c_out_dummy;
  logic forward_a_P1;
  logic [`$exp_width + $frac_width`:0] A_in_P1, A_P1;
  logic [7:0] status_init;
  logic [2:0] rnd_add;
   logic      valid_forward_a1;
   

//; if($enable_forwarding =~ /YES/ ){
   
//;   my $pipe_forward_a1 = generate(  'FF_pipeline',  'pipe_forward_a1',  
//;                             Width=> 1,
//;                             PipelineDepth => 1, Retime=>'YES');
  `$pipe_forward_a1 ->instantiate()` ( .in(forward_a_P1) ,
                               .valid_in(valid_in & adder_mode), .clk(clk) , .stall(stall), .reset(reset), 
                               .out(forward_a_P1),
                               .valid_out(valid_forward_a1) );
   
   assign A_P1 = forward_a_P1? z : A_in_P1;
//; } else {
   assign A_P1 = A_in_P1;
//; }
   assign SignA_P1 = A_P1[ `$exp_width + $frac_width` ];
   assign ZeroExpA_P1  = ~|A_P1[`$exp_width + $frac_width - 1` :`$frac_width`] ;
   assign ExpA_P1  = {A_P1[`$exp_width + $frac_width - 1` :`$frac_width+1`], A_P1[`$frac_width`] | ZeroExpA_P1} ;
   assign SigA_P1  = A_P1[`$frac_width - 1` : 0 ];
   assign ManA_P1  = { ~denormA_P1 , SigA_P1 };
   assign NANorInfA_P1 = & A_P1[`$exp_width + $frac_width - 1` : `$frac_width` ] ;
   assign zeroSigA_P1  = ~|SigA_P1;
   assign ZeroA_P1     =  zeroSigA_P1 & ZeroExpA_P1;
   assign InfA_P1      =  zeroSigA_P1 & NANorInfA_P1;
   assign NANA_P1      = ~zeroSigA_P1 & NANorInfA_P1;
//; if ($enable_denormals=~ /YES/){
   assign {denormA_P1, denormC} = {ZeroExpA_P1, ZeroExpC};
   
//; } else {
  assign {denormA_P1, demormC} = 0;
//; }

//; my $pipe_A1_depth = ($enable_forwarding eq 'YES') ? 1 : 0;
//;   my $pipe_A1 = generate(  'FF_pipeline',  'pipe_A1',  
//;                             Width=> $exp_width+$frac_width+1,
//;                             PipelineDepth => $pipe_A1_depth, Retime=>'YES');
  `$pipe_A1 ->instantiate()` ( .in(a) ,
                               .valid_in(valid_in & adder_mode), .clk(clk) , .stall(stall), .reset(reset), 
                               .out(A_in_P1),
                               .valid_out(valid_A1) );

//;   my $pipe_Arest = generate(  'FF_pipeline',  'pipe_Arest',  
//;                             Width=> $frac_width+$exp_width+5,
//;                             PipelineDepth => $mul_pipeline_depth-$pipe_A1_depth , Retime=>'YES');
  `$pipe_Arest ->instantiate()` ( .in({SignA_P1, ExpA_P1, ManA_P1, InfA_P1, NANA_P1, ZeroA_P1}) ,
                               .valid_in(valid_A1), .clk(clk) , .stall(stall), .reset(reset), 
                               .out({SignA_PEnd, ExpA_PEnd, ManA_PEnd, InfA_PEnd, NANA_PEnd, ZeroA_PEnd}),
                               .valid_out(valid_A_adder_mode) );


   assign {InfAB_final,NANAB_final, ZeroAB_final, SignAB_final, ExpAB_final, ManAB_final} = valid_A_adder_mode? 
                  {InfA_PEnd,NANA_PEnd, ZeroA_PEnd, SignA_PEnd,{2'b0,ExpA_PEnd}, {1'b0, ManA_PEnd, `$frac_width`'b0}}
                : {InfAB, NANAB, ZeroAB, SignAB, ExpAB, ManAB};

//; if ($pipeline_depth>0){
  assign stall = stall_request | stall_in;
//; }

//; my $CascadeMUL_obj = generate('FPMult', 'MUL', FractionWidth=>$frac_width 
//;                                              , ExponentWidth=>$exp_width
//;                                              , EnableDenormals=>$enable_denormals
//;                                              , FloatingDigits => 2
//;                                              , EnableForwarding => $enable_forwarding
//;                                              , EnableMultiplePumping => $enableMultiplePumping
//;                                              , PipelineDepth => $mul_pipeline_depth );
  `$CascadeMUL_obj->instantiate()` (
//;      if ($verif_mode =~ /ON/){
                                  .dumptolog(dumptolog),
//;      }
                                  .a_in(a), .b_in(b),
//;      if ($enable_forwarding =~ /YES/){
                                  .forward_a(forward_a), .forward_b(forward_b),	
                                  .ExpZ(ExpZ), .ManZ(ManZ), .SignZ(SignZ), 
                                  .InfZ(InfZ), .NANZ(NANZ), .ZeroZ(ZeroZ), .IncZ(IncZ),
//;      }
//;      if ($mul_pipeline_depth>0){
                                  .valid_in(valid_in & !adder_mode), .clk(clk) , .stall_in(stall_in), .reset(reset),
                                  .valid_out(valid_mul), .stall_request(stall_request),
//;      }
                                  .SignAB_out(SignAB), .ExpAB_out(ExpAB) , .ManAB_out(ManAB),
                                  .NANAB_out(NANAB), .InfAB_out(InfAB), .ZeroAB_out(ZeroAB)

                                  );

//; if ($pipeline_depth>0 && $mul_pipeline_depth==0){
   assign valid_mul = valid_in;
   assign stall_request = 1'b0;
   
//; }

   // Calculations for c
   assign SignC = c[ `$exp_width + $frac_width` ];
   assign ExpC  = c[`$exp_width + $frac_width - 1` : `$frac_width` ] ;
   assign SigC  = c[`$frac_width - 1` : 0 ];
   assign ZeroExpC  =  ~|ExpC;
   assign ManC = { ~denormC , SigC };
   assign zeroSigC = ~|SigC;
   assign ZeroC = zeroSigC & ZeroExpC;
   assign NANorInfC = & ExpC  ;
   assign InfC      =  zeroSigC & NANorInfC;
   assign NANC     = ~zeroSigC & NANorInfC;


//; if ($enable_forwarding =~ /YES/){
  assign { ExpC_pp0_init, ExpC_pp1_init, ExpC_ci_init, ExpCdec} = forward_c[0]?
                     {ExpZ_pp0_late , ExpZ_pp1_late , ExpZ_ci_late, ExpZDecrementWhenShifting_late} 
                   : {2'b0, ExpC, {(`$exp_width+2`){~denormC}} , 2'b0};
//; } else  {
  assign { ExpC_pp0_init, ExpC_pp1_init, ExpC_ci_init, ExpCdec} = {2'b0, ExpC, {(`$exp_width+2`){~denormC}} , 2'b0};
//; }


//;   my $pipe_forward = generate(  'FF_pipeline',  'pipe_exp_forward',
//;                              Width=> 2*$ExtendedExp_width+2,
//;                              PipelineDepth => $mul_pipeline_depth, Retime=>'YES',
//;                              EnableForwarding => $enable_forwarding);
  `$pipe_forward->instantiate()` ( .in({ExpC_pp0_init, ExpC_pp1_init, ExpC_ci_init, ExpCdec}) ,
//;     if ($enable_forwarding =~ /YES/) {
                               .forwarded_in({ExpZ_pp0, ExpZ_pp1, ExpZ_ci, ExpZDecrementWhenShifting}),
                               .forward(forward_c[`$mul_pipeline_depth`:1]),
                               .forward_out (forward_c_out),
//;     }
                               .valid_in(valid_in), .clk(clk) , .stall(stall), .reset(reset), 
                               .out({ExpC_pp0, ExpC_pp1, ExpC_ci, ExpCDecrementWhenShifting}),
                               .valid_out(valid_ExpC) );


//; my $ED_obj = generate('ExponentDifference', 'ED', ExponentWidth=>$exp_width);
  `$ED_obj->instantiate()` (.ExpA_pp0(ExpC_pp0), .ExpA_pp1(ExpC_pp1), .ExpA_ci(ExpC_ci),
                .ExpADecrementWhenShifting(ExpCDecrementWhenShifting), .SignA(SignC_final), .ShiftA(ShiftC_final), 
                .ExpB(ExpAB_final), .SignB(SignAB_final), .ExpDifference(ExpDifference),
                .ResultMaybeClose(ResultMaybeClose), .ResultMaybeFar(ResultMaybeFar), .ResultIsClose(ResultIsClose), .ExpA_gt_ExpB(ExpA_gt_ExpB)
  //; if ($verif_mode =~ /ON/){
              , .dumptolog(dumptolog)
  //; }
                            );


//;   my $pipe_forward2 = generate(  'FF_pipeline',  'pipe_c_forward',
//;                              Width=> $exp_width+$frac_width+7,
//;                              PipelineDepth => $mul_pipeline_depth, Retime=>'YES',
//;                              EnableForwarding => $enable_forwarding);
  `$pipe_forward2->instantiate()` ( .in({ExpC, ManC, SignC, InfC, NANC, ZeroC, 2'b0}) ,
//;     if ($enable_forwarding =~ /YES/) {
                               .forwarded_in({ExpZ, ManZ, SignZ, InfZ, NANZ, ZeroZ,IncZ, ShiftZ}),
                               .forward(forward_c[`$mul_pipeline_depth-1`:0]),
                               .forward_out (forward_c_out_dummy),
//;     }
                               .valid_in(valid_in), .clk(clk) , .stall(stall), .reset(reset), 
                               .out({ExpC2, ManC2, SignC2, InfC2, NANC2, ZeroC2, IncC2, ShiftC2}),
                               .valid_out(valid_c) );
//; if ($enable_forwarding =~ /YES/){
  assign {ExpC_final, ManC_final, SignC_final, InfC_final, NANC_final, ZeroC_final, IncC_final, ShiftC_final} =
                        forward_c_out[`$mul_pipeline_depth-1`]?
                                              {ExpZ, ManZ, SignZ, InfZ, NANZ, ZeroZ,IncZ, ShiftZ}
                                           : {ExpC2, ManC2, SignC2, InfC2, NANC2, ZeroC2, IncC2, ShiftC2};
//; } else {
  assign {ExpC_final, ManC_final, SignC_final, InfC_final, NANC_final, ZeroC_final, IncC_final, ShiftC_final} =
                                             {ExpC2, ManC2, SignC2, InfC2, NANC2, ZeroC2, IncC2, ShiftC2};
//; }

//;   my $pipe_forward3 = generate(  'FF_pipeline',  'pipe_rnd_forward',
//;                              Width=> 3,
//;                              PipelineDepth => $mul_pipeline_depth, Retime=>'YES');
  `$pipe_forward3->instantiate()` ( .in(rnd) ,.valid_in(valid_in), .clk(clk) , .stall(stall), .reset(reset), 
                               .out(rnd_add), .valid_out(valid_rnd) );


//; my $CascadeADD_obj = generate('FPAdd', 'ADD', FractionWidth=>$frac_width 
//;                                             , ExponentWidth=>$exp_width
//;                                             , EnableDenormals=>$enable_denormals
//;                                             , EnableForwarding => $enable_forwarding,
//;                                             , PipelineDepth => $add_pipeline_depth );

  `$CascadeADD_obj->instantiate()` (
//;   if ($verif_mode =~ /ON/){
                        .dumptolog(dumptolog),
//;   }
                        .ExpA({ExpC_final[`$exp_width-1`:1], ExpC_final[0] | ~ManC_final[`$frac_width`]}),
                        .ManA(ManC_final), .SignA(SignC_final), 
                        .InfA(InfC_final), .NANA(NANC_final), .ZeroA(ZeroC_final),
//;   if ($enable_forwarding =~ /YES/) {
                        .IncA(IncC_final),
//;   }
                        .SignB(SignAB_final), .ExpB(ExpAB_final), .ManB(ManAB_final), .InfB(InfAB_final), .NANB(NANAB_final), .ZeroB(ZeroAB_final),
                        .rnd(rnd_add),
                        .ExpDifference(ExpDifference), .ExpA_gt_ExpB(ExpA_gt_ExpB),
                        .ResultMaybeClose(ResultMaybeClose), .ResultMaybeFar(ResultMaybeFar), .ResultIsClose(ResultIsClose), 
                        .ExpZ_pp0(ExpZ_pp0), .ExpZ_pp1(ExpZ_pp1), .ExpZ_ci(ExpZ_ci),
                        .ExpZ_pp0_late(ExpZ_pp0_late), .ExpZ_pp1_late(ExpZ_pp1_late), .ExpZ_ci_late(ExpZ_ci_late),
                        .ExpZDecrementWhenShifting(ExpZDecrementWhenShifting), .ExpZDecrementWhenShifting_late(ExpZDecrementWhenShifting_late),
                        .ShiftZ(ShiftZ),
//;   if ($add_pipeline_depth>0){
                        .valid_in(valid_mul | valid_A_adder_mode), .clk(clk) , .stall(stall), .reset(reset),
                        .valid_out(valid_add),
//;   } 
                        .ExpZ(ExpZ), .ManZ(ManZ), .SignZ(SignZ), 
                        .InfZ(InfZ), .NANZ(NANZ), .ZeroZ(ZeroZ), .IncZ(IncZ), .status(status_init)                       
                        );

  assign denormZ = ~ManZ[`$frac_width`];

//; if ($add_pipeline_depth==0){
  assign valid_add = valid_mul | valid_A_adder_mode;
//; }

//;    my $inc_pipe = generate('FF_pipeline','inc_pipe', Width=> $exp_width + $frac_width + 12 ,
//;                           PipelineDepth=> ($enable_forwarding =~ /YES/)?1:0, Retime=> 'YES');
  `$inc_pipe ->instantiate()` (
       .in({SignZ, ExpZ, ManZ, denormZ, IncZ, status_init}) , 
       .valid_in(valid_add), .clk(clk) , .stall(stall), .reset(reset), 
       .out({SignZm, ExpZm, ManZm, denormZm, IncZm, status}),
       .valid_out(valid_out) );

//;  my $fma_increment = generate('FPIncrementer','Incrementer', FractionWidth=> $frac_width , ExponentWidth=> $exp_width );

  `$fma_increment->instantiate()` (
   //; if ($verif_mode =~ /ON/){
    .dumptolog(dumptolog),
   //; }
    .SignA(SignZm), .ExpA(ExpZm), .ManA(ManZm), .denormA(denormZm), .IncA(IncZm), .out(z) );
	
endmodule

