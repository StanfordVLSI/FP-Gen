/*************************************************************************
 ** From Perforce:
 **
 ** $Id: //Smart_design/ChipGen/FP-Gen/rtl/ClosePathSub.vp#1 $
 ** $DateTime: 2012/02/08 11:27:28 $
 ** $Change: 10078 $
 ** $Author: jbrunhav $
 *************************************************************************/

/* *****************************************************************************
 * Description:
 * Close Path Subtractor
 * 
 * 
 * Parameters:
 * * Width
 * 
 * Change bar:
 * -----------
 * Date           Author    Description
 * Oct 13, 2011   sameh   init version - ported Sameh's original code to 
 *                          genesis
 * ****************************************************************************/

/*******************************************************************************
 * PARAMETERIZATION
 * ****************************************************************************/
//; # Perl Libraries
//; use POSIX qw(ceil log); # For ceiling rounding and log math
//; sub CeilOfLog2{ return ceil(log(@_)/log(2)); }
//;
//; # get some values from the top
//; my $verif_mode = $self->get_top_param('VERIF_MODE'); # Reads this parameter from the top level
//; my $synth_mode = $self->get_top_param('SYNTH_MODE'); # Reads this parameter from the top level
//;
//; # module parameters
//; my $frac_width = parameter(Name=>'FractionWidth', Val=>52, 
//;                           Min=>4, Step=>1, 
//;                           Doc=>"Width of the Fraction for the multiplier (default is IEEE Double, 52 bit)  !FUNCTIONAL!");
//; my $exp_width = parameter(Name=>'ExponentWidth', Val=>11, 
//;                           Min=>4, Step=>1, 
//;                           Doc=>"Width of the exponent for the multiplier (default is IEEE Double, 11 bit)  !FUNCTIONAL!");
//; my $pipeline_depth = parameter(Name=>'PipelineDepth', Val=>3, List=>[ 0,1,2,3,4,5,6,7 ] ,
//;                       Doc=>"Pipeline depth !FUNCTIONAL!");
//; my $useInc = parameter(Name=>'useInc', Val=>'YES', List=>['YES', 'NO'],
//; 			   Doc=>"Inputs A has an increment signal");
//;
//; # And some local variables
//; my $manA_width = $frac_width + 1;
//; my $manB_width = 2 * $manA_width;
//; my $ExtendedExp_width = $exp_width + 2;
//; my $shift_width = CeilOfLog2($manB_width+1) + 1;
module `mname`(
 //; if ($verif_mode =~ /ON/){
  input logic dumptolog,
 //; }
  input logic [`$manA_width-1`:0] ManA_in, 
  //; if ($useInc =~ /YES/){
  input logic IncA_in,
  //; }
  input logic [`$ExtendedExp_width-1`:0] ExpA_in, ExpB_in, 
  input logic SignA_in, SignB_in,
  input logic [`$manB_width-1`:0] ManB_in,
  //; if ($pipeline_depth>0) {
  input logic  clk , reset, valid_in, stall,
  output logic  valid_out,
  //; }
  output logic [`$manA_width-1`:0] ManDiff_out, 
  output logic Guard_out, Sticky_out, Overflow_out, LZA_wrong_out, SignDiff_out, ZeroDiff_out,
  output logic [`$exp_width-1`:0] ExpDiff_out, 
  output logic [`$ExtendedExp_width-1`:0] Expbase_pp0, Expbase_pp1,
  output logic Expbase_ci
              );


  //; if (! ($useInc =~ /YES/) ){
  logic IncA_in;
  assign IncA_in = 0;
  //; }

  logic [`$manA_width-1`:0] ManA_P1;
  logic [`$manB_width-1`:0] ManB_P1, manA_wide_P1;
  logic [`$ExtendedExp_width-1`:0] ExpA_P1, ExpB_P1, ExpBig_P1, ExpBig_P2; 
  logic IncA_P1, IncA_P2, SignA_P1, SignB_P1, SignB_P2, SignB_P3, valid_P1, valid_P2, valid_P3;
  logic ZeroDiff_P2, ZeroDiff_P3;

  logic [(1<<`$shift_width`)-1 : 0] max_shift_dec_P1;
  logic [`$ExtendedExp_width-1`:0] LShiftAmtWide_P2;


//;   my $pipe_P1 = generate(  'FF_pipeline',  'pipe_P1',  
//;                             Width=> $manA_width + $manB_width + 2*$ExtendedExp_width + 3,
//;                             PipelineDepth => ($pipeline_depth>2?$pipeline_depth-2:($pipeline_depth==2?1:0)),
//;                             Retime=>'YES');
  `$pipe_P1 ->instantiate()` ( .in({ManA_in, IncA_in, ExpA_in, SignA_in, ManB_in, ExpB_in, SignB_in}) ,
                               .valid_in(valid_in), .clk(clk) , .stall(stall), .reset(reset), 
                               .out({ManA_P1, IncA_P1, ExpA_P1, SignA_P1, ManB_P1, ExpB_P1, SignB_P1}),
                               .valid_out(valid_P1) ); 



  
  logic [`$manB_width+1`:0] op1_P1, op1_P2, op2_P1, op2_P2,  max_shift_mask_P1, max_shift_mask_P2, diff_P2, diff_P3;
  logic [`$manB_width+2`:0] shiftedDiff_P3;
  logic ExpB_gt_ExpA_1_P1, ExpB_gt_ExpA_2_P1, ExpA_gt_ExpB_1_P1, ExpA_gt_ExpB_2_P1, mostSticky_P3, a_gt_b_P2, a_gt_b_P3, co_dummy0_P3, co_dummy1_P3, LZA_wrong_P3;
  logic [`$shift_width-1`:0] LshiftAmt_P2, LshiftAmt_P3;
  logic [`$ExtendedExp_width-1`:0] Expbase_pp0_P3, Expbase_pp1_P3, ExpDiff1_pp0_P3, ExpDiff1_pp1_P3, ExpDiff1_P3, ExpDiff2_P3;


  assign manA_wide_P1 = {1'b0,ManA_P1,{(`$manB_width-$manA_width-1`){IncA_P1}}}; //pad to the right with zeros for the mantissa

  assign ExpA_gt_ExpB_1_P1 = ExpA_P1[1] ^ ExpB_P1[1]?  ~ExpA_P1[0] &  ExpB_P1[0] : ExpA_P1[0] &  ~ExpB_P1[0];
  assign ExpA_gt_ExpB_2_P1 = (ExpA_P1[0] ~^ ExpB_P1[0])  & (ExpA_P1[2] ^ ExpB_P1[2]?  ~ExpA_P1[1] &  ExpB_P1[1] : ExpA_P1[1] &  ~ExpB_P1[1]);
  assign ExpB_gt_ExpA_1_P1 = ExpA_P1[1] ^ ExpB_P1[1]?   ExpA_P1[0] & ~ExpB_P1[0] :~ExpA_P1[0] &   ExpB_P1[0];
  assign ExpB_gt_ExpA_2_P1 = (ExpA_P1[0] ~^ ExpB_P1[0]) & (ExpA_P1[2] ^ ExpB_P1[2]?   ExpA_P1[1] & ~ExpB_P1[1] :~ExpA_P1[1] &   ExpB_P1[1]);



  assign op1_P1 = ExpB_gt_ExpA_2_P1? {2'b0 , manA_wide_P1}
                             : ExpB_gt_ExpA_1_P1? {1'b0 ,manA_wide_P1,IncA_P1} : {manA_wide_P1,IncA_P1,IncA_P1};
  assign op2_P1 = ExpA_gt_ExpB_2_P1? {2'b0 , ManB_P1}
                             : ExpA_gt_ExpB_1_P1? {1'b0 , ManB_P1,1'b0} : {ManB_P1,2'b0};
  assign ExpBig_P1 =  (ExpA_gt_ExpB_1_P1 | ExpA_gt_ExpB_2_P1)? ExpA_P1: ExpB_P1;
 
  //Subtraction + LZA
  
  DW_decode_en #(`$shift_width`) U1 (
//; if ( $ExtendedExp_width-1 > $shift_width ) {
                                   .en(~|ExpBig_P1[`$ExtendedExp_width-2`:`$shift_width`])    // Disable if the exponent is big enough
//; } else {
                                   .en(1'b1)
//; }
                                 , .a(ExpBig_P1[`$shift_width-1`:0])
                                 , .b(max_shift_dec_P1) );

//; for (my $i=0 ; $i<$manB_width+2 ; $i++)
//; {
  assign max_shift_mask_P1[`$i`] = max_shift_dec_P1[`$manB_width-$i+1`]; 
//; }


//;   my $pipe_P2 = generate(  'FF_pipeline',  'pipe_P2',  
//;                             Width=> $ExtendedExp_width+3*$manB_width+8,
//;                             PipelineDepth => ($pipeline_depth>2?1:0), Retime=>'YES');
  `$pipe_P2 ->instantiate()` ( .in({ IncA_P1, SignB_P1, op1_P1, op2_P1,  max_shift_mask_P1, ExpBig_P1}) ,
                               .valid_in(valid_P1), .clk(clk) , .stall(stall), .reset(reset), 
                               .out({ IncA_P2, SignB_P2, op1_P2, op2_P2, max_shift_mask_P2, ExpBig_P2 }),
                               .valid_out(valid_P2) ); 

//; my $Abs_diff_obj = generate('AbsoluteDifference', 'manDiff', 
//;                                                 , Width =>$manB_width+2
//;                                                 , LZA_enable => 'YES'
//;                                                 , useInc => ($useInc =~ /YES/)?1:0 );


  `$Abs_diff_obj->instantiate()` (.a(op1_P2),
  //; if ($useInc =~ /YES/) {
                                  .ainc(IncA_P2),
  //; }
                                  .b(op2_P2), .rsticky_b(1'b0), .absdiff(diff_P2), .LZA_override_mask(max_shift_mask_P2), .a_gt_b(a_gt_b_P2),.LZA_count(LshiftAmt_P2), .absdiffzero(ZeroDiff_P2)
  //; if ($verif_mode =~ /ON/){
                                , .dumptolog(dumptolog)
  //; }
                                  ); // The shift amount

  //calculate Expbase_pp0 - LShiftAmt + (0 | 1 | 2)
  assign LShiftAmtWide_P2 = LshiftAmt_P2;

  assign Expbase_pp0 = ZeroDiff_P2? 0 : ExpBig_P2;
  assign Expbase_pp1 = ZeroDiff_P2? 0 : ~LShiftAmtWide_P2;
  assign Expbase_ci  = ~ZeroDiff_P2;

  //normalization

//;   my $pipe_P3 = generate(  'FF_pipeline',  'pipe_P3',  
//;                             Width=> $manB_width+$shift_width+2*$ExtendedExp_width+5,
//;                             PipelineDepth => ($pipeline_depth>0?1:0), Retime=>'YES');
  `$pipe_P3 ->instantiate()` ( .in({SignB_P2, ZeroDiff_P2, diff_P2, a_gt_b_P2, LshiftAmt_P2, Expbase_pp0, Expbase_pp1 }) ,
                               .valid_in(valid_P2), .clk(clk) , .stall(stall), .reset(reset), 
                               .out({SignB_P3, ZeroDiff_P3, diff_P3, a_gt_b_P3, LshiftAmt_P3, Expbase_pp0_P3, Expbase_pp1_P3  }),
                               .valid_out(valid_out) );

  assign ExpDiff1_pp0_P3 = {Expbase_pp0_P3[`$ExtendedExp_width-1`:1] ^ Expbase_pp1_P3[`$ExtendedExp_width-1`:1], Expbase_pp0_P3[0] ^ ~Expbase_pp1_P3[0]};
  assign ExpDiff1_pp1_P3 = {Expbase_pp0_P3[`$ExtendedExp_width-2`:1] & Expbase_pp1_P3[`$ExtendedExp_width-2`:1], Expbase_pp0_P3[0] | Expbase_pp1_P3[0],1'b1};

//; my $CompoundAdder_obj = generate('CompoundAdder', 'CA', Width =>$ExtendedExp_width);
  `$CompoundAdder_obj->instantiate()` (
            //; if ($verif_mode =~ /ON/){
                                   .dumptolog(dumptolog),
            //; }
                                   .a(ExpDiff1_pp0_P3), .b(ExpDiff1_pp1_P3),
                                   .sum0(ExpDiff1_P3), .co0(co_dummy0_P3),
                                   .sum1(ExpDiff2_P3), .co1(co_dummy1_P3));

  assign shiftedDiff_P3 = {1'b0,diff_P3} << LshiftAmt_P3;
  assign LZA_wrong_P3 = shiftedDiff_P3[`$manB_width+2`]; 
  assign mostSticky_P3 = (| shiftedDiff_P3[`$manB_width-$manA_width-1`:0]);

  assign {ManDiff_out, Guard_out, Sticky_out} = LZA_wrong_P3 ? 
        {shiftedDiff_P3[`$manB_width+2`:`$manB_width-$manA_width+2`],
         mostSticky_P3 | shiftedDiff_P3[`$manB_width-$manA_width+1`] | shiftedDiff_P3[`$manB_width-$manA_width`]}
        : {shiftedDiff_P3[`$manB_width+1`:`$manB_width-$manA_width+1`],mostSticky_P3 | shiftedDiff_P3[`$manB_width-$manA_width`]};
  
  assign ExpDiff_out = ZeroDiff_P3 ? 0 : LZA_wrong_P3? ExpDiff2_P3[`$exp_width-1`:0] : ExpDiff1_P3[`$exp_width-1`:0]; // handle total cancelation case
  assign SignDiff_out = ZeroDiff_P3 ? 0 : a_gt_b_P3 ^ SignB_P3;
  assign Overflow_out = ~ZeroDiff_P3 & ( (|ExpDiff2_P3[`$ExtendedExp_width-1`:`$exp_width`]) | ( LZA_wrong_P3 & (&ExpDiff2_P3[`$exp_width-1`:0])) );
  assign ZeroDiff_out = ZeroDiff_P3;
  assign LZA_wrong_out = LZA_wrong_P3;

//; if ($verif_mode =~ /ON/){
// synopsys translate_off
always @(posedge dumptolog)
begin
    $display ("`$self->get_instance_path()`: ManA=%b",ManA_P1);
    $display ("`$self->get_instance_path()`: op1=%b op2=%b ",op1_P2, op2_P2);
    $display ("`$self->get_instance_path()`: ExpB_gt_ExpA_1=%b, ExpB_gt_ExpA_2=%b, ExpA_gt_ExpB_1=%b, ExpA_gt_ExpB_2=%b",ExpB_gt_ExpA_1_P1, ExpB_gt_ExpA_2_P1, ExpA_gt_ExpB_1_P1, ExpA_gt_ExpB_2_P1);
    $display ("`$self->get_instance_path()`: ExpDiff=%h ManDiff=%h Guard=%b Sticky=%b SignDiff=%b",ExpDiff_out, ManDiff_out, Guard_out, Sticky_out, SignDiff_out);
    $display ("`$self->get_instance_path()`: Expbase_pp0=%h, LShiftAmtWide=%d ExpDiff1=%h ExpDiff2=%h",Expbase_pp0, LShiftAmtWide_P2, ExpDiff1_P3, ExpDiff2_P3);
    $display ("`$self->get_instance_path()`: diff=%h max_shift_mask=%h LshiftAmt=%d shiftedDiff=%h LZA_wrong=%b",diff_P3, max_shift_mask_P1, LshiftAmt_P2, shiftedDiff_P3, LZA_wrong_P3);
    $display ("`$self->get_instance_path()`: Expbase_pp0=%h max_shift_dec=%h SignA=%b SignB=%b", Expbase_pp0,max_shift_dec_P1,  SignA_P1, SignB_P1);
end
// synopsys translate_on
//; }

endmodule

