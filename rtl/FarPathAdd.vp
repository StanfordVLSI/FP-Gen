/*************************************************************************
 ** From Perforce:
 **
 ** $Id: //Smart_design/ChipGen/FP-Gen/rtl/FarPathAdd.vp#1 $
 ** $DateTime: 2012/02/08 11:27:28 $
 ** $Change: 10078 $
 ** $Author: jbrunhav $
 *************************************************************************/

/* *****************************************************************************
 * Description:
 * Far Path Adder
 * 
 * 
 * Parameters:
 * * Width
 * 
 * Change bar:
 * -----------
 * Date           Author    Description
 * Oct 13, 2011   sameh   init version - ported Sameh's original code to 
 *                          genesis
 * ****************************************************************************/

/*******************************************************************************
 * PARAMETERIZATION
 * ****************************************************************************/
//; # Perl Libraries
//; use POSIX qw(ceil log); # For ceiling rounding and log math
//; sub CeilOfLog2{ return ceil(log(@_)/log(2)); }
//;
//; # get some values from the top
//; my $verif_mode = $self->get_top_param('VERIF_MODE'); # Reads this parameter from the top level
//; my $synth_mode = $self->get_top_param('SYNTH_MODE'); # Reads this parameter from the top level
//;
//; # module parameters
//; my $frac_width = parameter(Name=>'FractionWidth', Val=>52, 
//;                           Min=>4, Step=>1, 
//;                           Doc=>"Width of the Fraction for the multiplier (default is IEEE Double, 52 bit)  !FUNCTIONAL!");
//; my $exp_width = parameter(Name=>'ExponentWidth', Val=>11, 
//;                           Min=>4, Step=>1, 
//;                           Doc=>"Width of the exponent for the multiplier (default is IEEE Double, 11 bit)  !FUNCTIONAL!");
//; my $useInc = parameter(Name=>'useInc', Val=>'YES', List=>['YES', 'NO'],
//; 			   Doc=>"Inputs A has an increment signal");
//; my $pipeline_depth = parameter(Name=>'PipelineDepth', Val=>3, List=>[ 0,1,2,3,4,5,6,7 ] ,
//;                       Doc=>"Pipeline depth !FUNCTIONAL!");
//; my $enable_denormals = parameter(Name=>'EnableDenormals', Val=>'YES', 
//;                           List=>['YES','NO'], 
//;                           Doc=>"Enable denormals parameters to enable handling denormal values ".
//;                                "of inputs A and B correctly (YES/NO) !FUNCTIONAL!");
//;
//; # And some local variables
//; my $manA_width = $frac_width + 1;
//; my $manB_width = 2 * $manA_width;
//; my $ExtendedExp_width = $exp_width + 2;
//; my $shift_width = CeilOfLog2($manB_width+1) + 1;
module `mname`(
 //; if ($verif_mode =~ /ON/){
  input logic dumptolog,
 //; }
  input logic [`$manA_width-1`:0] ManA_in, 
  //; if ($useInc =~ /YES/){
  input logic IncA_in,
  //; }
  input logic [`$ExtendedExp_width-1`:0] ExpA_in, ExpB_in, ExpDifference_in, 
  input logic SignA_in, SignB_in, ZeroA_in, ZeroB_in, ExpA_gt_ExpB_in,
  input logic [`$manB_width-1`:0] ManB_in,
 //; if ($pipeline_depth>0) {
  input logic  clk , reset, valid_in, stall,
  output logic valid_out,
 //; }
  output logic [`$manA_width-1`:0] ManSum_out,
  output logic [`$exp_width-1`:0] ExpSum_out, 
  output logic Guard_out, Sticky_out, Overflow_out, ShiftExponent_out, SignSum_out, ZeroSum_out,
  output logic [`$ExtendedExp_width-1`:0] Expbase_pp0, Expbase_pp1

              );

  //; if (! ($useInc =~ /YES/) ){
  logic IncA_in;
  assign IncA_in = 0;
  //; }
  logic [`$manA_width-1`:0] ManA_P1;
  logic [`$manB_width-1`:0] ManB_P1;
  logic [`$ExtendedExp_width-1`:0] ExpA_P1, ExpB_P1, ExpDifference_P1;
  logic IncA_P1, IncA_P2, SignA_P1, SignA_P2, SignB_P1, SignB_P2, ZeroA_P1, ZeroA_P2, ZeroB_P1, ZeroB_P2, ExpA_gt_ExpB_P1, ExpA_gt_ExpB_P2, valid_P1, valid_P2, valid_P3, ManB_overnormal_P1, ManB_overnormal_P2, ManB_overnormal_P3;
  logic [`$manA_width-1`:0] ManSum_P3;
  logic [`$exp_width-1`:0] ExpSum_P3;
  logic Guard_P3, Sticky_P3, Overflow_P3, ShiftExponent_P3, SignSum_P2, SignSum_P3, ZeroSum_P3;
  logic [`$shift_width-1`:0] shift_amount_P1;
  logic [`$manB_width-1`:0] biggerFraction_P1, biggerFraction_P2, sum0_P2, sum1_P2;
  logic [`$manB_width+$manA_width-1`:0] shift_in_P1, shift_out_P1, shift_out_P2 , smallerFraction_P2;
  logic [`$manB_width-$manA_width-4`:0] sumMiddle_P2;
  logic [`$manA_width-1`:0]  sumRight_P3, sumCenter_P3, sumLeft_P3, sumUpperLeft_P3;
  logic [`$manA_width+3`  :0] sumUpper_P2, sumUpper_P3;

  logic [`$ExtendedExp_width-1`:0] ExtendedExpSum_P1, ExtendedExpSum_P2, ExtendedExpSum_P3, ExtendedExpSumInc_P3, ExtendedExpSumDec_P3, ExtendedExpSumPlus2_P3;
  logic [`$exp_width-1`:0] ExpSumCenter_P2, ExpSumCenter_P3, ExpSumRight_P3, ExpSumLeft_P3, ExpSumUpperLeft_P3;

  logic OverflowCenter_P3, OverflowRight_P3, OverflowLeft_P3, OverflowUpperLeft_P3;
  logic subtract_P1, subtract_P2, zeroSmallerFraction_P1, zeroSmallerFraction_P2, RSticky_P2, RSticky_P3, biggerFraction_ci_P2, shift_out_ci_P2, co0_P2, co1_P2, zero0_P2, zero1_P2, sumMiddleSticky_P2, sumMiddleSticky_P3;
  logic stickyRight_P3, guardRight_P3, stickyCenter_P3, guardCenter_P3, stickyLeft_P3, stickyUpperLeft_P3, guardLeft_P3, guardUpperLeft_P3, ExpSumCenterIsOne_P3;


//;   my $pipe_P1 = generate(  'FF_pipeline',  'pipe_P1',  
//;                             Width=> $manA_width + $manB_width + 3*$ExtendedExp_width + 6,
//;                             PipelineDepth => ($pipeline_depth>2?$pipeline_depth-2:($pipeline_depth==2?1:0)),
//;                             Retime=>'YES');
  `$pipe_P1 ->instantiate()` ( .in({ManA_in, IncA_in, ExpA_in, SignA_in, ManB_in, ExpB_in, SignB_in, ExpDifference_in, ZeroA_in, ZeroB_in, ExpA_gt_ExpB_in}) ,
                               .valid_in(valid_in), .clk(clk) , .stall(stall), .reset(reset), 
                               .out({ManA_P1, IncA_P1, ExpA_P1, SignA_P1, ManB_P1, ExpB_P1, SignB_P1, ExpDifference_P1, ZeroA_P1, ZeroB_P1, ExpA_gt_ExpB_P1}),
                               .valid_out(valid_P1) );


  assign subtract_P1 = SignA_P1 ^ SignB_P1;
  assign ManB_overnormal_P1 = ~ExpA_gt_ExpB_P1 & ManB_P1[`$manB_width-1`];
  assign ExtendedExpSum_P1  = ExpA_gt_ExpB_P1 ? ExpA_P1 : ExpB_P1;

  // Calculate shift amount
  assign shift_amount_P1 = ExpDifference_P1[`$ExtendedExp_width-1`:`$shift_width`]==0 ? ExpDifference_P1[`$shift_width-1`:0] : `$manB_width`; //saturation logic

  // Alignment & inversion
  assign biggerFraction_P1    = ExpA_gt_ExpB_P1 ? {1'b0,ManA_P1,{(`$manB_width-$manA_width-1`){IncA_P1}}} : ManB_P1 ;

  assign shift_in_P1          = ExpA_gt_ExpB_P1 ? {ManB_P1,{(`$manA_width`){1'b0}}} : {1'b0, ManA_P1,{(`$manB_width-1`){IncA_P1}}} ;
  assign shift_out_P1         = shift_in_P1 >> shift_amount_P1 ;
  assign zeroSmallerFraction_P1  = ~|shift_in_P1;

  
 



//;   my $pipe_P2 = generate(  'FF_pipeline',  'pipe_P2',  
//;                             Width=> $ExtendedExp_width + 2* $manB_width + 1*$manA_width+9,
//;                             PipelineDepth => ($pipeline_depth>2?1:0), Retime=>'YES');
  `$pipe_P2 ->instantiate()` ( .in({IncA_P1, ExpA_gt_ExpB_P1, ExtendedExpSum_P1, SignA_P1, SignB_P1, ZeroA_P1, ZeroB_P1, ManB_overnormal_P1, biggerFraction_P1, shift_out_P1, subtract_P1, zeroSmallerFraction_P1  }) ,
                               .valid_in(valid_P1), .clk(clk) , .stall(stall), .reset(reset), 
                               .out({IncA_P2, ExpA_gt_ExpB_P2, ExtendedExpSum_P2, SignA_P2, SignB_P2, ZeroA_P2, ZeroB_P2, ManB_overnormal_P2, biggerFraction_P2, shift_out_P2, subtract_P2, zeroSmallerFraction_P2  }),
                               .valid_out(valid_P2) );

  // - Middle Part (manB_width-manA_width-1): calculate sum using subtract& ~RSticky as an input
assign biggerFraction_ci_P2 = IncA_P2 & ExpA_gt_ExpB_P2;
assign shift_out_ci_P2      = IncA_P2 & ~ExpA_gt_ExpB_P2 & (&shift_out_P2[`$manA_width-1`:0]);
assign smallerFraction_P2   = subtract_P2 ? ~shift_out_P2 : shift_out_P2;

  // Divide the additions to 3 regions:
  // - Lower Part (manA_width): Use for sticky bit calculation Rsticky
  assign RSticky_P2= (~shift_out_ci_P2 & (|shift_out_P2[`$manA_width-1`:0]) ) | (~|shift_out_P2[`$manB_width+$manA_width-1`:`$manA_width`] & ~zeroSmallerFraction_P2); // RSticky calculated before inversion

//; my $CompoundAdder_obj = generate('CompoundAdder', 'SM', 
//;                                                 , Width =>$manB_width
//;                                                 , EnableCarryIn => 'ON'
//;                                                 , ZeroWidth => $manB_width-$manA_width-3);

   `$CompoundAdder_obj->instantiate()` (.a(smallerFraction_P2[`$manB_width+$manA_width-1`:`$manA_width`]),
                                     .b(biggerFraction_P2),
                                     .ci( biggerFraction_ci_P2 ),
                                     .sum0(sum0_P2), .co0(co0_P2), .zero0(zero0_P2),
                                     .sum1(sum1_P2), .co1(co1_P2), .zero1(zero1_P2)
//; if ($verif_mode =~ /ON/){
                                   , .dumptolog(dumptolog)
//; }
                                       );

  assign ZeroSum_P2 = (ZeroA_P2 & ZeroB_P2) | (subtract_P2 & ~RSticky_P2 & (shift_out_P2[`$manB_width+$manA_width-1`:`$manA_width`]==biggerFraction_P2));

//;if ($enable_denormals==1) {
  assign {sumUpper_P2,sumMiddle_P2, sumMiddleSticky_P2} =  subtract_P2 ?
                                                                ( (~RSticky_P2 & ~shift_out_ci_P2)?
                                                                            {co1_P2^subtract_P2,sum1_P2, ~zero1_P2}
                                                                           :{co0_P2^subtract_P2,sum0_P2, ~zero0_P2} )
                                                               :(shift_out_ci_P2?
                                                                           {co1_P2^subtract_P2,sum1_P2, ~zero1_P2}
                                                                          :{co0_P2^subtract_P2,sum0_P2, ~zero0_P2} )   ;
  assign SignSum_P2 = ZeroSum_P2? 0 :(ExpA_gt_ExpB_P2? SignA_P2: SignB_P2);

//;} else {
  assign {sumUpper_P2,sumMiddle_P2, sumMiddleSticky_P2} =  subtract_P2 ?
                                                                (co0_P2?
                                                                     ( (~RSticky_P2 & ~shift_out_ci_P2)?
                                                                                 {co1_P2^subtract_P2,sum1_P2, ~zero1_P2}
                                                                                :{co0_P2^subtract_P2,sum0_P2, ~zero0_P2} )
                                                                    :{co0_P2~^subtract_P2,~sum0_P2, ~zero1_P2})
                                                               :(shift_out_ci_P2?
                                                                           {co1_P2^subtract_P2,sum1_P2, ~zero1_P2} 
                                                                          :{co0_P2^subtract_P2,sum0_P2, ~zero0_P2} )   ; 
  assign SignSum_P2 = ZeroSum_P2? 0 :(ExpA_gt_ExpB_P2? SignA_P2^(subtract_P2 & ~co0_P2) : SignB_P2 );
//;}

  
  assign Expbase_pp0 = ExtendedExpSum_P2[`$exp_width-1`:0];
  assign Expbase_pp1 = {(`$ExtendedExp_width`){~ManB_overnormal_P2}};

//;   my $pipe_P3 = generate(  'FF_pipeline',  'pipe_P3',  
//;                             Width=> $ExtendedExp_width+$manA_width+9 ,
//;                             PipelineDepth => ($pipeline_depth>0?1:0), Retime=>'YES');
  `$pipe_P3 ->instantiate()` ( .in({ExtendedExpSum_P2, ManB_overnormal_P2, sumUpper_P2, sumMiddleSticky_P2, RSticky_P2, SignSum_P2, ZeroSum_P2  }) ,
                               .valid_in(valid_P2), .clk(clk) , .stall(stall), .reset(reset), 
                               .out({ExtendedExpSum_P3, ManB_overnormal_P3, sumUpper_P3, sumMiddleSticky_P3, RSticky_P3, SignSum_out, ZeroSum_out }),
                               .valid_out(valid_P3) );

 //UPPERLEFT needed only for sum0
  assign stickyUpperLeft_P3 = sumUpper_P3[2] | stickyLeft_P3;
  assign {sumUpperLeft_P3, guardUpperLeft_P3 }  = sumUpper_P3[`$manA_width+3`:3];
  assign {ExpSumUpperLeft_P3, OverflowUpperLeft_P3} = {ExtendedExpSumPlus2_P3[`$exp_width-1`:0],|ExtendedExpSumPlus2_P3[`$ExtendedExp_width-1`:`$exp_width`] | &ExtendedExpSumPlus2_P3[`$exp_width-1`:0]}; //ExpSumCenter + 1


  //LEFT needed only for sum0
  assign stickyLeft_P3 = sumUpper_P3[1] | stickyCenter_P3;
  assign {sumLeft_P3, guardLeft_P3 }  = sumUpper_P3[`$manA_width+2`:2];
  assign {ExpSumLeft_P3, OverflowLeft_P3} = {ExtendedExpSumInc_P3[`$exp_width-1`:0],|ExtendedExpSumInc_P3[`$ExtendedExp_width-1`:`$exp_width`] | &ExtendedExpSumInc_P3[`$exp_width-1`:0]}; //ExpSumCenter + 1


  //CENTER needed for sum0, ~sum0 and sum1
  assign stickyCenter_P3 =  sumUpper_P3[0] | stickyRight_P3;
  assign {sumCenter_P3, guardCenter_P3} = sumUpper_P3[`$manA_width+1`:1];
  assign ExpSumCenter_P3    = ExtendedExpSum_P3[`$exp_width-1`:0];
  assign OverflowCenter_P3  = (|ExtendedExpSum_P3[`$ExtendedExp_width-1`:`$exp_width`]) | (&ExtendedExpSum_P3[`$exp_width-1`:0]);


  //RIGHT needed for ~sum0 and sum1
  assign stickyRight_P3   = sumMiddleSticky_P3 | RSticky_P3;
  assign {sumRight_P3,guardRight_P3}  = sumUpper_P3[`$manA_width`:0];
  assign {ExpSumRight_P3, OverflowRight_P3} = {ExtendedExpSumDec_P3[`$exp_width-1`:0], |ExtendedExpSumDec_P3[`$ExtendedExp_width-1`:`$exp_width`]} ; //ExpSumRight - 1

  assign ExpSumCenterIsOne_P3  = ExpSumCenter_P3==1;

  assign ExtendedExpSumInc_P3 = ExtendedExpSum_P3 + 1;
  assign ExtendedExpSumPlus2_P3 = ExtendedExpSum_P3 + 2;
  assign ExtendedExpSumDec_P3 = ExtendedExpSum_P3 -1;

  assign {ExpSum_out, ManSum_out, Guard_out, Sticky_out, Overflow_out, ShiftExponent_out} =
      sumUpper_P3[`$manA_width+3`]?
               {ExpSumUpperLeft_P3, sumUpperLeft_P3, guardUpperLeft_P3, stickyUpperLeft_P3, OverflowUpperLeft_P3, 1'b1}
               :(sumUpper_P3[`$manA_width+2`]?
                    {ExpSumLeft_P3, sumLeft_P3, guardLeft_P3, stickyLeft_P3, OverflowLeft_P3, ~ManB_overnormal_P3}
                   :(sumUpper_P3[`$manA_width+1`] | ExpSumCenterIsOne_P3?       //shift only if the exponent is greater than 1
                        {ExpSumCenter_P3, sumCenter_P3, guardCenter_P3, stickyCenter_P3, OverflowCenter_P3, ManB_overnormal_P3}
                       :{ExpSumRight_P3, sumRight_P3, guardRight_P3, stickyRight_P3, OverflowRight_P3, 1'b1} ));




//; if ($verif_mode =~ /ON/){
// synopsys translate_off
always @(posedge dumptolog)
begin
    $display ("`$self->get_instance_path()`: ManA=%h, IncA=%h, ManB=%h", ManA_P1, IncA_P1, ManB_P1); 
    $display ("`$self->get_instance_path()`: ExpA=%h, ExpB=%h, ExpDifference=%h",ExpA_P1, ExpB_P1, ExpDifference_P1);
    $display ("`$self->get_instance_path()`: SignA=%b, SignB=%b, ZeroA=%b, ZeroB=%b, ExpA_gt_ExpB=%b",SignA_P1, SignB_P1, ZeroA_P1, ZeroB_P1, ExpA_gt_ExpB_P1); 
    $display ("`$self->get_instance_path()`: ExpSum=%h ManSum=%h Guard=%b Sticky=%b",ExpSum_P3, ManSum_P3, Guard_P3, Sticky_P3);
    $display ("`$self->get_instance_path()`: biggerFraction =%h ExpA_gt_ExpB=%h", biggerFraction_P1,ExpA_gt_ExpB_P1);
    $display ("`$self->get_instance_path()`: smallerFraction=%h shift_in=%h shift_amount=%d",smallerFraction_P2, shift_in_P1, shift_amount_P1);
    $display ("`$self->get_instance_path()`: RSticky=%b subtract=%b co1=%b",RSticky_P2, subtract_P1, co1_P2);
    $display ("`$self->get_instance_path()`: sum0=%h sum1=%h {sumUpper,sumMiddle}=%h",sum0_P2, sum1_P2, {sumUpper_P2,sumMiddle_P2});
    $display ("`$self->get_instance_path()`: ExpSumRight=%h sumRight=%h guardRight=%b stickyRight=%b",ExpSumRight_P3, sumRight_P3,guardRight_P3, stickyRight_P3);
    $display ("`$self->get_instance_path()`: ExpSumCenter=%h sumCenter=%h guardCenter=%b stickyCenter=%b",ExpSumCenter_P3, sumCenter_P3,guardCenter_P3, stickyCenter_P3);
    $display ("`$self->get_instance_path()`: ExpSumLeft  =%h sumLeft  =%h guardLeft=%b stickyLeft=%b",ExpSumLeft_P3, sumLeft_P3, guardLeft_P3, stickyLeft_P3);
    $display ("`$self->get_instance_path()`: sumUpper=%b Rsticky=%b",sumUpper_P2, RSticky_P2);
    $display ("`$self->get_instance_path()`: Overflow=%b OverflowCenter=%b",Overflow_P3, OverflowCenter_P3);
end
// synopsys translate_on
//; }

endmodule

