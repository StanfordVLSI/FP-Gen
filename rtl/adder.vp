/**************************************************************/
/* adder.vp                                                   */
/*    John Brunhaver jbrunhaver@gmail.com                     */
/**************************************************************/

//;# Import Libs
//; use POSIX ();
//;
//  PARAMETERS:
//; my $AdderType = parameter( name=>'AdderType', val=>'Sklansky' ,
//;                            doc=>'Type of Adder' ,
//;                            list=>[ 'Ripple' , 'Sklansky' ] ) ;
//; my $BW  = parameter( name=>'BitWidth', val=>16 , 
//;                      doc=>'!functional! BitWidth of operands' , 
//;                      min=>2 , max=>512, step=>1 );


//  ... Wrapper for the Various Adder Designs ... //
module `mname()` 
  (
    //Input Signals
    input logic  [ `$BW-1` : 0] a,
    input logic  [ `$BW-1` : 0] b,
    input logic                 ci,

    //Output Signals
    output logic [ `$BW-1` : 0] s ,
    output logic                co 
   );


//; my $adderInst ;
//; $AdderType eq 'Ripple'   and $adderInst = generate( 'adderRippleCarry'  , 'RippleInst'   , BitWidth=>$BW );
//; $AdderType eq 'Sklansky' and $adderInst = generate( 'adderSklansky', 'SklanskyInst' , BitWidth=>$BW );
   
`$adderInst->instantiate()` (.*); //Ports implied

      
endmodule : `mname` 