/**************************************************************/
/* adderSklanskyGPTree.vp                                     */
/*    John Brunhaver jbrunhaver@gmail.com                     */
/**************************************************************/

//;# Import Libs
//; use strict ;
//; use POSIX ;
//; use warnings FATAL=>qw(all) ;
//; #use diagnostics ;
//; use Data::Dumper ;
//;
//  PARAMETERS:
//; our $BW  = parameter( name=>'BitWidth', val=>32 , 
//;                      doc=>'!functional! BitWidth of input and output values.  32 corresponds to a 32 bit signal A added to a 32 bit signal B  resulting in a 32 bit output S. Legal Values: Integers from 2 to 512' , 
//;                      min=>2 , max=>512, step=>1 );
//;

//; #SYNTH PARAMETERS
//;
//;
//; our $ORIENTATION = parameter( name=>'Orientation', val=>'L',
//;                              doc=>'!placement! Indicates the orientation of the adder placement.  Horizontal indicates that the placement should be long in the horizontal direction with inputs travelling north to south or south to north.  Vertical indacates that the placement should be tall in the vertical direction with inputs travelling east to west or west to east.  An L shaped design splits the design into a vertical and horizontal component to wrap around a multp structure. Legal Values: horizontal , vertical , L ',
//;                              list=>[ 'horizontal' , 'vertical' , 'L' ] );  #, 
//; our $DATADIRECTION = parameter( name=>'Direction', val=>'NW_to_SE',
//;                                doc=>'!placement! Affects the direction that data travels.  NW_to_SE indicates will travel from the northwest down to the southeast. Legal Values: NW_to_SE',
//;                                list=>[ 'NW_to_SE' ] ); # 'SE_to_NW' 
//; our $GROUPNAME = parameter( name=>'GroupName', 
//;                            val=>("Adder" . "_" . $BW . "_" . $ORIENTATION . "_" . $DATADIRECTION ),
//;                            doc=>'!placement! GroupName is used as the synopsys groupname.  The purpose of this argument is to uniquify the instances such that they can be uniquly placed.  This name can be used when creating relative placements in the parent.  Legal Values: a unique name without white space or special characters' );
//;
//;
//; our $GROUPNAME2 = parameter( name=>'GroupName2', 
//;                            val=>("Adder" . "_" . $BW . "_" . $ORIENTATION . "_" . $DATADIRECTION . "_2" ),
//;                            doc=>'!placement! GroupName2 is used as the synopsys groupname.  The purpose of this argument is to uniquify the instances such that they can be uniquly placed.  This name can be used when creating relative placements in the parent.  Legal Values: a unique name without white space or special characters' );
//;
//; $ORIENTATION eq 'L' and   $GROUPNAME2 = parameter( name=>'GroupName2' , 
//;                                                    val=>( $GROUPNAME . "_2" ) ,
//;                                                    doc=>'GroupName in Layout'  );




//; #Synthesis SubRoutines
//;
//; our %placement ; # Arrays Holding Placement Info For ASCII figure
//;
//; our $id = 0 ;# sprintf( "%03x" , int( rand(4095) ) ) ; #id for instance names to help with id's
//;
//; our $groupName = $GROUPNAME ; # 
//; our $groupName2 = $GROUPNAME2 ; # 
//;
//; our $groupNameLong = "\${DESIGN_NAME}::" . $groupName ; #DO NOT PLACE THIS IN EVAL CONTEXT!!!
//; our $groupName2Long = "\${DESIGN_NAME}::" . $groupName2 ; #DO NOT PLACE THIS IN EVAL CONTEXT!!!
//;
//; my $placementFileName = "place_$GROUPNAME.tcl" ;
//;
//; our $height = ceil( log( $BW ) / log( 2 ) ); #Height of GP Tree
//;
//; our $cols  ;
//; our $rows  ;
//; our $cols2 ;
//; our $rows2 ;
//;
//; $ORIENTATION eq 'horizontal' and $cols = $BW + 1 ;
//; $ORIENTATION eq 'horizontal' and $rows = $height + 2 ;
//;
//; $ORIENTATION eq 'vertical' and  $cols = $height + 2 ;
//; $ORIENTATION eq 'vertical' and  $rows = $BW + 1 ;
//;
//; #Right
//; $ORIENTATION eq 'L' and  $cols2  = $height + 2.0 ;
//; $ORIENTATION eq 'L' and  $rows2  = floor(( $BW + 1.0 ) / 2.0 ) ;
//;
//; #Bottom
//; $ORIENTATION eq 'L' and  $cols =  ceil(( $BW + 1.0 ) / 2.0 ) ; 
//; $ORIENTATION eq 'L' and  $rows =  $height + 2.0  ;
//;
//; $cols <= 0 and $self->error( "Must have cols greater than 0");
//; $rows <= 0 and $self->error( "Must have rows greater than 0");
//; $ORIENTATION eq 'L' and  $cols2 <= 0 and $self->error( "Must have cols greater than 0");
//; $ORIENTATION eq 'L' and  $rows2 <= 0 and $self->error( "Must have rows greater than 0");
//;
//;
//; $placement{$groupName}{'col'} = $cols ;
//; $placement{$groupName}{'row'} = $rows ;
//; $ORIENTATION eq 'L' and $placement{$groupName2}{'col'} = $cols2 ;
//; $ORIENTATION eq 'L' and $placement{$groupName2}{'row'} = $rows2 ;
//;  
//;
//; open( PLACE , ">$placementFileName" ); 
//;
//;
//; sub createGroup{
//;     
//;     print PLACE "create_rp_group $groupName -columns $cols -rows $rows -allow_non_rp_cells \n";
//;
//;     if( $ORIENTATION eq 'L' ){
//;        print PLACE "create_rp_group $groupName2 -columns $cols2 -rows $rows2 -allow_non_rp_cells \n";
//;     } 
//; }
//;
//;
//;    
//; sub placeCell{
//;    my $inst = shift      ;
//;    my $x_in = shift         ;
//;    my $y_in = shift         ;
//;    my $cellType = shift ; 
//;    my $self = shift  ;
//;
//;    #Perform Coordinate Manipulation here...
//;    # if horizontal leave it alone
//;    # if vertical swap x an y ?
//;    # if L pick different group for x>foo and swap x an y for x>foo
//;
//;    my $x ;
//;    my $y ;
//;    my $g ;
//;    my $gL ;
//;    my $lsplit = $cols ;
//;
//;    #Flip X so LSB is at lower left
//;    $ORIENTATION eq 'horizontal' and  $x_in = $BW - $x_in - 1 ;
//;
//;    $ORIENTATION eq 'horizontal' and $g  = $groupName ;
//;    $ORIENTATION eq 'horizontal' and $gL = $groupNameLong;
//;    $ORIENTATION eq 'horizontal' and $x  = $x_in ;
//;    $ORIENTATION eq 'horizontal' and $y  = $y_in ;
//;    $ORIENTATION eq 'horizontal' and $x  >= $cols and $self->error( "Exceeded Col Count" );
//;    $ORIENTATION eq 'horizontal' and $y  >= $rows and $self->error( "Exceeded Row Count" );
//;
//;    #Flip X so LSB is at lower left
//;    $ORIENTATION eq 'vertical' and  $x_in = $BW - $x_in - 1 ;
//;    
//;    $ORIENTATION eq 'vertical' and $g  = $groupName ;
//;    $ORIENTATION eq 'vertical' and $gL = $groupNameLong ;
//;    $ORIENTATION eq 'vertical' and $x  = $height+2 -$y_in-1 ;
//;    $ORIENTATION eq 'vertical' and $y  = $x_in ;
//;    $ORIENTATION eq 'vertical' and $x  >= $cols and $self->error( "Exceeded Col Count" );
//;    $ORIENTATION eq 'vertical' and $y  >= $rows and $self->error( "Exceeded Row Count" );
//;
//;    #Flip X so LSB is at lower left
//;    $ORIENTATION eq 'L' and  $x_in = $BW - $x_in - 1 ;
//;
//;    #Bottom 0 to lsplit
//;    $ORIENTATION eq 'L' and  $x_in <  $lsplit and $g  = $groupName ;
//;    $ORIENTATION eq 'L' and  $x_in <  $lsplit and $gL = $groupNameLong ;
//;    $ORIENTATION eq 'L' and  $x_in <  $lsplit and $x  = $x_in;
//;    $ORIENTATION eq 'L' and  $x_in <  $lsplit and $y  = $y_in;
//;    $ORIENTATION eq 'L' and  $x_in <  $lsplit and  $x >= $cols and $self->error( "Exceeded Col Count at 141" );
//;    $ORIENTATION eq 'L' and  $x_in <  $lsplit and  $y >= $rows and $self->error( "Exceeded Row Count at 142" );
//;
//;    #Right lsplit to BW
//;    $ORIENTATION eq 'L' and  $x_in >= $lsplit and $g  = $groupName2 ;
//;    $ORIENTATION eq 'L' and  $x_in >= $lsplit and $gL = $groupName2Long ;
//;    $ORIENTATION eq 'L' and  $x_in >= $lsplit and $x  = $height+2 - $y_in -1   ;
//;    $ORIENTATION eq 'L' and  $x_in >= $lsplit and $y  = $rows2 - ($BW - $x_in)-1  ;
//;    $ORIENTATION eq 'L' and  $x_in >= $lsplit and $x >= $cols2 and $self->error( "Exceeded Col Count at $inst $x $cols2 149" );
//;    $ORIENTATION eq 'L' and  $x_in >= $lsplit and $y >= $rows2 and $self->error( "Exceeded Row Count at 150" );
//;
//;    #Write to placement array
//;    $placement{$g}{'p'}[$x][$y] = $cellType ;
//;
//;    #Place Leaf Cell
//;    print PLACE '                                                                   ' ."\n" ;
//;    print PLACE '           set MCELLS  [ get_cells -hierarchical "*'.$inst.'"] ;   ' ."\n" ;
//;    print PLACE '           set MC [ get_object_name [index_collection $MCELLS 0 ]] ' ."\n" ;
//;    print PLACE '           set CHILD [get_cells "${MC}/*"];   ' ."\n" ;
//;    print PLACE '           set CNT [sizeof_collection $CHILD];   ' ."\n" ;
//;    print PLACE '           create_rp_group '.$inst.'GP -columns ${CNT} -rows 1   ' ."\n" ;
//;    print PLACE '           set C_CNT 0 ;      ' ."\n" ;
//;    print PLACE '           foreach_in_collection C $CHILD {   ' ."\n" ;
//;    print PLACE '                add_to_rp_group ${DESIGN_NAME}::'.$inst.'GP -leaf [get_object_name $C] -column $C_CNT -row 0 ;   ' ."\n" ;
//;    print PLACE '                set C_CNT [expr $C_CNT + 1 ]   ' ."\n" ;
//;    print PLACE '            }   ' ."\n" ;
//;    print PLACE '            ' ."\n" ;
//;    print PLACE '            add_to_rp_group '.$gL.' -hierarchy ${DESIGN_NAME}::'.$inst.'GP -column '.$x.' -row '.$y.' ;   ' ."\n" ;
//;    print PLACE '              '   ."\n" ;
//;    print PLACE "\n get_cells -hierarchical \"\*$inst\"\n" ;  
//; }
//;
//;
//;
//; sub printASCIIPlacement{
//;
//;   #Print Out Placement INFO
//;   foreach my $g ( sort keys %placement ){
//;     open( MYP , ">$g.info" );
//;     #print STDOUT "\n\n $g \n\n" . Dumper( \%placement ) . "\n\n" ;
//;     #print "// Row " .  ($placement{$g}{'row'}+1) . " \n" ; 
//;     #print "// Col " . $placement{$g}{'col'} . "\n" ; 
//;     print MYP  "Placing Sklansky GP Adder for group $g " .  ($placement{$g}{'row'}+1) . " " . $placement{$g}{'col'} . "\n" ;
//;     for( my $j = $placement{$g}{'row'}+1 ; $j>=0 ; $j-- ){
//;        for( my $i = 0 ; $i < $placement{$g}{'col'} ; $i++ ){
//;          $placement{$g}{'p'}[$i][$j] and print MYP "$placement{$g}{'p'}[$i][$j] ";
//;          $placement{$g}{'p'}[$i][$j] or print MYP "     ";
//;        }
//;        print MYP "\n" ;   
//;     }
//;
//;     close( MYP )
//;   } 
//; }
//;
//;




module `mname()` 
  (
    //Input Signals
    input logic  [ `$BW-1` : 0] p,
    input logic  [ `$BW-1` : 0] g,

    //Output Signals
    output logic [ `$BW-1` : 0] P ,
    output logic [ `$BW-1` : 0] G 
   );

//; #  /* synopsys dc_tcl_script_begin
//; #    set_ungroup [current_design] true
//; #    set_flatten true -effort high -phase true -design [current_design]
//; #  */
//; parameter( name=>"Ungroup" , val=>"YES" , list=>["YES","NO"] );
//; parameter( name=>"Flatten" , val=>"YES" , list=>["YES","NO"] );

//; 
//; createGroup();
//;  

   
// Convert all input signals into individual wires of the form A_1 A_BW etc
//; for( my $i=0 ; $i < $BW ; $i++ ){
   logic   P_`$i`_to_`$i`_H ;
   logic   G_`$i`_to_`$i`_H ;
   assign  P_`$i`_to_`$i`_H = p[`$i`];
   assign  G_`$i`_to_`$i`_H = g[`$i`];
//;}

   
   logic  P_`$BW`_to_`$BW`_H;
   logic  G_`$BW`_to_`$BW`_H;
   assign P_`$BW`_to_`$BW`_H = 1'b0 ;
   assign G_`$BW`_to_`$BW`_H = 1'b0 ;
   
   
// Build Sklansky Tree: Figure 10.34b of Weste Harris 3rd Ed. pg 662
//; $height = ceil( log( $BW ) / log( 2 ) ); #TODO-> is this the same $height..;.
//; for( my $j=0 ; $j < $height ; $j++ ){
//;     my $runs = 2 ** ( $j ) ; #Number of grey cells in a row 1,2,4,8 ...
//;
//;     my $li = $runs ;    
//;     #Place Greyish Black Cells at right hand side of row   
//;     for( ; ($li < (2*$runs)) && ($li <= $BW) ; $li++ ){
//;           print "// id: $id \n" ;
//;           print "// BW-i: " . ( $BW-$li ) . "\n" ;
//;           print "// h-j: " . ( $height - $j ) . " \n" ;
//;           my $instName = sprintf( "B_%03d_loc_%03d_%03d_loc", $id , $BW-$li , $height - $j );
//;           #$placement[ $BW-$li ][ $height - $j ] = sprintf( "B%03d",$li);
//;           my $I = $li ;                
//;           my $K = $runs;               
//;           my $L = $K-1;                
//;           my $J = 0;        
//;           my $adderCell = generate( 'adderBlackCell', $instName ) ;
//;           placeCell( $instName , $BW-$li , $height - $j ,  sprintf( "B%03d",$li) ,$self  );
              logic  G_`$I`_to_`$J`_H ; 
              logic  P_`$I`_to_`$J`_H ; 
             `$adderCell->instantiate()` (
					      .P_UP( P_`$I`_to_`$K`_H),
					      .G_UP( G_`$I`_to_`$K`_H),
					      .P_DN( P_`$L`_to_`$J`_H),
					      .G_DN( G_`$L`_to_`$J`_H),
					      .P_ALL(P_`$I`_to_`$J`_H),
					      .G_ALL(G_`$I`_to_`$J`_H)  ); //Ports implied
//;     }
//;
//;
//;     #Place Black Cells Along Rest of Row
//;     while( $li <= $BW ){
//;          $li+=$runs ;
//;          my $bottum = $li - 1 ; #Index for last empty slot before black cell
//;          for( my $it = 0 ; $it < $runs && $li <= $BW ; $it++ , $li++ ){
//;             my $instName2 = sprintf( "B_%03d_loc_%03d_%03d_loc", $id , $BW-$li , $height - $j );
//;             #$placement[ $BW-$li ][ $height - $j ] = sprintf( "B%03d",$li);
//;             my $I2 = $li ;
//;             my $K2 = $bottum+1;
//;             my $L2 = $K2-1 ;
//;             my $J2 = $bottum-$runs+1;
//;             my $adderCell2 = generate( 'adderBlackCell' ,  $instName2 );
//;             placeCell( $instName2 , $BW-$li , $height - $j ,  sprintf( "B%03d",$li) , $self );
                logic 	      P_`$I2`_to_`$J2`_H;
                logic 	      G_`$I2`_to_`$J2`_H;
                `$adderCell2->instantiate()` ( 
					      .P_UP( P_`$I2`_to_`$K2`_H),
					      .G_UP( G_`$I2`_to_`$K2`_H),
					      .P_DN( P_`$L2`_to_`$J2`_H),
					      .G_DN( G_`$L2`_to_`$J2`_H),
					      .P_ALL(P_`$I2`_to_`$J2`_H),
					      .G_ALL(G_`$I2`_to_`$J2`_H)  );           
  
//;          }
//;     }    
//; }
   
//; for( my $i=0 ; $i < $BW ; $i++ ){
   assign  P[`$i`] = P_`$i`_to_0_H ;
   assign  G[`$i`] = G_`$i`_to_0_H ;
//;}

//; printASCIIPlacement();


   
endmodule : `mname` 
