/*************************************************************************
 ** From Perforce:
 **
 ** $Id$
 ** $DateTime$
 ** $Change$
 ** $Author$
 *************************************************************************/

/* *****************************************************************************
 * Description:
 * Compound Adder is an adder that outputs sum and sum+1
 * 
 * 
 * Parameters:
 * * Width, EnableCarryIn, ZeroWidth
 * 
 * Change bar:
 * -----------
 * Date           Author    Description
 * Oct 03, 2011   shacham   init version - ported Sameh's original code to 
 *                          genesis
 * ****************************************************************************/

/*******************************************************************************
 * PARAMETERIZATION
 * ****************************************************************************/
//; # get some values from the top
//; my $verif_mode = $self->get_top_param('VERIF_MODE'); # Reads this parameter from the top level
//; my $synth_mode = $self->get_top_param('SYNTH_MODE'); # Reads this parameter from the top level
//;
//; # module parameters
//; my $width = parameter(Name=>'Width', Val=>109, Min=>2, Step=>1,
//;                       Doc=>"Width of signals to be added  !FUNCTIONAL!");
//; my $enable_ci = parameter(Name=>'EnableCarryIn', Val=>'OFF', List=>['ON','OFF'],
//;                       Doc=>"Enables a carry in bit at the LSB in addition to the 2 addends  !FUNCTIONAL!");
//; my $zero_width = parameter(Name=>'ZeroWidth', Val=>0, Min=>0, Step=>1,
//;                       Doc=>"checks the lower ZeroWidth bits of sum and sum+1 if they are zero  !FUNCTIONAL!");

module `mname` (
    //; if ($verif_mode =~ /ON/){
    input logic 		dumptolog,
    //; }
    input logic [`$width-1`:0] 	a, b,
    //; if ($enable_ci =~ /ON/) {
    input logic 		ci,
    //; }
    output logic 		co0, co1,
    //; if ($zero_width > 0){
    output logic 		zero0, zero1,
    //; }
    output logic [`$width-1`:0] sum0,sum1
		);
   

   logic [`$width-1`:0]   g,p,G,P, carry0, carry1;
   logic [`$width-1`:0]   in0, in1;
   logic 		  cout, cout0, cout1;

   //; if ($enable_ci =~ /ON/) {
   //Half adder
   assign in0          = a^b;
   assign {cout , in1} = { a&b , ci};
   //; }else{
   assign cout = 0;
   assign in0 = a ;
   assign in1 = b;
   //; }
   
  assign g = in0 & in1;
  assign p = in0 ^ in1;

  //; my $CompoundAdderTree_obj = generate('SklanskyAdderTree', 'CompoundAdderTree', Width => $width); 
  `$CompoundAdderTree_obj->instantiate` (.g(g), .p(p), .G(G), .P(P));

   // the cout is not accurate
  assign {cout0, carry0} = { G   , 1'b0}; 
  assign {cout1, carry1} = { G|P , 1'b1};

  assign sum0 = p ^ carry0;
  assign sum1 = p ^ carry1;

  assign co0 = cout0 | cout;
  assign co1 = cout1 | cout;

/*
  assign {co0, sum0} = a + b;
  assign {co1, sum1} = a + b + 1;
*/

   //; if ($zero_width > 0){
   //; my $SC0_obj = generate('SumComparator', 'SC0', Width => $zero_width);
   `$SC0_obj->instantiate` (.a(a[`$zero_width-1`:0]), .b(b[`$zero_width-1`:0]), .ci(ci), .sum({ (`$zero_width`){1'b0}}), .equal(zero0));
   //; my $SC1_obj = generate('SumComparator', 'SC1', Width => $zero_width);
   `$SC1_obj->instantiate` (.a(a[`$zero_width-1`:0]), .b(b[`$zero_width-1`:0]), .ci(ci), .sum({ (`$zero_width`){1'b1}}), .equal(zero1));
   //; }


   
   //; if ($verif_mode =~ /ON/){
   always @(posedge dumptolog)
   begin
   //;   if ($enable_ci =~ /ON/) {
      $display ("`$self->get_instance_path()`: a=%h b=%h ci=%b",a, b, ci);
   //;   } else {
      $display ("`$self->get_instance_path()`: a=%h b=%h",a, b);
   //;   }
      $display ("`$self->get_instance_path()`: sum0=%h co0=%h",sum0, co0);
      $display ("`$self->get_instance_path()`: sum1=%h co1=%h",sum1, co1);
      //; if ($zero_width > 0){
      $display ("`$self->get_instance_path()`: zero0=%b zero1=%b",zero0, zero1);
      //; }
   end
   //; }

endmodule

