/*************************************************************************
 ** From Perforce:
 **
 ** $Id: //Smart_design/ChipGen/FP-Gen/rtl/OS1Column.vp#1 $
 ** $DateTime: 2011/11/17 23:30:49 $
 ** $Change: 9561 $
 ** $Author: artem $
 *************************************************************************/

/* *****************************************************************************
 * Description:
 * This is a OS1Column that process a vertical slice in multiplication tree 
 * using a OS type 1 tree architecture
 *
 * Parameters:
 * * ColumnHight, ColumnPosition, MinRow, BoothType, OneLessCarryIn, LayoutShape
 * 
 *
 * Inputs:
 * * Given that N=ColumnHight
 * * [N-1:0] pp                 
 * * [(N-3)-1:0] ci   (Note: if OneLessCarryIn then we have one less ci)
 *  
 * Outputs:
 * * sum
 * * carry
 * * [(N-3)-1:0] co
 *
 * Change bar:
 * -----------
 * Date           Author    Description
 * Nov 22, 2011   Artem     initial version
 * Dec 19, 2011   Artem     Removed unused HAs. Fixed OS1 for 128bit FP Mult
 * Jan 08, 2012   Artem     Changed how ci[] is wired to produce min. delay
 * Jan 25, 2012   Artem     Fixed $Y culculation for the first CSA (and placement for 
 *                          all CSAs). Routed from previous CSA sum to the ci of the 
 *                          next one in the branch to compensate slow/fast paths
 * 
 * ****************************************************************************/

/* Zhi-Jian (Alex) Mou "'Overturned-Stairs' Adder Trees and Multiplier Design" IEEE '92


n   array        depth
----------------------
2   -              0
3   3              1      
4   4              2      
5   3,2            3      
6   3,3            3      
7   3,4            4      
8   3,3,2          4               
9   3,3,3          4           
10  3,3,4          5           
11  3,3,3,2        5         
12  3,3,3,3        5           
13  3,3,3,4        5
14  3,3,3,5        6
15  3,3,3,4,2      6
16  3,3,3,4,3      6
17  3,3,3,4,4      6
18  3,3,3,4,5      6
19  3,3,3,4,6      7
20  3,3,3,4,5,2    7
21  3,3,3,4,5,3    7
22  3,3,3,4,5,4    7
23  3,3,3,4,5,5    7
24  3,3,3,4,5,6    7
25  3,3,3,4,5,7    8
26  3,3,3,4,5,6,2  8
27  3,3,3,4,5,6,3  8
28  3,3,3,4,5,6,4  8
29  3,3,3,4,5,6,5  8
30  3,3,3,4,5,6,6  8
31  3,3,3,4,5,6,7  8
32  3,3,3,4,5,6,8  9
33  3,3,3,4,5,6,7,2  9
34  3,3,3,4,5,6,7,3  9


detect n at which the number of arrays increases:

n = 1 + (4+4+4+5+6+7+.....+d-1) = 3 + (1+2+3+4+...+d-1) = 3+ Sigma ( x -> 1:d-1 , x) = 3 + (d-1)*(d-1+1)/2 = 3+d*(d-1)/2 
d^2 - d + 6 - 2n = 0
d = (1+sqrt(8*n-23))/2 = (1+(8*n-23)**0.5)/2
array_count = d-1 = ((8*n-23)**0.5-1)/2

d - tree height
*/




/*******************************************************************************
 * PARAMETERIZATION
 * ****************************************************************************/
//; # Perl Libraries
//; use POSIX qw(floor ceil); # For floor and ceiling rounding math 
//;
//; # get some values from the top
//; my $verif_mode = $self->get_top_param('VERIF_MODE'); # Reads this parameter from the top level
//; my $synth_mode = $self->get_top_param('SYNTH_MODE'); # Reads this parameter from the top level
//;
//; # module parameters
//; my $pp_count = parameter(Name=>'PPCount', Val=>4, Min=>0, Step=>1,
//;                          Doc=>"Number of partial products to sum");
//; my $col = parameter(Name=>'ColumnPosition', Val=>0, Min=>0, Step=>1,
//;                          Doc=>"The column number");
//; my $min_row = parameter(Name=>'MinRow', Val=>0, Min=>0, Step=>1,
//;                          Doc=>"The starting row position");
//; my $booth = parameter(Name=>'BoothType', Val=>1, Min=>1, Max=>4, Step=>1,
//;                       Doc=>"What booth was used to create the partial products? ".
//;                            "(This determines the slope of the partial products ".
//;                            "paralleloid)");
//; my $prev_col = parameter(Name=>'PrevColumn', Val=>-1, 
//;			     Doc=>"Pointer to the previous column of the multiplier ".
//;				  "(must be assigned or set to zero at instantiation!)");
//; $self->error("Parameter PrevColumn must be assigned with a pointer to a Wallace column or 0 (zero)!")
//;          unless $prev_col || $prev_col==0;
//;
//; my $layout_shape = parameter(Name=>'LayoutShape',Val=>'Square', List=>['Square','Parallelogram'],
//;                              Doc=>"Hints for layout positioning (Supported layouts: Square, Parallelogram)");
//;
//;
//; my $ci_w = 0;
//; if ($prev_col){
//;     $ci_w = $prev_col->get_param('CarryOutWidth');
//; }
//; 
//
//;     my $co_w = $pp_count-3;
//; if($ci_w == $pp_count-1){
//;     $co_w =$ci_w-1;
//; }elsif($ci_w == $pp_count-2){
//;     $co_w =$ci_w;
//;}
//;
//
//co_w=`$co_w`
//
//; 
//; my $col_ht = $pp_count;
//; # print STDERR "DEBUG: pp_count=$pp_count, col=$col, min_row=$min_row, booth=$booth, ci_w=$ci_w, co_w=$co_w \n";
//DEBUG: pp_count=`$pp_count`, ci_w=`$ci_w`, co_w=`$co_w`


module `mname()` (
    input logic [`$col_ht-1`:0] pp,
//; if($ci_w){
    input logic  [`$ci_w-1`:0] ci,
//; }
//;if($co_w){
    output logic [`$co_w-1`:0] co,
//;}
    output logic sum, carry
   );

   //; my $pp_count_eff = $co_w+3;
   //;# $pp_count_eff    = $ci_w + 3 if ($ci_w + 3 ) > $pp_count;
   //;# $pp_count_eff =  $ci_w + $pp_count if ($pp_count<3);
   //;
   //; my $array_count = ($pp_count_eff>2) ? ceil((sqrt(8*$pp_count_eff-23)-1)/2) : 0;
   //; 
   //; $array_count = ($array_count - 1) if ($pp_count_eff==(3+($array_count)*($array_count - 1)/2 + 1) && $pp_count_eff > 5);
   //; $array_count = 1 if ($pp_count_eff==3 || $pp_count_eff==2);
   //
   // array_count = `$array_count`;pp_count_eff = `$pp_count_eff`
   //
   //;
   //;  my $pp_index = 0;
   //;  my $ci_index = 0;
   //;  my $co_index = 0;
   //;  my $pp_remain = $pp_count_eff;
   //;  my $array_csa = 0;
   //;  my $array_csa_prev = 0;
   //;  my @array_conn =("","","");
   //;
   //;  my $row = $min_row;
   //;  my $Y = $col;
   //;    $Y = $col - $row * $booth  if $layout_shape =~ /Square/;
   //;    $Y = $col if $layout_shape =~ /Parallelogram/;
   //; 
   //;  my $put_csa = 1;
   //;
   //;  sub min ($$) { $_[$_[0] > $_[1]] }
   //;
   //;  my $csa_cnt = -1;
   //;  my $csa_cnt_prev = 0;
   //;
   //;  for (my $array=0; $array < $array_count; $array++){
   //;	     my $array_length = min($array+1,$col_ht - 3 - $array*($array+1)/2);
   //;       if($array == ($array_count-1)) {
   //;	         $array_length = $pp_remain;
   //;       } elsif($array==0 || $array==1){
   //;           $array_length = 3;
   //;       }
   //;
   //;       $csa_cnt_prev = $csa_cnt;

   //;
   //;       $array_csa = $array_length - 2;
   //;       $array_csa = 1 if ($array_length==2);
   //
   // array = `$array` , array_length = `$array_length`;array_csa = `$array_csa`
   //;
   //;       my $extra_ci = 0;
   //;	     for(my $nodes = 0; $nodes < $array_csa; $nodes++ ){
//$nodes=`$nodes`
   //;           $extra_ci = 0;
   //;           if($nodes == 0 && (($array_count==1 && $array_csa==1) || $pp_remain>2) ){
   //;               $put_csa = 0;
   //;               $array_conn[0] = "pp[".($pp_index++)."]";$pp_remain--;
   //;               if($pp_index<$pp_count){
   //;                   $array_conn[1] = "pp[".($pp_index++)."]";$pp_remain--;
   //;               }else{
   //;                   $array_conn[1] = "ci[".$csa_cnt."]";$ci_index++;$pp_remain--;
   //;               }
   //;
   //;               if($pp_index<$pp_count){
   //;                   $array_conn[2] = "pp[".($pp_index++)."]";
   //;                   $put_csa = 1;
   //;                   $pp_remain--;
   //;               }elsif($ci_w>0 && $ci_w>$co_w){
   //;                   $csa_cnt++;
   //;                   $pp_remain--;
   //;                   $array_conn[2] = "ci[".$csa_cnt."]";$ci_index++;
   //;                   $put_csa = 1;
   //;               }

   //;           } elsif($nodes == 0 && $pp_remain==2) {
   //;#If there are only 2 pps in the branch, HA can be replaced by a wire               
   //;               $array_conn[0] = "pp[".($pp_index++)."]" ;
   //;               $pp_remain--;
   //;               $put_csa = -1;
       logic pp_`$array`_`$nodes`_s;
       assign pp_`$array`_`$nodes`_s = `$array_conn[0]`;
   //;               $csa_cnt = ($csa_cnt + 1) if(($ci_index<=($ci_w-2) && $array_count==2));
   //;               $csa_cnt = ($csa_cnt + 1) if(($ci_index<($ci_w-3) && $array_count>2));
   //;           } else {
   //;               $put_csa = 1;
   //;               if($pp_index<$pp_count){
   //;                   $array_conn[0] = "pp[".($pp_index++)."]";
   //;                   $pp_remain--;
   //;               }else{
   //;                   $extra_ci = 1;
   //;                   $array_conn[0] = "ci[".$csa_cnt."]";$ci_index++;
   //;                   $pp_remain--;
   //;               }
   //;
   //;               $array_conn[1] = "pp_${array}_".($nodes-1)."_s";
   //;
   //;               if(($array==($array_count-1)) && ($ci_index>=$ci_w  || ( $nodes==($array_csa-1) && $ci_w==($pp_count-2)) ) ){
   //;                   $put_csa = 0;
   //;               }else{
   //;                   $csa_cnt = $csa_cnt+1 if ($extra_ci);
   //;                   $array_conn[2] = "ci[".$csa_cnt."]";$ci_index++;
   //;               }
   //;           }
   //;
   //;           if($put_csa!=-1) {
       logic pp_`$array`_`$nodes`_s;
   //;#csa_${array}_${nodes}_${row}_${Y}
   //;               my $CSA_obj = generate($put_csa?'CSA':'HA', "csa".($csa_cnt+1)."_${row}_${Y}");
   //;               $row++;
   //;               $Y = $col - $row * $booth  if $layout_shape =~ /Square/;
   //;               $Y = $col if $layout_shape =~ /Parallelogram/;
   //;
   //;               $csa_cnt++;
   //;               if($put_csa){
      `$CSA_obj->instantiate()` ( .a(`$array_conn[0]`), .b(`$array_conn[2]`), .ci(`$array_conn[1]`),
   //;               }else{
      `$CSA_obj->instantiate()` ( .a(`$array_conn[0]`), .b(`$array_conn[1]`),
   //;               }
   //;
   //;               if(($pp_remain==0 && $array_count==1) || $co_w==0){
                                    .s(sum), .co(carry) );
   //;               } else {
                                  .s(pp_`$array`_`$nodes`_s), .co(co[`$co_index`]) );
   //;                   $co_index++;
   //;               }
   //;           }#if($put_csa){
   //;       }#for(my $nodes = 0; $nodes < $array_csa; $nodes++ )
   //;
 
   //;########################## Branch Merge
   //;
   //;           if($array==1 && $pp_index==$pp_count && ($ci_index+1)==$ci_w){
   //;#This is the case of 2 branches and one less ci. Since merge CSA takes 2 ci and sum from branch 0, but we only have one ci left, we can skip HA (CSA turns into HA with 2 inputs) and add everything in root 
      logic pp_merge1_`$array-1`_s;
      assign pp_merge1_`$array-1`_s = pp_0_0_s;
   //;           }elsif($array==1) {
   //####################Merge branch 0 and 1
   //;               $put_csa = 1;
   //;               $array_conn[0]="";$array_conn[1]="";$array_conn[2]="";
   //;
   //;               $array_conn[0]= "ci[".$csa_cnt_prev."]";$ci_index++;
   //;               $array_conn[1]="pp_0_0_s";
   //;               if($ci_index<$ci_w) {
   //;                   $array_conn[2]= "ci[".$csa_cnt."]";$ci_index++;
   //;               }elsif($array ==($array_count-1) && ($pp_index<$pp_count) ){
   //;                   $array_conn[2] = "pp[${pp_index}]";$pp_index++;
   //;               }else{
   //;                   $put_csa = 0;
   //;               }
   //;
   //;#                csa_merge_${array}_${row}_${Y}
   //;       	     my $CSA_obj = generate($put_csa?'CSA':'HA', "csa".($csa_cnt+1)."_${row}_${Y}");
   //;               $row++;
   //;               $Y = $col - $row * $booth  if $layout_shape =~ /Square/;
   //;               $Y = $col if $layout_shape =~ /Parallelogram/;
   //;
   //;               $csa_cnt++;
      logic pp_merge1_`$array-1`_s;
   //;              if($put_csa){
      `$CSA_obj->instantiate()` ( .a(`$array_conn[0]`), .b(`$array_conn[2]`), .ci(`$array_conn[1]`),
   //;              }else{
      `$CSA_obj->instantiate()` ( .a(`$array_conn[0]`), .b(`$array_conn[1]`),
   //;              }
                                  .s(pp_merge1_`$array-1`_s), .co(co[`$co_index`]) );



   //;               $co_index++;
   //;           } elsif($array!=0) {
   //####################Merge branch `$array-1` and `$array`
   //;               $array_conn[0]="";$array_conn[1]="";$array_conn[2]="";
   //;               $put_csa = 1;
   //;
   //;               if($array < 3) {
   //;                   $array_conn[0]="pp_".($array-1)."_".($array_csa_prev-1)."_s";
   //;               }else{
   //;                   $array_conn[0]="pp_merge_".($array-2)."_s";
   //;               }


   //;               if($pp_remain==1 && ($pp_index+1)==$pp_count) {
   //;                   $array_conn[1]= "pp[${pp_index}]";$pp_index++;$pp_remain--;
   //;               }elsif($ci_index<($ci_w-3) || $ci_w < $co_w || $ci_w == ($pp_count-3)){
   //;                   $array_conn[1]=  "ci[".$csa_cnt."]";$ci_index++;
   //;               } else {
   //;                   $put_csa = 0;
   //;                   $array_conn[1]="pp_${array}_".($array_csa-1)."_s";
   //;               }
   //;               $array_conn[2]="pp_${array}_".($array_csa-1)."_s";
   //;
   //;#                csa_merge_${array}_${row}_${Y}
   //;       	     my $CSA_obj = generate($put_csa?'CSA':'HA', "csa".($csa_cnt+1)."_${row}_${Y}");
   //;               $row++;
   //;               $Y = $col - $row * $booth  if $layout_shape =~ /Square/;
   //;               $Y = $col if $layout_shape =~ /Parallelogram/;
   //;
   //;               $csa_cnt=$csa_cnt+1 if ($put_csa || $ci_index<=($ci_w-3));
      logic pp_merge_`$array-1`_s, pp_merge1_`$array-1`_s;

   //;              if($put_csa){
      `$CSA_obj->instantiate()` ( .a(`$array_conn[0]`), .b(`$array_conn[1]`), .ci(`$array_conn[2]`),
   //;              }else{
      `$CSA_obj->instantiate()` ( .a(`$array_conn[0]`), .b(`$array_conn[1]`),
   //;              }
                                  .s(pp_merge_`$array-1`_s), .co(co[`$co_index`]) );

   //;               $co_index++;
   //;
   //;               $put_csa = 1;
   //;               $array_conn[0]="";$array_conn[1]="";$array_conn[2]="";

   //;               if(($ci_index+1)<$ci_w) {
   //;                   $array_conn[0]= "ci[".$csa_cnt_prev."]";$ci_index++;
   //;                   $array_conn[1]="pp_merge1_".($array-2)."_s";
   //;                   $array_conn[2]= "ci[".$csa_cnt."]";$ci_index++;
   //;#                    csa_merge1_${array}_${row}_${Y}
   //;       	         my $CSA_obj = generate($put_csa?'CSA':'HA', "csa".($csa_cnt+1)."_${row}_${Y}");
   //;                   $row++;
   //;                   $Y = $col - $row * $booth  if $layout_shape =~ /Square/;
   //;                   $Y = $col if $layout_shape =~ /Parallelogram/;
   //;
   //;                   $csa_cnt++;
      `$CSA_obj->instantiate()` ( .a(`$array_conn[0]`), .b(`$array_conn[1]`), .ci(`$array_conn[2]`),
                                  .s(pp_merge1_`$array-1`_s), .co(co[`$co_index`]) );
   //;                   $co_index++;
   //;               }elsif($pp_index<$pp_count){
   //;                   $put_csa = 1;
   //;                   $array_conn[0]="pp[${pp_index}]";$pp_index++;
   //;                   $array_conn[1]="pp_merge1_".($array-2)."_s";
   //;                   if($ci_index<$ci_w){
   //;                       $array_conn[2] =  "ci[".$csa_cnt_prev."]";$ci_index++;
   //;                   }else{
   //;                        $put_csa = 0;
   //;                   }
   //;#                    csa_merge1_${array}_${row}_${Y}
   //;       	         my $CSA_obj = generate($put_csa?'CSA':'HA', "csa".($csa_cnt+1)."_${row}_${Y}");
   //;                   $row++;
   //;                   $Y = $col - $row * $booth  if $layout_shape =~ /Square/;
   //;                   $Y = $col if $layout_shape =~ /Parallelogram/;
   //;
   //;                   $csa_cnt++;
   //;                   if($put_csa){
      `$CSA_obj->instantiate()` ( .a(`$array_conn[0]`), .b(`$array_conn[1]`), .ci(`$array_conn[2]`),
   //;                   } else {
      `$CSA_obj->instantiate()` ( .a(`$array_conn[0]`), .b(`$array_conn[1]`),
   //;                   }
                                  .s(pp_merge1_`$array-1`_s), .co(co[`$co_index`]) );
   //;                   $co_index++;
   //;               }else{

    assign pp_merge1_`$array-1`_s = pp_merge1_`$array-2`_s;
   //;               }
   //;
   //;           } #if($array==1)
   //;
   //;       $array_csa_prev = $array_csa;
   //;}#for (my $array=0; $array 

   //;if($array_count>1){
   //##########Root
   //;    $array_conn[0]="";$array_conn[1]="";$array_conn[2]="";
   //;    $put_csa = 1;
   //;    $array_conn[1]="pp_merge1_".($array_count-2)."_s";
   //;    $array_conn[2]=($array_count==2)?"pp_1_".($array_csa_prev-1)."_s":"pp_merge_".($array_count-2)."_s";
   //;    if($ci_index<$ci_w) {
   //;        $array_conn[0]=  "ci[".$csa_cnt."]";$ci_index++;
   //;    }elsif($pp_index<$pp_count){
   //;        $array_conn[0]="pp[${pp_index}]";$pp_index++;$pp_remain--;
   //;    }else{
   //;        $put_csa = 0;
   //;    }
   //;#     csa_root_${row}_${Y}
   //;    my $CSA_obj = generate($put_csa?'CSA':'HA', "csa".($csa_cnt+1)."_${row}_${Y}");
   //;    $row++;
   //;    $Y = $col - $row * $booth  if $layout_shape =~ /Square/;
   //;    $Y = $col if $layout_shape =~ /Parallelogram/;
   //;
   //;    $csa_cnt++;
   //;    if($put_csa) {
      `$CSA_obj->instantiate()` ( .a(`$array_conn[0]`), .b(`$array_conn[1]`), .ci(`$array_conn[2]`),
   //;    }else{
      `$CSA_obj->instantiate()` ( .a(`$array_conn[1]`), .b(`$array_conn[2]`),
   //;    }
                                  .s(sum), .co(carry) );


   //;}

endmodule

//co `$co_index` == `$co_w`
//ci `$ci_index` == `$ci_w`
//pp `$pp_index` == `$pp_count`

//;if($pp_index ==$pp_count && $ci_index==$ci_w && $co_index==$co_w){
//PASS
//;}else{
//FAIL
//;}


//; # Declare the current csa_arr for other modules to use

//; parameter(Name=>'CarryOutWidth', Val=>$co_w, Force=>1,
//;           Doc=>"Number of column carry out signals");
