/* *****************************************************************************
 * Description: FP-Gen.vp
 * Wrapper for CMA and FMA
 * ****************************************************************************/

//; ###############################################################################
//; # PARAMETERIZATION
//; #############################################################################/
//; my $verif_mode = $self->get_top_param('VERIF_MODE'); # Reads this parameter from the top level
//; my $synth_mode = $self->get_top_param('SYNTH_MODE'); # Reads this parameter from the top level
//; my $arch = parameter(Name=>'Architecture', Val=>'FMA', List=>['CMA', 'FMA', 'DW_FMA'], Opt=>'No',
//; 			       Doc=>"Which architecture implements Multiply Add? Cascade multiply accumulate ".
//; 			            "or Fused or Designware component? (Pick:CMA/FMA) !FUNCTIONAL!");
//; 
//; ###############################################################################
//; # Local Variables to Aid In Instantiation
//; #############################################################################/
//;
//; # Generate the SubInstance here and derive Parameters
//; my $FP_obj = generate( $arch , $arch );
//; my $frac_width = $FP_obj->get_param('FractionWidth');
//; my $exp_width = $FP_obj->get_param('ExponentWidth');
//; my $enable_forwarding = $FP_obj->get_param('EnableForwarding');
//; my $enable_denormals = $FP_obj->get_param('EnableDenormals');
//; my $product_width = 2 * $frac_width + 2;
//;
//; # Calculate Pipeline Depth for Export
//;
//; my $pipeline_depth = $FP_obj->get_param('PipelineDepth');
//; my $mul_pipeline_depth = $arch eq 'CMA' ? $FP_obj->get_param('MulPipelineDepth') : 0 ;
//; my $add_pipeline_depth = $arch eq 'CMA' ? $FP_obj->get_param('AddPipelineDepth') : 0 ;
//; my $forward_cycle      = $arch eq 'DW_FMA' ? $pipeline_depth : $pipeline_depth-1;

//; my $FPGen_ifc = generate('FPGen_ifc', 'FPGen_ifc',  FractionWidth => $frac_width,
//;                         ExponentWidth => $exp_width, EnableForwarding=> $enable_forwarding, PipelineDepth =>$pipeline_depth,
//;                         MulPipelineDepth=>$mul_pipeline_depth);

//;
//; #######################################################################
//; # Export Derived Paramters for Parent's Use
//; #######################################################################
//;
//; parameter( Name=>'FractionWidth'    , Val=>$FP_obj->get_param('FractionWidth')    , Doc=>'' , force=>1 );
//; parameter( Name=>'ExponentWidth'    , Val=>$FP_obj->get_param('ExponentWidth')    , Doc=>'' , force=>1 );
//; parameter( Name=>'EnableForwarding' , Val=>$FP_obj->get_param('EnableForwarding') , Doc=>'' , force=>1 );
//; parameter( Name=>'EnableDenormals'  , Val=>$FP_obj->get_param('EnableDenormals')  , Doc=>'' , force=>1 );
//; parameter( Name=>'PipelineDepth'    , Val=>$pipeline_depth     , Doc=>'',, force=>1 );
//; parameter( Name=>'MulPipelineDepth' , Val=>$mul_pipeline_depth , Doc=>'' , force=>1 );
//; parameter( Name=>'AddPipelineDepth' , Val=>$add_pipeline_depth , Doc=>'' , force=>1 );
//; parameter( Name=>'ForwardCycle'     , Val=>$forward_cycle , Doc=>'' , force=>1 );
//; parameter( Name=>'InterfaceName'    , Val=>$FPGen_ifc->mname , Doc=>'' , force=>1);
//; parameter( Name=>'InterfaceObj'          , Val=>$FPGen_ifc,         Doc=>'the pointer of interface object', force=>1);
//; #parameter( Name=>'' , Val=>$ , Doc=>'' , force=>1 );
//; #parameter( Name=>'' , Val=>$ , Doc=>'' , force=>1 );
//; #parameter( Name=>'' , Val=>$ , Doc=>'' , force=>1 );
//;

import FPGenPkg::*;



// FP-Gen
module `mname` (
         input logic clk, reset,
         `$FPGen_ifc->mname`.FPU FPGen_bus	       
); // End Port Decleration 


   FPGenPkg::InstructionType opcode;
   assign opcode = FPGen_bus.opcode;

   // now decode the opcode
   logic 	     adder_mode;
   logic 	     multiplier_mode;
   logic [`$exp_width + $frac_width`:0]  b, c;
   logic 	     valid_in;
   assign adder_mode = ~opcode[0];
   assign multiplier_mode = ~opcode[1];
   assign valid_in =  opcode[0] | opcode[1];
   
   assign b = adder_mode ? { 2'b0, {(`${exp_width}-1`){1'b1}}, {(`${frac_width}`) {1'b0}} }: FPGen_bus.b;
   assign c = multiplier_mode ? 0 : FPGen_bus.c;
   //; my $fp_one = "{ 2\'b0, {(${exp_width}-1){1\'b1}}, ${frac_width}\'b0 }";
   //; my $fp_zero = "0";
   
   // Instantiate the Wrapped Unit Here
   `$FP_obj->instantiate()` (
           		     .clk(clk), 
           		     .reset(reset), 	
			     //; if ($verif_mode =~ /ON/){
	   		     .dumptolog(FPGen_bus.dumptolog),
			     //; }		
                             .a(FPGen_bus.a),
			     // HACK: FP unit itself doesn't functionally 
			     // support adder_mode and mul_mode. Need two
			     // mux here. 
                             .b(b),
                             .c(c),
			     .rnd(FPGen_bus.rnd),
			     //; if ($enable_forwarding =~ /YES/){
           		     .forward_a(FPGen_bus.forward_a), 
           		     .forward_b(FPGen_bus.forward_b), 
           		     .forward_c(FPGen_bus.forward_c),
			     //; }		
			     //; if ($pipeline_depth>0){
                             .stall_in(FPGen_bus.stall_in),		
           		     .valid_in(valid_in ),
                             .adder_mode(adder_mode),
                             .multiplier_mode(multiplier_mode),
                             .valid_out( FPGen_bus.valid_out ),
                             .stall_request(FPGen_bus.stall_request),  
			     //; }    
	                     .z(FPGen_bus.z),
	   		     .status(FPGen_bus.status)
                             );
   

   
endmodule : `mname`
